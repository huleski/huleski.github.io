<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Holeski的博客</title>
  
  <subtitle>你为什么这么熟练啊！？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huleski.github.io/"/>
  <updated>2021-03-12T11:02:15.720Z</updated>
  <id>https://huleski.github.io/</id>
  
  <author>
    <name>Holeski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker-compose安装redis</title>
    <link href="https://huleski.github.io/2021/03/12/docker-compose%E5%AE%89%E8%A3%85redis/"/>
    <id>https://huleski.github.io/2021/03/12/docker-compose安装redis/</id>
    <published>2021-03-12T10:55:21.000Z</published>
    <updated>2021-03-12T11:02:15.720Z</updated>
    
    <content type="html"><![CDATA[<p>编写yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis-server</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/redis/data:/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/redis/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"6379:6379"</span></span><br></pre></td></tr></table></figure><p>同级目录中创建配置文件 <code>reids.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>启动镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写yml文件&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="docker-compose" scheme="https://huleski.github.io/categories/docker-compose/"/>
    
    
      <category term="docker-compose" scheme="https://huleski.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose安装MariaDB</title>
    <link href="https://huleski.github.io/2021/03/12/docker-compose%E5%AE%89%E8%A3%85MariaDB/"/>
    <id>https://huleski.github.io/2021/03/12/docker-compose安装MariaDB/</id>
    <published>2021-03-12T08:58:20.000Z</published>
    <updated>2021-03-12T10:49:01.888Z</updated>
    
    <content type="html"><![CDATA[<p>创建<code>docker-compose.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mariadb:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line">      <span class="comment"># root 密码</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=root123</span></span><br><span class="line">      <span class="comment"># root 允许登录的host</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_HOST=%</span></span><br><span class="line">      <span class="comment"># 时区</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TIME_ZONE=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># 容器与宿主机时间同步</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="comment"># 数据库目录映射</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/mariadb/data/:/var/lib/mysql</span></span><br><span class="line">      <span class="comment"># 数据库配置文件</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/mariadb/config:/etc/mysql/conf.d</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>在宿主机的配置目录<code>/data/mariadb/config</code>中创建自定义配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><p>配置文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line"># Here is entries for some specific programs</span><br><span class="line"># The following values assume you have at least 32M ram</span><br><span class="line"></span><br><span class="line"># This was formally known as [safe_mysqld]. Both versions are currently parsed.</span><br><span class="line">[mysqld_safe]</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">nice            = 0</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">port            = 3306</span><br><span class="line">basedir         = /usr</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">tmpdir          = /tmp</span><br><span class="line">lc_messages_dir = /usr/share/mysql</span><br><span class="line">lc_messages     = en_US</span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">max_connections         = 1000</span><br><span class="line">connect_timeout         = 5</span><br><span class="line">wait_timeout            = 600</span><br><span class="line">max_allowed_packet      = 16M</span><br><span class="line">thread_cache_size       = 128</span><br><span class="line">sort_buffer_size        = 4M</span><br><span class="line">bulk_insert_buffer_size = 16M</span><br><span class="line">tmp_table_size          = 32M</span><br><span class="line">max_heap_table_size     = 32M</span><br><span class="line"></span><br><span class="line"># This replaces the startup script and checks MyISAM tables if needed</span><br><span class="line"># the first time they are touched. On error, make copy and try a repair.</span><br><span class="line">myisam_recover_options = BACKUP</span><br><span class="line">key_buffer_size         = 128M</span><br><span class="line">#open-files-limit       = 2000</span><br><span class="line">table_open_cache        = 400</span><br><span class="line">myisam_sort_buffer_size = 512M</span><br><span class="line">concurrent_insert       = 2</span><br><span class="line">read_buffer_size        = 2M</span><br><span class="line">read_rnd_buffer_size    = 1M</span><br><span class="line"></span><br><span class="line">query_cache_limit               = 128K</span><br><span class="line">query_cache_size                = 64M</span><br><span class="line"></span><br><span class="line">slow_query_log_file     = /var/log/mysql/mariadb-slow.log</span><br><span class="line">long_query_time = 10</span><br><span class="line">#log_slow_rate_limit    = 1000</span><br><span class="line">#log_slow_verbosity     = query_plan</span><br><span class="line"></span><br><span class="line">#sync_binlog            = 1</span><br><span class="line">expire_logs_days        = 10</span><br><span class="line">max_binlog_size         = 100M</span><br><span class="line"></span><br><span class="line"># InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.</span><br><span class="line"># Read the manual for more InnoDB related options. There are many!</span><br><span class="line">default_storage_engine  = InnoDB</span><br><span class="line"># you can&apos;t just change log file size, requires special procedure</span><br><span class="line">#innodb_log_file_size   = 50M</span><br><span class="line">innodb_buffer_pool_size = 256M</span><br><span class="line">innodb_log_buffer_size  = 8M</span><br><span class="line">innodb_file_per_table   = 1</span><br><span class="line">innodb_open_files       = 400</span><br><span class="line">innodb_io_capacity      = 400</span><br><span class="line">innodb_flush_method     = O_DIRECT</span><br><span class="line"></span><br><span class="line">[galera]</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">quote-names</span><br><span class="line">max_allowed_packet      = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer              = 16M</span><br><span class="line"></span><br><span class="line">!include /etc/mysql/mariadb.cnf</span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure><p>保存后启动镜像: <code>docker-compose up -d</code></p><p>启动成功后可进入镜像查看myql运行情况<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入镜像</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mariadb /bin/bash</span><br><span class="line"><span class="comment"># 登录mariadb</span></span><br><span class="line">&gt; mysql -uroot -pWTAherui@20<span class="comment">#</span></span><br><span class="line"><span class="comment"># 查看编码</span></span><br><span class="line">&gt; show variables like <span class="string">'%character%'</span></span><br></pre></td></tr></table></figure></p><p>创建数据库时指定编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE  `user` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建&lt;code&gt;docker-compose.yml&lt;/code&gt;文件&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="docker-compose" scheme="https://huleski.github.io/categories/docker-compose/"/>
    
    
      <category term="docker-compose" scheme="https://huleski.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像的导入导出</title>
    <link href="https://huleski.github.io/2021/03/12/docker%E9%95%9C%E5%83%8F%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>https://huleski.github.io/2021/03/12/docker镜像的导入导出/</id>
    <published>2021-03-12T03:07:27.000Z</published>
    <updated>2021-03-12T11:12:40.488Z</updated>
    
    <content type="html"><![CDATA[<p>docker镜像导入导出的主要命令: export、import、save、load</p><h2 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h2><blockquote><p>docker save [options] images [images…]</p></blockquote><p>示例 docker save -o nginx.tar nginx:latest</p><p>或 docker save &gt; nginx.tar nginx:latest</p><p>其中-o和&gt;表示输出到文件，nginx.tar为目标文件，nginx:latest是源镜像名（name:tag）</p><h2 id="load命令"><a href="#load命令" class="headerlink" title="load命令"></a>load命令</h2><blockquote><p>docker load [options]</p></blockquote><p>示例 docker load -i nginx.tar</p><p>或 docker load &lt; nginx.tar</p><p>其中-i和&lt;表示从文件输入。会成功导入镜像及相关元数据，包括tag信息</p><h2 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h2><blockquote><p>docker export [options] container</p></blockquote><p>示例 docker export -o nginx-test.tar nginx-test</p><p>其中-o表示输出到文件，nginx-test.tar为目标文件，nginx-test是源容器名（name）</p><h2 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h2><blockquote><p>docker import [options] file|URL|- [REPOSITORY[:TAG]]</p></blockquote><p>示例 docker import nginx-test.tar nginx:imp</p><p>或 cat nginx-test.tar | docker import - nginx:imp</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别 "></a>区别 </h2><p>export命令导出的tar文件略小于save命令导出的</p><p>export命令是从容器（container）中导出tar文件，而save命令则是从镜像（images）中导出</p><p>基于第二点，export导出的文件再import回去时，无法保留镜像所有历史（即每一层layer信息，不熟悉的可以去看Dockerfile），不能进行回滚操作；而save是依据镜像来的，所以导入时可以完整保留下每一层layer信息。</p><blockquote><p>若是只想备份images，使用save、load即可</p><p>若是在启动容器后，容器内容有变化，需要备份，则使用export、import</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;docker镜像导入导出的主要命令: export、import、save、load&lt;/p&gt;
&lt;h2 id=&quot;save命令&quot;&gt;&lt;a href=&quot;#save命令&quot; class=&quot;headerlink&quot; title=&quot;save命令&quot;&gt;&lt;/a&gt;save命令&lt;/h2&gt;&lt;blockq
      
    
    </summary>
    
      <category term="docker" scheme="https://huleski.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本命令</title>
    <link href="https://huleski.github.io/2021/03/12/Hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://huleski.github.io/2021/03/12/Hexo基本命令/</id>
    <published>2021-03-12T02:56:05.000Z</published>
    <updated>2021-03-12T03:07:28.181Z</updated>
    
    <content type="html"><![CDATA[<pre><code>由于不是经常使用hexo写笔记, 偶尔会有忘记的时候, 所以就记下来常用的基本命令</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新文件</span></span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 生成文件并部署</span></span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>预知详情如何, 请看 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;由于不是经常使用hexo写笔记, 偶尔会有忘记的时候, 所以就记下来常用的基本命令
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="Hexo" scheme="https://huleski.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://huleski.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker安装rabbitmq</title>
    <link href="https://huleski.github.io/2020/10/12/docker%E5%AE%89%E8%A3%85rabbitmq/"/>
    <id>https://huleski.github.io/2020/10/12/docker安装rabbitmq/</id>
    <published>2020-10-12T08:00:07.000Z</published>
    <updated>2020-11-25T10:52:27.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>进入<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub官方镜像仓库</a></p><p>搜索rabbitMq，进入官方的镜像，可以看到以下几种类型的镜像；我们选择带有“mangement”的版本（包含web管理页面）</p><p>编写docker-compose文件 docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">rabbitmq:management-alpine:3.8.9</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_USER=root</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span> </span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>启动容器(在<code>docker-compose.yml</code>文件同级目录执行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>启动rabbitmq_management</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbit rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p>现在已经启动完成了, 浏览器打开web管理端：<a href="http://ip:15672" target="_blank" rel="noopener">http://ip:15672</a></p><p>输入前面docker-compose里面设置的用户名密码登录即可</p><p>官方安装的默认是不带延迟队列插件的, 需要自己安装</p><h2 id="docker构建延迟队列插件rabbitmq"><a href="#docker构建延迟队列插件rabbitmq" class="headerlink" title="docker构建延迟队列插件rabbitmq"></a>docker构建延迟队列插件rabbitmq</h2><p>前面已经下载好镜像了, 另外需要下载插件</p><p>官方插件下载地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/" target="_blank" rel="noopener">github下载</a>, 选择对应版本, 这里我们同样选3.8.9版本下载, 放到服务器上</p><p>创建DockerFile文件(在插件同级目录, 插件名为<code>rabbitmq_delayed_message_exchange-3.8.9.ez</code>), 内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM rabbitmq:3-management</span><br><span class="line">COPY [<span class="string">"rabbitmq_delayed_message_exchange-3.8.9.ez"</span> , <span class="string">"/plugins/"</span>]</span><br><span class="line">RUN rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange rabbitmq_management</span><br></pre></td></tr></table></figure><p>开始打包构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t holeski/rabbitmq-delay:3.8.9 .</span><br></pre></td></tr></table></figure><p>修改<code>docker-compose.yml</code>文件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">holeski/rabbitmq-delay:3.8.9</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_USER=root</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>现在可以一个命令启动就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>镜像已上传到dockerhub, 可以直接拉取使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull holeski/rabbitmq-delay:3.8.9</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h2&gt;&lt;p&gt;进入&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="docker" scheme="https://huleski.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>java 8 本新特性</title>
    <link href="https://huleski.github.io/2019/11/12/java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://huleski.github.io/2019/11/12/java 8 新特性/</id>
    <published>2019-11-12T12:17:25.000Z</published>
    <updated>2019-11-12T12:48:43.585Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="noopener">官网介绍</a></p><p>参考: <a href="https://www.jianshu.com/p/5b800057f2d8" target="_blank" rel="noopener">【译】Java 8的新特性—终极版</a></p><ul><li><p>Lambda 表达式 和 函数式接口 − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</p></li><li><p>方法引用 − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p></li><li><p>默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。</p></li><li><p>应用范围扩大的注解, 可以重复注解, 更好的类型推断</p></li><li><p>新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</p></li><li><p>Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</p></li><li><p>Date Time API − 加强对日期与时间的处理。</p></li><li><p>Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</p></li><li><p>Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p></li><li><p>JVM的新特性 - 使用Metaspace（JEP 122）代替持久代（PermGen space）。在JVM参数方面，使用-XX:MetaSpaceSize和-XX:MaxMetaspaceSize代替原来的-XX:PermSize和-XX:MaxPermSize。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考: &lt;a h
      
    
    </summary>
    
      <category term="java" scheme="https://huleski.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://huleski.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>nginx设置反向代理访问pixiv图片</title>
    <link href="https://huleski.github.io/2019/10/17/nginx%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEpixiv%E5%9B%BE%E7%89%87/"/>
    <id>https://huleski.github.io/2019/10/17/nginx设置反向代理访问pixiv图片/</id>
    <published>2019-10-17T11:53:19.000Z</published>
    <updated>2019-10-17T12:47:00.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>正常情况下, pixiv 的图片服务器域名为 <code>i.pximg.net</code>，因为有防盗链保护，只要 <code>Referer</code> 是空值或不是來自 pixiv 的域名就会返回<code>403</code>。</p><p>使用nginx反向代理只需要將 <code>www.pixiv.net</code> 设置到 <code>Referer</code>中就可以直接访问图片了</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>例如在自己的电脑上安装好nginx后, 修改配置文件, 加上以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path D:\logs levels=1:2 keys_zone=pximg:10m max_size=10g inactive=7d use_temp_path=off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_cache pximg;</span><br><span class="line">        proxy_pass https://i.pximg.net;</span><br><span class="line">        proxy_cache_revalidate on;</span><br><span class="line">        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;</span><br><span class="line">        proxy_cache_lock on;</span><br><span class="line">        add_header X-Cache-Status $upstream_cache_status;</span><br><span class="line">        proxy_set_header Host i.pximg.net;</span><br><span class="line">        proxy_set_header Referer &quot;https://www.pixiv.net/&quot;;</span><br><span class="line">        proxy_set_header User-Agent &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36&quot;;</span><br><span class="line"></span><br><span class="line">        proxy_cache_valid 200 7d;</span><br><span class="line">        proxy_cache_valid 404 5m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完后重启nginx, 随便访问一张pixiv图片, 只需把<code>https</code>换成<code>http</code>, 并且把<code>i.pximg.net</code>域名换成<code>localhost</code>即可, 例如: </p><ul><li>pixiv网站上原始链接 (直接访问会返回403): <a href="https://i.pximg.net/img-original/img/2017/12/20/00/12/19/66360679_p0.png" target="_blank" rel="noopener">https://i.pximg.net/img-original/img/2017/12/20/00/12/19/66360679_p0.png</a></li><li>经过我们的nginx反向代理 (可以正常访问)：<a href="http://localhost/img-original/img/2017/12/20/00/12/19/66360679_p0.png" target="_blank" rel="noopener">http://localhost/img-original/img/2017/12/20/00/12/19/66360679_p0.png</a></li></ul><p>这样我们就能绕过pixiv的防盗链从而直接访问pixiv图片了, 其实网上有一个公开的pixiv反向代理域名<code>i.pixiv.cat</code>, 在访问pixiv图片时, 只需将<code>i.pximg.net</code> 更換成 <code>i.pixiv.cat</code> 就可以使用</p><style>table th:first-of-type {    width: 50%;}</style><table><thead><tr><th>直接访问图片</th><th>反向代理访问图片</th></tr></thead><tbody><tr><td><img src="https://i.pximg.net/img-original/img/2017/12/20/00/12/19/66360679_p0.png" alt="直接访问"></td><td><img src="https://i.pixiv.cat/img-original/img/2017/12/20/00/12/19/66360679_p0.png" alt="反向代理访问"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;&gt;&lt;/a&gt;反向代理&lt;/h2&gt;&lt;p&gt;正常情况下, pixiv 的图片服务器域名为 &lt;code&gt;i.pximg.net&lt;/code&gt;，因为有防盗链保护，只要 &lt;c
      
    
    </summary>
    
      <category term="nginx" scheme="https://huleski.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://huleski.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux设置闹钟定时播放一首歌</title>
    <link href="https://huleski.github.io/2019/10/08/Linux%E8%AE%BE%E7%BD%AE%E9%97%B9%E9%92%9F%E5%AE%9A%E6%97%B6%E6%92%AD%E6%94%BE%E4%B8%80%E9%A6%96%E6%AD%8C/"/>
    <id>https://huleski.github.io/2019/10/08/Linux设置闹钟定时播放一首歌/</id>
    <published>2019-10-08T03:03:47.000Z</published>
    <updated>2019-10-11T12:32:27.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行播放音乐"><a href="#命令行播放音乐" class="headerlink" title="命令行播放音乐"></a>命令行播放音乐</h2><p>现在听歌都是播放mp3文件, 一些Linux系统没有提供对mp3的支持, 需要安装一些软件, 这里我选audacious, 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y audacious</span><br></pre></td></tr></table></figure><p>命令行输入: <code>audacious</code>就可以弹出一个音乐播放窗口, 然后在窗口中操作播放音乐</p><p>也可以命令行播放某个mp3文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">audacious -Hq /usr/<span class="built_in">local</span>/src/inspire.mp3</span><br></pre></td></tr></table></figure><p>将上面的播放命令写到<code>/usr/local/src/play.sh</code>脚本中, 后面会用到</p><h2 id="cron介绍"><a href="#cron介绍" class="headerlink" title="cron介绍"></a>cron介绍</h2><p>linux内置的cron进程能帮我们实现这些需求，cron搭配shell脚本，非常复杂的指令也没有问题。</p><p>我们经常使用的是crontab命令是cron table的简写，它是cron的配置文件，也可以叫它作业列表，我们可以在以下文件夹内找到相关配置文件。</p><ul><li>/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</li><li>/etc/crontab 这个文件负责调度各种管理和维护任务。</li><li>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</li><li>我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。</li></ul><p>crontab的常用的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u username]　　　　//省略用户表表示操作当前用户的crontab</span><br><span class="line">    -e      (编辑工作表)</span><br><span class="line">    -l      (列出工作表里的命令)</span><br><span class="line">    -r      (删除工作作)</span><br></pre></td></tr></table></figure><p>我们用crontab -e进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。</p><p>crontab的命令构成为 时间+动作，其时间有分、时、日、月、周五种，操作符有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 取值范围内的所有数字</span><br><span class="line">/ 每过多少个数字</span><br><span class="line">- 从X到Z</span><br><span class="line">，散列数字</span><br></pre></td></tr></table></figure><p>加入一条命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个工作日中午12点执行一次播放音乐脚本</span></span><br><span class="line">0 12 * * 1,2,3,4,5 /usr/<span class="built_in">local</span>/src/play.sh</span><br></pre></td></tr></table></figure><p>闹钟就设定好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行播放音乐&quot;&gt;&lt;a href=&quot;#命令行播放音乐&quot; class=&quot;headerlink&quot; title=&quot;命令行播放音乐&quot;&gt;&lt;/a&gt;命令行播放音乐&lt;/h2&gt;&lt;p&gt;现在听歌都是播放mp3文件, 一些Linux系统没有提供对mp3的支持, 需要安装一些软件, 这里我
      
    
    </summary>
    
      <category term="Linux" scheme="https://huleski.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://huleski.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装最新版git</title>
    <link href="https://huleski.github.io/2019/09/19/CentOS7%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88git/"/>
    <id>https://huleski.github.io/2019/09/19/CentOS7安装最新版git/</id>
    <published>2019-09-19T09:48:14.000Z</published>
    <updated>2019-09-19T10:03:54.189Z</updated>
    
    <content type="html"><![CDATA[<p>一般新装的linux会自带低版本的git, 如果需要安装新版git, 需要下载源码安装</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>可以从<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">github</a> 或者 <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">镜像站</a>下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/git/git/archive/v2.22.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本git</span></span><br><span class="line">yum remove -y git</span><br><span class="line"><span class="comment"># 依赖库安装</span></span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class="line"><span class="comment"># 解压gz源码压缩包</span></span><br><span class="line">tar -xzf git-2.22.0.tar.gz</span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> git-2.22.0</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git install</span><br><span class="line"><span class="comment"># 添加到环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>安装完成!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般新装的linux会自带低版本的git, 如果需要安装新版git, 需要下载源码安装&lt;/p&gt;
&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h2&gt;&lt;p&gt;可以从&lt;a href=
      
    
    </summary>
    
      <category term="categories" scheme="https://huleski.github.io/categories/categories/"/>
    
    
      <category term="tag" scheme="https://huleski.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>Springboot解决跨域</title>
    <link href="https://huleski.github.io/2019/09/07/Springboot%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
    <id>https://huleski.github.io/2019/09/07/Springboot解决跨域/</id>
    <published>2019-09-07T06:28:47.000Z</published>
    <updated>2019-09-07T07:33:08.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域访问概念"><a href="#跨域访问概念" class="headerlink" title="跨域访问概念"></a>跨域访问概念</h2><blockquote><p>CORS（Cross Origin Resource Sharing）跨域资源共享：表示 JavaScript 代码所在的机器和后端 api 所在的机器不是同一台的情况下实现资源访问。</p></blockquote><p>广义的跨域</p><blockquote><p>资源跳转： A链接、重定向、表单提交</p><p>资源嵌入： <code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签</p><p>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</p></blockquote><p>在前后端分离的项目中，前端一般是 SPA （Single Page Application）类型的应用，所有的 JavaScript 代码都会“下载”到用户机器的浏览器中，后端 api 在服务器端以单个机器或者集群的形式存在。</p><p>同源策略</p><blockquote><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p></blockquote><h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://www.domain.com/b.js" target="_blank" rel="noopener">http://www.domain.com/b.js</a><br><a href="http://www.domain.com/lab/c.js" target="_blank" rel="noopener">http://www.domain.com/lab/c.js</a></td><td>同一域名，不同文件或路径</td><td>允许</td></tr><tr><td><a href="http://www.domain.com:8000/a.js" target="_blank" rel="noopener">http://www.domain.com:8000/a.js</a><br><a href="http://www.domain.com/b.js" target="_blank" rel="noopener">http://www.domain.com/b.js</a></td><td>同一域名，不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="https://www.domain.com/b.js" target="_blank" rel="noopener">https://www.domain.com/b.js</a></td><td>同一域名，不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://192.168.4.12/b.js" target="_blank" rel="noopener">http://192.168.4.12/b.js</a></td><td>域名和域名对应相同ip</td><td>不允许</td></tr><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://x.domain.com/b.js" target="_blank" rel="noopener">http://x.domain.com/b.js</a><br><a href="http://domain.com/c.js" target="_blank" rel="noopener">http://domain.com/c.js</a></td><td>主域相同，子域不同</td><td>不允许</td></tr><tr><td><a href="http://www.domain1.com/a.js" target="_blank" rel="noopener">http://www.domain1.com/a.js</a><br><a href="http://www.domain2.com/b.js" target="_blank" rel="noopener">http://www.domain2.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、 通过jsonp跨域</span><br><span class="line">2、 document.domain + iframe跨域</span><br><span class="line">3、 location.hash + iframe</span><br><span class="line">4、 window.name + iframe跨域</span><br><span class="line">5、 postMessage跨域</span><br><span class="line">6、 跨域资源共享（CORS）</span><br><span class="line">7、 nginx代理跨域</span><br><span class="line">8、 nodejs中间件代理跨域</span><br><span class="line">9、 WebSocket协议跨域</span><br></pre></td></tr></table></figure><ol><li>通过jsonp跨域</li></ol><p>jquery ajax:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.domain2.com:8080/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"handleCallback"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>vue.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.domain2.com:8080/login'</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'handleCallback'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>jsonp缺点：只能实现get一种请求。</p><ol start="2"><li>跨域资源共享（CORS）</li></ol><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p><p>原生ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端设置</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>jquery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>axios</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>java后台设置 (springboot)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持跨域请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Holeski</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/8/28 9:48</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx反向代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#当前端只跨域不带cookie时，可以为 *</span></span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  </span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到一个非常奇怪的bug是, 在本地按照springboot的方式设置好了, 调试也没问题, 打好jar包放到服务器上就跨域失败, 后来捣鼓了一天找到一个方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.dispatch-options-request=true</span><br></pre></td></tr></table></figure><p>设置完就好了, 可是查看源码发现他的默认值就是<code>true</code>。。。。。。后面有时间再仔细看看这个问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跨域访问概念&quot;&gt;&lt;a href=&quot;#跨域访问概念&quot; class=&quot;headerlink&quot; title=&quot;跨域访问概念&quot;&gt;&lt;/a&gt;跨域访问概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CORS（Cross Origin Resource Sharing）跨域资源共享
      
    
    </summary>
    
      <category term="Springboot" scheme="https://huleski.github.io/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://huleski.github.io/tags/Springboot/"/>
    
      <category term="跨域" scheme="https://huleski.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7搭建api文档管理工具--YApi</title>
    <link href="https://huleski.github.io/2019/07/29/CentOS7%E6%90%AD%E5%BB%BAapi%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-YApi/"/>
    <id>https://huleski.github.io/2019/07/29/CentOS7搭建api文档管理工具-YApi/</id>
    <published>2019-07-29T12:35:59.000Z</published>
    <updated>2019-09-30T02:50:51.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="YApi简介"><a href="#YApi简介" class="headerlink" title="YApi简介"></a><a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener">YApi</a>简介</h2><blockquote><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p></blockquote><p>国内几大互联网公司都在用的本地api文档管理工具</p><p>环境要求:</p><ul><li>nodejs（7.6+)</li><li>mongodb（2.6+）</li><li>git</li></ul><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>下载nodejs并解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.gz</span><br><span class="line">tar -zxf node-v10.16.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### nodejs environment</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/data/cordova/node-v10.16.0-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检查node版本命令: <code>node -v</code></p><p>检查npm 版本命令: <code>npm -v</code></p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><p>新建一个文件 <code>/etc/yum.repos.d/mongodb-org-4.0.repo</code> 并加入以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 开始安装</span></span><br><span class="line">sudo yum install -y mongodb-org</span><br><span class="line"><span class="comment">## 启动mongo</span></span><br><span class="line">systemctl start mongod</span><br><span class="line"><span class="comment">## 查看版本</span></span><br><span class="line">mongo --version</span><br></pre></td></tr></table></figure><p>修改mongo的配置文件能够远程访问:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="comment"># 将下面127.0.0.1换成 0.0.0.0就可以远程访问mongodb了</span></span><br><span class="line"><span class="attr">  bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h2 id="全局安装yapi-cli并启动安装程序"><a href="#全局安装yapi-cli并启动安装程序" class="headerlink" title="全局安装yapi-cli并启动安装程序"></a>全局安装yapi-cli并启动安装程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 启动api安装程序</span></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure><p>浏览器访问: <a href="http://ip:9090" target="_blank" rel="noopener">http://ip:9090</a>, 选择好配置, 点击部署</p><p>如果中途报错: <code>generated/aesprim-browser.js: Permission denied</code>则执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> user 0 </span><br><span class="line">npm config <span class="built_in">set</span> unsafe-perm <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装成功会提示: <code>切换到部署目录输入：node vendors/server/app.js</code>, 按照提示去部署目录启动, 再去浏览器访问部署地址就完成了。可是一关闭shell终端yapi会停止运行</p><p>所以我们需要使用pm2来保证进程永远都活着</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pm2</span></span><br><span class="line">npm install pm2 -g</span><br><span class="line"><span class="comment"># pm2启动项目</span></span><br><span class="line">pm2 start vendors/server/app.js --name YApi</span><br><span class="line"><span class="comment"># 显示所有进程状态</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment"># 停止指定的进程</span></span><br><span class="line">pm2 stop 0</span><br><span class="line"><span class="comment"># 杀死指定的进程</span></span><br><span class="line">pm2 delete 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># pm2开机自启动项目 (在此之前先启动项目)</span></span><br><span class="line">pm2 save   <span class="comment"># 保存当前状态</span></span><br><span class="line">pm2 startup   <span class="comment"># 开启自启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用开机自启动</span></span><br><span class="line">pm2 unstartup</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;YApi简介&quot;&gt;&lt;a href=&quot;#YApi简介&quot; class=&quot;headerlink&quot; title=&quot;YApi简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/YMFE/yapi&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="YApi" scheme="https://huleski.github.io/categories/YApi/"/>
    
    
      <category term="YApi" scheme="https://huleski.github.io/tags/YApi/"/>
    
  </entry>
  
  <entry>
    <title>cordova入门教程</title>
    <link href="https://huleski.github.io/2019/07/29/cordova%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huleski.github.io/2019/07/29/cordova入门教程/</id>
    <published>2019-07-29T01:33:23.000Z</published>
    <updated>2020-05-11T07:08:37.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介-Cordova官网-Cordova中文网"><a href="#简介-Cordova官网-Cordova中文网" class="headerlink" title="简介 ( Cordova官网/Cordova中文网)"></a>简介 ( <a href="https://cordova.apache.org/" target="_blank" rel="noopener">Cordova官网</a>/<a href="https://cordova.axuer.com/" target="_blank" rel="noopener">Cordova中文网</a>)</h2><blockquote><p>Apache Cordova是一个开源的移动开发框架。允许你用标准的web技术-HTML5,CSS3和JavaScript做跨平台开发。 应用在每个平台的具体执行被封装了起来，并依靠符合标准的API绑定去访问每个设备的功能，比如说：传感器、数据、网络状态等。</p></blockquote><p>简单来说 Cordova 就是一个能将<code>html/js/css</code>打包成各个平台应用功能的框架, 原理是他内置了一个浏览器, 然后把H5显示出来, 并能够打包成不同平台的App, 目前支持的平台有:</p><ul><li>Android</li><li>Blackberry 10</li><li>iOS</li><li>OS X</li><li>Ubuntu</li><li>Windows</li><li>WP8</li></ul><h2 id="安装环境-data-cordova目录下操作"><a href="#安装环境-data-cordova目录下操作" class="headerlink" title="安装环境 ( /data/cordova目录下操作 )"></a>安装环境 ( /data/cordova目录下操作 )</h2><h3 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1. 安装JDK"></a>1. 安装JDK</h3><p>下载<code>jdk-8u162-linux-x64.tar.gz</code> 并解压到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf jdk-8u162-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 在最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####  Java environment  #####</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/data/cordova/jdk1.8.0_162</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-安装Android-SDK"><a href="#2-安装Android-SDK" class="headerlink" title="2. 安装Android SDK"></a>2. 安装Android SDK</h3><p>下载 Android SDK并解压 (可以在<a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">这里</a>下载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz</span><br><span class="line">tar -xzf android-sdk_r24.4.1-linux.tgz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 并在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####  Android environment  #####</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/data/cordova/android-sdk-linux</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>其他可能用到的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 查看可用的组件:</span></span><br><span class="line">android list sdk --all</span><br><span class="line"><span class="comment">### 安装安卓依赖工具包</span></span><br><span class="line">android update sdk -u --all --filter 1,2,3,5,11,12,22,23,24,25,26,27,28,29,45,88,89</span><br></pre></td></tr></table></figure><h3 id="3-安装gradle"><a href="#3-安装gradle" class="headerlink" title="3. 安装gradle"></a>3. 安装gradle</h3><p>在 <code>https://gradle.org/releases/</code> 中复制对应版本gradle下载地址,在/data/cordova中下载并解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://services.gradle.org/distributions/gradle-3.3-bin...(替换为你复制的那个下载地址)</span><br><span class="line">unzip  gradle-3.3-linux.zip</span><br></pre></td></tr></table></figure><p>编辑配置: <code>vim /etc/profile</code> 在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### gradle environment</span></span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/data/cordova/gradle-3.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="4-安装node-js"><a href="#4-安装node-js" class="headerlink" title="4. 安装node.js"></a>4. 安装node.js</h3><p>下载nodejs并解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.gz</span><br><span class="line">tar -zxf node-v10.16.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### nodejs environment</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/data/cordova/node-v10.16.0-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检查node版本命令: <code>node -v</code><br>检查npm 版本命令: <code>npm -v</code></p><p>最后<code>/etc/profile</code>文件添加的配置为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Java environment</span></span><br><span class="line">JAVA_HOME=/data/gradle/jdk1.8.0_152</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment">### Nodejs environment</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/data/cordova/node-v8.9.4-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Android environment</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/data/cordova/android-sdk-linux</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/tools/bin"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### gradle environment</span></span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/data/cordova/gradle-3.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GRADLE_HOME</span>/bin</span><br></pre></td></tr></table></figure><h3 id="5-安装Cordova"><a href="#5-安装Cordova" class="headerlink" title="5. 安装Cordova"></a>5. 安装Cordova</h3><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="创建Cordova项目"><a href="#创建Cordova项目" class="headerlink" title="创建Cordova项目"></a>创建Cordova项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 可以指定应用ID和应用名: cordova create project_name app_id app_name</span></span><br><span class="line">cordova create hello</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入项目路径</span></span><br><span class="line"><span class="built_in">cd</span> hello</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加Android平台</span></span><br><span class="line">cordova platform add android --save</span><br></pre></td></tr></table></figure><p>修改安卓平台构建文件的maven地址为阿里云镜像: <code>vim  platforms/android/build.gradle</code> (可以跳过, 如果构建失败再来配置)</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将buildscript和allprojects中repositories 的内容都替换成:</span></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">    google()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把写好的H5文件放入www文件夹下</p><p>自定义app logo和启动画面需要添加插件 (<a href="https://blog.csdn.net/lc_style/article/details/78401105" target="_blank" rel="noopener">参考文章</a>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-splashscreen</span><br></pre></td></tr></table></figure><p>打包安装App</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>若打包过程中下载依赖时timeout, 则需要番蔷</p><p>打包成功会出现 <code>BUILD SUCCESSFUL</code> , 打包后的文件为: <code>platforms/android/app/build/outputs/apk/debug/app-debug.apk</code></p><p>Cordova打包release版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 打包未签名的apk包</span></span><br><span class="line">cordova build android --release</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 生成秘钥</span></span><br><span class="line">keytool -genkey -v -keystore ~/myKey.keystore -<span class="built_in">alias</span> myKey -keyalg RSA -validity 20000</span><br></pre></td></tr></table></figure><blockquote><p>keytool 秘钥工具</p><p>-keystore D:/myKey.keystore 表示生成的证书及其存放路径，如果直接写文件名则默认生成在用户当前目录下；</p><p>-alias myKey 表示证书的别名是 <code>myKey</code>,不写这一项的话证书名字默认是mykey；</p><p>-keyalg RSA 表示采用的RSA算法；</p><p>-validity 20000表示证书的有效期是20000天。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 签名</span></span><br><span class="line">jarsigner -verbose -keystore myKey.keystore -signedjar name.apk app-release-unsigned.apk myKey</span><br></pre></td></tr></table></figure><blockquote><p>jarsigner 签名工具</p><p>name.apk 需要生成的apk名字</p><p>app-release-unsigned.apk 待签名的apk</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介-Cordova官网-Cordova中文网&quot;&gt;&lt;a href=&quot;#简介-Cordova官网-Cordova中文网&quot; class=&quot;headerlink&quot; title=&quot;简介 ( Cordova官网/Cordova中文网)&quot;&gt;&lt;/a&gt;简介 ( &lt;a href=&quot;
      
    
    </summary>
    
      <category term="cordova" scheme="https://huleski.github.io/categories/cordova/"/>
    
    
      <category term="cordova" scheme="https://huleski.github.io/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>Springboot整合Elasticsearch</title>
    <link href="https://huleski.github.io/2019/07/11/Springboot%E6%95%B4%E5%90%88Elasticsearch/"/>
    <id>https://huleski.github.io/2019/07/11/Springboot整合Elasticsearch/</id>
    <published>2019-07-11T12:51:55.000Z</published>
    <updated>2019-07-12T01:11:13.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本兼容"><a href="#版本兼容" class="headerlink" title="版本兼容"></a>版本兼容</h2><p>请一定注意版本兼容问题。这关系到很多maven依赖。参考: <a href="https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix" target="_blank" rel="noopener">Spring Data Elasticsearch Spring Boot version matrix</a></p><table><thead><tr><th>Spring Boot Version (x)</th><th>Spring Data Elasticsearch Version (y)</th><th>Elasticsearch Version (z)</th></tr></thead><tbody><tr><td>x &lt;= 1.3.5</td><td>y &lt;= 1.3.4</td><td>z &lt;= 1.7.2*</td></tr><tr><td>x &gt;= 1.4.x</td><td>2.0.0 &lt;=y &lt; 5.0.0**</td><td>2.0.0 &lt;= z &lt; 5.0.0**</td></tr></tbody></table><h2 id="maven依赖-pom-xml"><a href="#maven依赖-pom-xml" class="headerlink" title="maven依赖 pom.xml:"></a>maven依赖 <code>pom.xml</code>:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置文件application-yml"><a href="#配置文件application-yml" class="headerlink" title=" 配置文件application.yml"></a> 配置文件<code>application.yml</code></h2> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    elasticsearch:</span></span><br><span class="line">      <span class="comment"># 集群名</span></span><br><span class="line"><span class="attr">      cluster-name:</span> <span class="string">syncwt-es</span></span><br><span class="line">      <span class="comment"># 连接节点,注意在集群中通信都是9300端口，否则会报错无法连接上！</span></span><br><span class="line"><span class="attr">      cluster-nodes:</span> <span class="attr">localhost:9300,119.29.38.169:9300</span></span><br><span class="line">      <span class="comment"># 是否本地连接</span></span><br><span class="line"><span class="attr">      local:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      repositories:</span></span><br><span class="line">        <span class="comment"># 仓库中数据存储</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动项目后没有报错，日志出现以下说明代表成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017-03-30 19:35:23.078  INFO 20881 --- [           main] o.s.d.e.c.TransportClientFactoryBean     : adding transport node : localhost:9300</span><br></pre></td></tr></table></figure><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"news"</span>, type = <span class="string">"news"</span>, shards = <span class="number">3</span>, replicas = <span class="number">0</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Long)</span><br><span class="line">    <span class="keyword">private</span> Long newsId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, searchAnalyzer = <span class="string">"ik_smart"</span>, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Text, searchAnalyzer = <span class="string">"ik_smart"</span>, analyzer = <span class="string">"ik_max_word"</span>)</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Date, format = DateFormat.custom, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date publishTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String lang;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Date, format = DateFormat.custom, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Date, format = DateFormat.custom, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dao接口可以直接继承spring封装好的接口"><a href="#dao接口可以直接继承spring封装好的接口" class="headerlink" title="dao接口可以直接继承spring封装好的接口"></a>dao接口可以直接继承spring封装好的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NewsRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">News</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;News&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller类"><a href="#Controller类" class="headerlink" title="Controller类"></a>Controller类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/es"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NewsRepository newsRepository;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        News news = <span class="keyword">new</span> News();</span><br><span class="line">        news.setId(<span class="string">"1"</span>);</span><br><span class="line">        news.setTitle(<span class="string">"this is a title"</span>);</span><br><span class="line">        news.summary(<span class="string">"China No.1 !!!"</span>);</span><br><span class="line">        news.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        newsRepository.save(news);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"delete"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        News news = newsRepository.queryById(<span class="string">"1"</span>);</span><br><span class="line">        newsRepository.delete(news);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 局部更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        News news = newsRepository.queryById(<span class="string">"1"</span>);</span><br><span class="line">        news.setTitle(<span class="string">"哈哈"</span>);</span><br><span class="line">        newsRepository.save(news);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> News <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        News news = newsRepository.getById(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span> news;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewsRepository已经封装好了基本的增删改查:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">ElasticsearchCrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    &lt;S extends T&gt; <span class="function">S <span class="title">index</span><span class="params">(S var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">search</span><span class="params">(QueryBuilder var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">search</span><span class="params">(QueryBuilder var1, Pageable var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">search</span><span class="params">(SearchQuery var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">searchSimilar</span><span class="params">(T var1, String[] var2, Pageable var3)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Class&lt;T&gt; <span class="title">getEntityClass</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页排序查询"><a href="#分页排序查询" class="headerlink" title="分页排序查询"></a>分页排序查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Pageable var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持异步查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function">Future&lt;News&gt; <span class="title">findByTitle</span><span class="params">(String title)</span></span>;</span><br></pre></td></tr></table></figure><p>NativeSearchQueryBuilder构建查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">    .withQuery(matchAllQuery())</span><br><span class="line">    .withFilter(boolFilter().must(termFilter(<span class="string">"id"</span>, documentId)))</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">Page&lt;SampleEntity&gt; sampleEntities = elasticsearchTemplate.queryForPage(searchQuery,SampleEntity.class);</span><br></pre></td></tr></table></figure><p>利用Scan和Scroll进行大结果集查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">SearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">    .withQuery(matchAllQuery())</span><br><span class="line">    .withIndices(<span class="string">"test-index"</span>)</span><br><span class="line">    .withTypes(<span class="string">"test-type"</span>)</span><br><span class="line">    .withPageable(<span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    .build();</span><br><span class="line">String scrollId = elasticsearchTemplate.scan(searchQuery,<span class="number">1000</span>,<span class="keyword">false</span>);</span><br><span class="line">List&lt;SampleEntity&gt; sampleEntities = <span class="keyword">new</span> ArrayList&lt;SampleEntity&gt;();</span><br><span class="line"><span class="keyword">boolean</span> hasRecords = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (hasRecords)&#123;</span><br><span class="line">    Page&lt;SampleEntity&gt; page = elasticsearchTemplate.scroll(scrollId, <span class="number">5000L</span> , <span class="keyword">new</span> ResultsMapper&lt;SampleEntity&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Page&lt;SampleEntity&gt; <span class="title">mapResults</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">            List&lt;SampleEntity&gt; chunk = <span class="keyword">new</span> ArrayList&lt;SampleEntity&gt;();</span><br><span class="line">            <span class="keyword">for</span>(SearchHit searchHit : response.getHits())&#123;</span><br><span class="line">                <span class="keyword">if</span>(response.getHits().getHits().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                SampleEntity news = <span class="keyword">new</span> SampleEntity();</span><br><span class="line">                news.setId(searchHit.getId());</span><br><span class="line">                news.setTitle((String)searchHit.getSource().get(<span class="string">"title"</span>));</span><br><span class="line">                chunk.add(news);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PageImpl&lt;SampleEntity&gt;(chunk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span>(page != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sampleEntities.addAll(page.getContent());</span><br><span class="line">        hasRecords = page.hasNextPage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        hasRecords = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自行封装Util方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchHelper</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Client transportClient = elasticsearchTemplate.getClient();</span><br><span class="line">        News news = <span class="keyword">new</span> News(<span class="number">1</span>, <span class="string">"title"</span>, <span class="string">"content"</span>);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(news);</span><br><span class="line">        XContentBuilder builder = jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .field(<span class="string">"title"</span>, <span class="string">"China No.1"</span>)</span><br><span class="line">                .endObject();</span><br><span class="line"></span><br><span class="line">        IndexResponse response = transportClient.prepareIndex(<span class="string">"es-news"</span>, <span class="string">"news"</span>)</span><br><span class="line">                .setSource(jsonBuilder()</span><br><span class="line">                        .startObject()</span><br><span class="line">                        .field(<span class="string">"title"</span>, <span class="string">"China No.1"</span>)</span><br><span class="line">                        .endObject()</span><br><span class="line">                )</span><br><span class="line">                .execute()</span><br><span class="line">                .actionGet();</span><br><span class="line">        transportClient.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>spring-data-elasticsearch对es有很好的支持, 我们能通过spring-data很方便地操作Elasticsearch</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;版本兼容&quot;&gt;&lt;a href=&quot;#版本兼容&quot; class=&quot;headerlink&quot; title=&quot;版本兼容&quot;&gt;&lt;/a&gt;版本兼容&lt;/h2&gt;&lt;p&gt;请一定注意版本兼容问题。这关系到很多maven依赖。参考: &lt;a href=&quot;https://github.com/spri
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="https://huleski.github.io/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="https://huleski.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat配置</title>
    <link href="https://huleski.github.io/2019/07/10/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E5%90%AF%E5%8A%A8%E5%A4%9A%E4%B8%AAtomcat/"/>
    <id>https://huleski.github.io/2019/07/10/一台机器启动多个tomcat/</id>
    <published>2019-07-10T03:43:47.000Z</published>
    <updated>2019-11-07T03:23:53.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一台机器启动多个tomcat"><a href="#一台机器启动多个tomcat" class="headerlink" title="一台机器启动多个tomcat"></a>一台机器启动多个tomcat</h2><p>从<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Apache官网</a>下载好Tomcat, 解压两份到不同的文件夹下即可</p><p>第一个tomcat不做任何修改，使用默认端口和配置</p><p>第二个tomcat需要编辑tomcat/conf目录下server.xml文件, 修改3个端口, 使其与前面的tomcat端口不同:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改关闭端口为8015, 第22行左右 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8015"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改服务端口为8081, 第70行左右 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8081"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改连接端口为8019, 第91行左右 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8019"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成, 可以去启动两个tomcat了</p><p>看网上有些说还需要改redirectPort, 设置啥CATALINA_HOME等等, 都是多余的步骤, 完全不用</p><h2 id="指定JDK版本启动tomcat"><a href="#指定JDK版本启动tomcat" class="headerlink" title="指定JDK版本启动tomcat"></a>指定JDK版本启动tomcat</h2><p>有些复杂环境中有多个JDK, 默认会使用系统环境中的<code>JAVA_HOME</code>来启动tomcat, 如需要指定不同JDK版本启动tomcat, 这就需要修改tomcat的启动配置了</p><blockquote><p>在Windows中启动Tomcat时，双击startup.bat然后会调用catalina.bat文件，而catalina.bat会调用setclasspath.bat文件来获取JAVA_HOME和JRE_HOME这两个环境变量的值，因此只要在tomcat启动时指向特定的JDK即可</p></blockquote><ul><li>在Windows中, 需要在<code>setclasspath.bat</code>文件的开头处加入以下内容</li></ul><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_HOME=C://Program Files/Java/jdk1.<span class="number">7</span>.<span class="number">0</span>_79</span><br><span class="line"><span class="built_in">set</span> JRE_HOME=C://Program Files/Java/jdk1.<span class="number">7</span>.<span class="number">0</span>_79/jre</span><br></pre></td></tr></table></figure><ul><li>在Linux中, 则需要在<code>setclasspath.sh</code>文件的开头处加入以下内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.7.0_79</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jdk1.7.0_79/jre</span><br></pre></td></tr></table></figure><h2 id="修改session默认的cookie名字"><a href="#修改session默认的cookie名字" class="headerlink" title="修改session默认的cookie名字"></a>修改session默认的cookie名字</h2><p>在tomcat的conf目录下, 修改<code>server.xml</code>文件, 在<host>节点中加入<context>配置:</context></host></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">sessionCookiePath</span>=<span class="string">"/"</span> <span class="attr">sessionCookieName</span>=<span class="string">"MY-SESSION"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="console控制台输出有乱码"><a href="#console控制台输出有乱码" class="headerlink" title="console控制台输出有乱码"></a>console控制台输出有乱码</h2><p>在tomcat安装路径<code>conf/logging.properties</code>文件中注释掉其中一行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 将下面这行注释掉</span><br><span class="line"># java.util.logging.ConsoleHandler.encoding = UTF-8</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一台机器启动多个tomcat&quot;&gt;&lt;a href=&quot;#一台机器启动多个tomcat&quot; class=&quot;headerlink&quot; title=&quot;一台机器启动多个tomcat&quot;&gt;&lt;/a&gt;一台机器启动多个tomcat&lt;/h2&gt;&lt;p&gt;从&lt;a href=&quot;https://tomc
      
    
    </summary>
    
      <category term="tomcat" scheme="https://huleski.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="https://huleski.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>从零搭建Hexo</title>
    <link href="https://huleski.github.io/2019/07/10/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAHexo/"/>
    <id>https://huleski.github.io/2019/07/10/从零搭建Hexo/</id>
    <published>2019-07-10T03:15:12.000Z</published>
    <updated>2019-07-17T12:11:35.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h2><ul><li><a href="https://blog.yupaits.com/tools/hexo-blog.html#%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA" target="_blank" rel="noopener">使用hexo快速搭建个人博客</a></li><li><a href="https://hoxis.github.io/Hexo+Next%20%E6%96%B0%E5%A2%9E%E8%8F%9C%E5%8D%95%E5%88%86%E7%B1%BB%E9%A1%B5%E9%9D%A2.html" target="_blank" rel="noopener">Hexo+Next 添加菜单分类页面</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html#menu-settings" target="_blank" rel="noopener">NexT主题官网</a></li><li><a href="https://segmentfault.com/a/1190000010058060" target="_blank" rel="noopener">Hexo进阶高级教程</a></li><li><a href="https://segmentfault.com/a/1190000013660164" target="_blank" rel="noopener">hexo搭建个人博客–NexT主题优化</a></li><li><a href="https://www.jianshu.com/p/d34e9531cfce" target="_blank" rel="noopener">Hexo+NexT优化部署</a></li><li><a href="https://asdfv1929.github.io/photos/" target="_blank" rel="noopener">asdfv1929 ‘s Home</a></li><li><a href="https://blog.csdn.net/u012195214/article/details/79204088" target="_blank" rel="noopener">NexT主题的优化定制修改指南</a></li><li><a href="https://www.93bok.com/Hexo%E6%8F%90%E4%BA%A4%E7%99%BE%E5%BA%A6%E5%92%8CGoogle%E6%94%B6%E5%BD%95%E7%AB%99%E7%82%B9/" target="_blank" rel="noopener">Hexo提交百度和Google收录站点</a></li><li><a href="https://xian6ge.cn/posts/5b8c41e7/" target="_blank" rel="noopener">Hexo NexT 主题6.x版本的使用配置与美化</a></li></ul><h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><ul><li>升级主题到Next6, 字体样式失效, 图标也丢失, 启动还会报错 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localhost/:1 Refused to apply style from <span class="string">'http://localhost:4000/lib/font-awesome/css/font-awesome.min.css?v=4.6.2'</span> </span><br><span class="line">because its MIME <span class="built_in">type</span> (<span class="string">'text/html'</span>) is not a supported stylesheet MIME <span class="built_in">type</span>, and strict MIME checking is enabled.</span><br></pre></td></tr></table></figure><p>在hexo中有自带<code>font-awesome</code>字体的, 但是升级到hexo6时就没有了, 把next目录下（next -&gt; source -&gt; lib）的 <code>font-awesome</code> 文件夹复制到next6同样的目录下, 解决</p><p><img src="http://pubgmjp23.bkt.clouddn.com/%5BD60F5%7D%29IHOGB5%5BW9$T%29F8R.png" alt="font文件夹位置"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章:&quot;&gt;&lt;/a&gt;参考文章:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.yupaits.com/tools/hexo-blog.html
      
    
    </summary>
    
      <category term="Hexo" scheme="https://huleski.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://huleski.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>解决MySQL数据库Too many connections问题</title>
    <link href="https://huleski.github.io/2019/07/09/%E8%A7%A3%E5%86%B3MySQL%E6%95%B0%E6%8D%AE%E5%BA%93Too-many-connections%E9%97%AE%E9%A2%98/"/>
    <id>https://huleski.github.io/2019/07/09/解决MySQL数据库Too-many-connections问题/</id>
    <published>2019-07-09T04:06:05.000Z</published>
    <updated>2019-07-10T01:33:57.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h2><p>因为这种方法是临时修改, 连上MySQL后重启后会失效</p><p>连上MySQL后执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> GLOBAL max_connections=500;</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改mysql配置文件my.cnf</span></span><br><span class="line">vi /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在[mysqld]段中添加或修改max_connections值</span></span><br><span class="line">max_connections=500</span><br><span class="line"><span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><ul><li>查看mysql的最大连接数：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%max_connections%'</span>;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections |  500  |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>查询所有连接到这个服务器上的MySQL连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br></pre></td></tr></table></figure><p>获取到MySQL数据连接列表后，每一条记录都会有一个进程ID号（在上表的第一列）。执行以下命令关闭一条连接:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中1180421是进程列表里找到并且要杀掉的进程号</span></span><br><span class="line">mysql&gt; <span class="built_in">kill</span> 1180421;</span><br></pre></td></tr></table></figure><ul><li>查看服务器响应的最大连接数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like <span class="string">'Max_used_connections'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一:&quot;&gt;&lt;/a&gt;方法一:&lt;/h2&gt;&lt;p&gt;因为这种方法是临时修改, 连上MySQL后重启后会失效&lt;/p&gt;
&lt;p&gt;连上MySQL后执行:&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="MySQL" scheme="https://huleski.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://huleski.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>docker安装JIRA和Confluence（破解版）以及JIRA版本升级方案</title>
    <link href="https://huleski.github.io/2019/07/08/docker%E5%AE%89%E8%A3%85JIRA%E5%92%8CConfluence%EF%BC%88%E7%A0%B4%E8%A7%A3%E7%89%88%EF%BC%89%E4%BB%A5%E5%8F%8AJIRA%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%96%B9%E6%A1%88/"/>
    <id>https://huleski.github.io/2019/07/08/docker安装JIRA和Confluence（破解版）以及JIRA版本升级方案/</id>
    <published>2019-07-08T08:41:58.000Z</published>
    <updated>2019-07-17T12:11:22.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将演示通过Docker安装JIRA和Confluence，并破解过程。<br>本文只做个人学习研究之用，不得用于商业用途！</p></blockquote><h2 id="安装JIRA-7-12-3"><a href="#安装JIRA-7-12-3" class="headerlink" title="安装JIRA (7.12.3)"></a>安装JIRA (7.12.3)</h2><h3 id="1-获取资源"><a href="#1-获取资源" class="headerlink" title="1. 获取资源"></a>1. 获取资源</h3><ul><li>Docker镜像 <a href="https://github.com/cptactionhank" target="_blank" rel="noopener">Github链接</a></li><li>补丁工具(atlassian-agent.jar) <a href="https://github.com/pengzhile/atlassian-agent/releases/download/v1.2/atlassian-agent-v1.2.zip" target="_blank" rel="noopener">Github链接</a>  原链接已失效, 附百度云:</li></ul><blockquote><p>百度网盘地址：</p><p>链接：<a href="https://pan.baidu.com/s/17zNwlp3sd1PLSCxPVjDwfQ" target="_blank" rel="noopener">https://pan.baidu.com/s/17zNwlp3sd1PLSCxPVjDwfQ</a> </p><p>提取码：b84z </p><p>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><h3 id="2-制作Docker破解容器"><a href="#2-制作Docker破解容器" class="headerlink" title="2. 制作Docker破解容器"></a>2. 制作Docker破解容器</h3><p>编写Dockerfile文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM cptactionhank/atlassian-jira-software:7.12.3</span><br><span class="line"></span><br><span class="line">USER root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代理破解包加入容器</span></span><br><span class="line">COPY <span class="string">"atlassian-agent.jar"</span> /opt/atlassian/jira/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动加载代理包</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">'export CATALINA_OPTS="-javaagent:/opt/atlassian/jira/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;"'</span> &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span><br></pre></td></tr></table></figure><p>将下载好的<code>atlassian-agent.jar</code>文件放在Dockerfile同目录下，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- JIRA</span><br><span class="line">    |-Dockerfile</span><br><span class="line">    |-atlassian-agent.jar</span><br></pre></td></tr></table></figure><p>构建镜像, 执行命令(注意后面有一个点)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t jira/jira:v7.12.3 .</span><br></pre></td></tr></table></figure><p>构建成功后会显示 ‘Successfully built…` 字样</p><p>启动容器，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 10086:8080 \</span><br><span class="line">    -v /home/jira/data:/var/atlassian/jira \</span><br><span class="line">    --restart always --name=jira \</span><br><span class="line">    --health-cmd=<span class="string">"curl --silent --fail localhost:8080 || exit 1"</span> \</span><br><span class="line">    jira/jira:v7.12.3</span><br></pre></td></tr></table></figure><p>访问: `<a href="http://127.0.0.1:10086,可见JIRA配置页面" target="_blank" rel="noopener">http://127.0.0.1:10086,可见JIRA配置页面</a></p><h3 id="3-破解"><a href="#3-破解" class="headerlink" title="3. 破解"></a>3. 破解</h3><p>在见到JIRA配置页面后, 进行相关配置, 当要求输入许可证时</p><p><img src="http://pubgmjp23.bkt.clouddn.com/10973635-4168e67779acb0b2_%E7%9C%8B%E5%9B%BE%E7%8E%8B.web.jpg" alt="进入JIRA配置页面"></p><p>复制服务器ID: <code>BY9B-GWD1-1C78-K2DE</code>, 在存放<code>atlassian-agent.jar</code>的目录下执行命令, 生成许可证:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需替换邮箱（test@test.com）、名称（JIRA）、</span></span><br><span class="line"><span class="comment"># 访问地址（http://192.168.0.1）、服务器ID（BY9B-GWD1-1C78-K2DE）</span></span><br><span class="line"><span class="comment"># 为你的信息</span></span><br><span class="line"></span><br><span class="line">java -jar atlassian-agent.jar -d -m <span class="built_in">test</span>@test.com -n JIRA -p jira -o http://192.168.0.89 -s BY9B-GWD1-1C78-K2DE</span><br></pre></td></tr></table></figure><p><img src="http://pubgmjp23.bkt.clouddn.com/xukezheng.jpg" alt="生成许可证"></p><p>复制下面生成的一长串许可证填写到页面中, 完成破解</p><h2 id="安装-Confluence（6-14-1"><a href="#安装-Confluence（6-14-1" class="headerlink" title="安装 Confluence（6.14.1)"></a>安装 Confluence（6.14.1)</h2><h3 id="1-编写Dockerfile文件"><a href="#1-编写Dockerfile文件" class="headerlink" title="1. 编写Dockerfile文件"></a>1. 编写Dockerfile文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM cptactionhank/atlassian-confluence:6.14.1</span><br><span class="line"></span><br><span class="line">USER root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代理破解包加入容器</span></span><br><span class="line">COPY <span class="string">"atlassian-agent.jar"</span> /opt/atlassian/confluence/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动加载代理包</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">'export CATALINA_OPTS="-javaagent:/opt/atlassian/confluence/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;"'</span> &gt;&gt; /opt/atlassian/confluence/bin/setenv.sh</span><br></pre></td></tr></table></figure><h3 id="2-构建镜像"><a href="#2-构建镜像" class="headerlink" title="2. 构建镜像"></a>2. 构建镜像</h3><p>将下载好的<code>atlassian-agent.jar</code>文件放在Dockerfile同目录下，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- Confluence</span><br><span class="line">    |-Dockerfile</span><br><span class="line">    |-atlassian-agent.jar</span><br></pre></td></tr></table></figure><p>构建镜像, 执行命令(注意后面有一个点)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t confluence/confluence:v6.14.1 .</span><br></pre></td></tr></table></figure><p>启动容器，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 10087:8080 \</span><br><span class="line">  -v /home/confluence/data:/var/atlassian/confluence \</span><br><span class="line">  --restart always --name=confluence \</span><br><span class="line">  --health-cmd=<span class="string">"curl --silent --fail localhost:8080 || exit 1"</span> \</span><br><span class="line">  confluence/confluence:v6.14.1</span><br></pre></td></tr></table></figure><p>访问<code>http://127.0.0.1:8090</code>,参照JIRA的安装流程，进行操作。</p><p>生成confluence许可方法可参照前面JIRA的破解过程, 这里不再赘述</p><h2 id="JIRA版本升级"><a href="#JIRA版本升级" class="headerlink" title="JIRA版本升级"></a>JIRA版本升级</h2><p>可以参考<a href="https://confluence.atlassian.com/jirakb/startup-check-jira-data-version-too-low-to-be-upgraded-872266914.html" target="_blank" rel="noopener">官方文档</a></p><p><img src="http://pubgmjp23.bkt.clouddn.com/jira.png" alt="升级步骤"></p><p>由于之前安装的是jira6.4版本的, 现在需要升级到7.12.3版本, 根据官方提示需要先升级到7.0版本的jira再过渡升级到7.12.3</p><h3 id="1-备份数据"><a href="#1-备份数据" class="headerlink" title="1. 备份数据"></a>1. 备份数据</h3><p><strong>a. 备份数据库</strong></p><p>登录jira6.4版本, 进入设置 -&gt; 系统 -&gt; 备份系统, 输入备份的文件名字: 比如jira</p><p><img src="http://pubgmjp23.bkt.clouddn.com/2E6%7D47Y%29@KMCUP3%25%295B%29%60%7BO.png" alt="备份系统"></p><p>点击备份后会在备份界面提示的某个路径下生成一个<code>jira.zip</code>数据库的备份文件</p><p><strong>b . 备份图片</strong></p><p>复制 <code>/var/atlassian/application-data/jira/data</code>下的<code>attachments</code>和<code>avatars</code>文件夹出来,备份好</p><h3 id="2-升级过渡版"><a href="#2-升级过渡版" class="headerlink" title="2. 升级过渡版"></a>2. 升级过渡版</h3><p>如果不过数据库文件过渡处理, 在jira v7.12.3中是无法使用的</p><p>获取JIRA v7.0.11 镜像并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull dchevell/jira-software:7.0.11</span><br><span class="line">docker run -d -p 8080:8080 dchevell/jira-software:7.0.11</span><br></pre></td></tr></table></figure><p>启动后访问 <code>http://127.0.0.1:8080</code>, 开始配置, 当需要许可证时, 上面的方法破解不了, 由于只是做一个过度版本, 可以去官网注册然后申请一个30天有效期的许可证, 然后输入进去就好了</p><p>同样在备份系统的同级目录中点击恢复系统</p><p><img src="http://pubgmjp23.bkt.clouddn.com/ertysdysdrtysert.png" alt="恢复系统"></p><p>按照提示将前面备份好的文件放到他指定目录下,点击复原, 如果需要填写许可证那就填写许可证在复原</p><p>复原成功后再重复上一步骤进行备份<br>备份后将在 docker容器 <code>/var/atlassian/jira/export</code>目录下生成一个<code>.zip</code>数据库的备份文件</p><h3 id="3-升级最终版"><a href="#3-升级最终版" class="headerlink" title="3. 升级最终版"></a>3. 升级最终版</h3><p>按照上面的步骤把jira v7.12.3运行起来, 并将数据库备份文件放入恢复界面指定的目录之下进行数据复原.</p><p>把前面图片备份文件分别放入<code>/var/atlassian/application-data/jira/data/</code>下即可</p><p>升级成功!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文将演示通过Docker安装JIRA和Confluence，并破解过程。&lt;br&gt;本文只做个人学习研究之用，不得用于商业用途！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装JIRA-7-12-3&quot;&gt;&lt;a href=&quot;#安装JIRA-7-
      
    
    </summary>
    
      <category term="JIRA" scheme="https://huleski.github.io/categories/JIRA/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
      <category term="JIRA" scheme="https://huleski.github.io/tags/JIRA/"/>
    
  </entry>
  
  <entry>
    <title>初识JMX</title>
    <link href="https://huleski.github.io/2019/06/15/%E5%88%9D%E8%AF%86JMX/"/>
    <id>https://huleski.github.io/2019/06/15/初识JMX/</id>
    <published>2019-06-15T12:47:00.000Z</published>
    <updated>2019-06-18T12:50:00.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JXM简介"><a href="#JXM简介" class="headerlink" title="JXM简介"></a>JXM简介</h2><p>试想，一个正在运行中的程序，我们如果想改变程序中的一些属性，可以通过什么方法呢？可能有这么几个方法：</p><ul><li>对于服务器式的程序，可以制作管理页面，通过HTTP post与servlet来更改服务器端程序的属性。</li><li>对于服务器式的程序，还可以通过SOAP方式。但这需要程序开启了SOAP端的服务。</li><li>可以使用RMI远程调用。但这需要设计开启RMI服务。</li><li>如果是SWT或Swing的程序，则可以通过设计UI管理界面，使用户可以和程序内部交互。</li><li>还有一种方式，是将可改变的属性放入配置文件XML，properties或数据库，程序轮询配置文件，以求获取最新的配置。</li></ul><p>上面几个方法都是常见，但却无法通用的。所谓通用，是指解决方案符合一个标准，使得任何符合此标准的工具都能解析针对此标准的方案实现。这样A公司设计的方案，B公司可以根据标准来解析。JMX就是Java管理标准。</p><p>对于一些参数的修改，网上有一段描述还是比较形象的：</p><ol><li>程序初哥一般是写死在程序中，到要改变的时候就去修改代码，然后重新编译发布。</li><li>程序熟手则配置在文件中（JAVA一般都是properties文件），到要改变的时候只要修改配置文件，但还是必须重启系统，以便读取配置文件里最新的值。</li><li>程序好手则会写一段代码，把配置值缓存起来，系统在获取的时候，先看看配置文件有没有改动，如有改动则重新从配置里读取，否则从缓存里读取。</li><li>程序高手则懂得物为我所用，用JMX把需要配置的属性集中在一个类中，然后写一个MBean，再进行相关配置。另外JMX还提供了一个工具页，以方便我们对参数值进行修改。</li></ol><p>JMX(Java Management Extensions)是一个为应用程序植入管理功能的框架。JMX是一套标准的代理和服务，实际上，用户可以在任何Java应用程序中使用这些代理和服务实现管理。JMX让程序有被管理的功能，例如你开发一个WEB网站，它是在24小时不间断运行，那么你肯定会对网站进行监控，如每天的UV、PV是多少；又或者在业务高峰的期间，你想对接口进行限流，就必须去修改接口并发的配置值。</p><p>应用场景：中间件软件WebLogic的管理页面就是基于JMX开发的，而JBoss则整个系统都基于JMX构架。</p><h2 id="JMX的构成"><a href="#JMX的构成" class="headerlink" title="JMX的构成"></a>JMX的构成</h2><p>JMX由三部分组成：</p><ul><li><p>基础层：程序端的Instrumentation, 我把它翻译成可操作的仪器。这部分就是指的MBean. MBean类似于JavaBean。最常用的MBean则是Standard MBean和MXBean.</p></li><li><p>适配层：程序端的JMX agent. 这部分指的是MBean Server. MBean Server则是启动与JVM内的基于各种协议的适配器。用于接收客户端的调遣，然后调用相应的MBeans.</p></li><li><p>接入层：客户端的Remote Management. 这部分则是面向用户的程序。此程序则是MBeans在用户前投影，用户操作这些投影，可以反映到程序端的MBean中去。这内部的原理则是client通过某种协议调用agent操控MBeans.<br>JMX agent与Remote Management之间是通过协议链接的，这协议可能包含：</p><ul><li>HTTP</li><li>SNMP</li><li>RMI</li><li>IIOP</li></ul></li></ul><p>JMX agent中有针对上面协议的各种适配器。可以解析通过相应协议传输过来的数据。Remote Management client则可以用现成的工具，如JConsole, 也可以自己书写java code。</p><h2 id="实现一个JMX程序"><a href="#实现一个JMX程序" class="headerlink" title="实现一个JMX程序"></a>实现一个JMX程序</h2><p> 1、 首先定义一个MBean接口，接口的命名规范为以具体的实现类为前缀（这个规范很重要）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloMBean</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">(String str)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTelephone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、定义一个实现类，实现上面的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 该类名称必须与实现的接口的前缀保持一致（即MBean前面的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">HelloMBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTelephone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get Telephone"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"helloWorld:"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get name 123"</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set name 123"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get age 123"</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set age 123"</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、定义agent层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> javax.management.JMException;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMException, Exception </span>&#123;</span><br><span class="line">          <span class="comment">// 通过工厂类获取MBeanServer，用来做MBean的容器 </span></span><br><span class="line">         MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">          <span class="comment">// ObjectName中的取名是有一定规范的，格式为：“域名：name=MBean名称”，其中域名和MBean的名称可以任意取。</span></span><br><span class="line">         ObjectName helloName = <span class="keyword">new</span> ObjectName(<span class="string">"jmxBean:name=hello"</span>);</span><br><span class="line">         <span class="comment">//将Hello这个类注入到MBeanServer中，注入需要创建一个ObjectName类</span></span><br><span class="line">         server.registerMBean(<span class="keyword">new</span> Hello(), helloName);</span><br><span class="line">         Thread.sleep(<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，一个简单的JMX的DEMO已经写完了，现在我们通过JDK提供的Jconsole来进行操作。</p><p>4、在JDK安装路径 ·JAVA_HOME\bin· 下找到 jconsole.exe 这个小工具，双击打开。</p><p>在本地进程中找到 <code>HelloAgent</code> 并双击打开</p><p>在当前界面上，我们可以给程序中HelloMBean的属性赋值，也可以调用其中的方法</p><p>这样就做到动态修改运行中程序的状态进而管理程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JXM简介&quot;&gt;&lt;a href=&quot;#JXM简介&quot; class=&quot;headerlink&quot; title=&quot;JXM简介&quot;&gt;&lt;/a&gt;JXM简介&lt;/h2&gt;&lt;p&gt;试想，一个正在运行中的程序，我们如果想改变程序中的一些属性，可以通过什么方法呢？可能有这么几个方法：&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
      <category term="JMX" scheme="https://huleski.github.io/categories/JMX/"/>
    
    
      <category term="JMX" scheme="https://huleski.github.io/tags/JMX/"/>
    
  </entry>
  
  <entry>
    <title>java爬虫-webmagic入门</title>
    <link href="https://huleski.github.io/2019/06/14/java%E7%88%AC%E8%99%AB-webmagic%E5%85%A5%E9%97%A8/"/>
    <id>https://huleski.github.io/2019/06/14/java爬虫-webmagic入门/</id>
    <published>2019-06-14T10:48:13.000Z</published>
    <updated>2019-07-06T03:18:34.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webmagic简介"><a href="#webmagic简介" class="headerlink" title="webmagic简介"></a>webmagic简介</h2><p><img src="https://camo.githubusercontent.com/8b3a6d93d95d39147ef93f5021f6b69255bda888/687474703a2f2f7765626d616769632e696f2f696d616765732f6c6f676f2e6a706567" alt="webmagic"></p><p><a href="http://webmagic.io/" target="_blank" rel="noopener">官方网站</a> </p><blockquote><p>webmagic是一个开源的Java垂直爬虫框架，目标是简化爬虫的开发流程，让开发者专注于逻辑功能的开发。webmagic的核心非常简单，但是覆盖爬虫的整个流程，也是很好的学习爬虫开发的材料。</p></blockquote><p>webmagic的主要特色：</p><ul><li>完全模块化的设计，强大的可扩展性。</li><li>核心简单但是涵盖爬虫的全部流程，灵活而强大，也是学习爬虫入门的好材料。</li><li>提供丰富的抽取页面API。</li><li>无配置，但是可通过POJO+注解形式实现一个爬虫。</li><li>支持多线程。</li><li>支持分布式。</li><li>支持爬取js动态渲染的页面。</li><li>无框架依赖，可以灵活的嵌入到项目中去。</li></ul><p>该项目是参考了:</p><p><a href="https://github.com/scrapy/scrapy" target="_blank" rel="noopener">python爬虫 scrapy</a></p><p><a href="http://git.oschina.net/l-weiwei/spiderman" target="_blank" rel="noopener">Java爬虫 Spiderman</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>webmagic使用maven管理依赖，在项目中添加对应的依赖即可使用webmagic：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意: </strong> 这里都是参考官方文档, 但实际上maven库的包源有bug, 不过作者已经在源代码里修复了, 需要copy源代码重新编译打包</p><p>克隆源代码 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/code4craft/webmagic.git</span><br></pre></td></tr></table></figure><p>或者直接下载zip源码压缩包, 下载完解压即可</p><p>下载完成后导入到开发工具中, 重新 install webmagic-core模块即可</p><p>创建第一个爬虫:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepoPageProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 部分一：抓取网站的相关配置，包括编码、抓取间隔、重试次数等</span></span><br><span class="line">    <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// process是定制爬虫逻辑的核心接口，在这里编写抽取逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 部分二：定义如何抽取页面信息，并保存下来</span></span><br><span class="line">        page.putField(<span class="string">"author"</span>, page.getUrl().regex(<span class="string">"https://github\\.com/(\\w+)/.*"</span>).toString());</span><br><span class="line">        page.putField(<span class="string">"name"</span>, page.getHtml().xpath(<span class="string">"//h1[@class='entry-title public']/strong/a/text()"</span>).toString());</span><br><span class="line">        <span class="keyword">if</span> (page.getResultItems().get(<span class="string">"name"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//skip this page</span></span><br><span class="line">            page.setSkip(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        page.putField(<span class="string">"readme"</span>, page.getHtml().xpath(<span class="string">"//div[@id='readme']/tidyText()"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 部分三：从页面发现后续的url地址来抓取</span></span><br><span class="line">        page.addTargetRequests(page.getHtml().links().regex(<span class="string">"(https://github\\.com/[\\w\\-]+/[\\w\\-]+)"</span>).all());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> site;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Spider.create(<span class="keyword">new</span> GithubRepoPageProcessor())</span><br><span class="line">                <span class="comment">//从"https://github.com/code4craft"开始抓</span></span><br><span class="line">                .addUrl(<span class="string">"https://github.com/code4craft"</span>)</span><br><span class="line">                <span class="comment">//开启5个线程抓取</span></span><br><span class="line">                .thread(<span class="number">5</span>)</span><br><span class="line">                <span class="comment">//启动爬虫</span></span><br><span class="line">                .run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击运行, 就能看到爬虫工作了</p><p>如果运行的时候报错 <code>javax.net.ssl.SSLException: Received fatal alert: protocol_version</code> 那是你没有编译源码打包.</p><p>代码中注释已经很详细了, 相信大家也大概明白爬取的过程了. 更详细的爬虫教程看作者的<a href="http://webmagic.io/docs/" target="_blank" rel="noopener">官方教程</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webmagic简介&quot;&gt;&lt;a href=&quot;#webmagic简介&quot; class=&quot;headerlink&quot; title=&quot;webmagic简介&quot;&gt;&lt;/a&gt;webmagic简介&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://camo.githubuserconte
      
    
    </summary>
    
      <category term="爬虫" scheme="https://huleski.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://huleski.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统下几个有趣的命令</title>
    <link href="https://huleski.github.io/2019/05/20/Linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>https://huleski.github.io/2019/05/20/Linux系统下几个有趣的命令/</id>
    <published>2019-05-20T11:51:12.000Z</published>
    <updated>2019-05-20T12:22:23.509Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名程序员，在别人的眼里往往是充满科技感、神秘感的，而在我们自己的眼里却往往是觉得无聊、枯燥的。其实，在程序的世界里同样会充满着各种的彩蛋，这些彩蛋往往都是一些大神留下来的，我们未曾发现，只是我们缺少发现程序之美而已。今天我们就来介绍几个有趣的Linux命令, 来体验一波程序彩蛋之美。</p><p>文章参考: <a href="https://www.jianshu.com/p/08e9094f61ce" target="_blank" rel="noopener">Linux系统下好玩有趣的命令，你又用过几个？</a></p><p>由于原文都是在Ubuntu系统下安装使用的, 而我自己是在CentOS7系统下操作, 偶尔有些不同, 我也只选择了其中几个很有趣的试了试</p><h2 id="sl-（Steam-Locomotive）"><a href="#sl-（Steam-Locomotive）" class="headerlink" title="sl （Steam Locomotive）"></a>sl （Steam Locomotive）</h2><p>安装, 这个是最简单的, 经常在你想要查看当前目录的时候错误的输入了<code>sl</code>, 现在就回出现一辆小火车开过的动画…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install sl</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl</span><br></pre></td></tr></table></figure><h2 id="oneko"><a href="#oneko" class="headerlink" title="oneko"></a>oneko</h2><p>撸猫指令, oneko会生成一只图像猫, 在屏幕上乱跑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install oneko</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oneko</span><br></pre></td></tr></table></figure><h2 id="cmatrix"><a href="#cmatrix" class="headerlink" title="cmatrix"></a>cmatrix</h2><p>该指令会在屏幕上下一场字符雨</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 下载压缩包</span></span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/cmatrix/cmatrix/1.2a/cmatrix-1.2a.tar.gz</span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">tar xvf cmatrix-1.2a.tar.gz</span><br><span class="line"><span class="comment">## 进入安装目录</span></span><br><span class="line"><span class="built_in">cd</span> cmatrix-1.2a</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">yum install ncurses-devel</span><br><span class="line"><span class="comment">## 编译源码并安装, 需要有gcc,gcc-c++, 如果没有就yum安装</span></span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line"><span class="comment">## 安装完毕, 运行</span></span><br><span class="line">cmatrix</span><br></pre></td></tr></table></figure><p>启动成功后, 有看到字符雨, 按<code>q</code>退出</p><h2 id="ASCIIquarium"><a href="#ASCIIquarium" class="headerlink" title="ASCIIquarium"></a>ASCIIquarium</h2><p>彩蛋：把你的linux终端变成一个海洋世界，各种生物在不断呈现，有鱼、有水、有草…, 好鬼酷哦(wzr…)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装依赖工具</span></span><br><span class="line">yum -y install ncurses-devel perl-CPAN libyaml-devel perl-CGI perl-Curses perl-ExtUtils-MakeMaker</span><br><span class="line"><span class="comment">## 安装依赖文件</span></span><br><span class="line">wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.4.tar.gz</span><br><span class="line">tar -zxvf Term-Animation-2.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> Term-Animation-2.4/</span><br><span class="line">perl Makefile.PL &amp;&amp; make</span><br><span class="line">make install</span><br><span class="line"><span class="comment">## 安装ASCIIquarium</span></span><br><span class="line">wget http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</span><br><span class="line">tar -zxvf asciiquarium.tar.gz</span><br><span class="line"><span class="built_in">cd</span> asciiquarium_1.1/</span><br><span class="line">cp asciiquarium /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">chmod 755 /usr/<span class="built_in">local</span>/bin/asciiquarium</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">asciiquarium</span><br></pre></td></tr></table></figure><p>同样的运行成功后按<code>q</code>退出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名程序员，在别人的眼里往往是充满科技感、神秘感的，而在我们自己的眼里却往往是觉得无聊、枯燥的。其实，在程序的世界里同样会充满着各种的彩蛋，这些彩蛋往往都是一些大神留下来的，我们未曾发现，只是我们缺少发现程序之美而已。今天我们就来介绍几个有趣的Linux命令, 来体验一
      
    
    </summary>
    
      <category term="Linux" scheme="https://huleski.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://huleski.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
