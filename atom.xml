<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Holeski的博客</title>
  
  <subtitle>你为什么这么熟练啊！？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huleski.github.com/"/>
  <updated>2019-03-18T11:33:32.501Z</updated>
  <id>http://huleski.github.com/</id>
  
  <author>
    <name>Holeski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java线程池实现原理</title>
    <link href="http://huleski.github.com/2019/03/16/java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://huleski.github.com/2019/03/16/java线程池实现原理/</id>
    <published>2019-03-16T14:28:23.000Z</published>
    <updated>2019-03-18T11:33:32.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中的ThreadPoolExecutor类"><a href="#Java中的ThreadPoolExecutor类" class="headerlink" title="Java中的ThreadPoolExecutor类"></a>Java中的ThreadPoolExecutor类</h2><p>java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。</p><p>在ThreadPoolExecutor类中提供了四个构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadPoolExecutor extends AbstractExecutorService &#123;</span><br><span class="line">    .....</span><br><span class="line">    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue);</span><br><span class="line"> </span><br><span class="line">    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory);</span><br><span class="line"> </span><br><span class="line">    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler);</span><br><span class="line"> </span><br><span class="line">    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。</p><p>构造器中各个参数的含义：</p><ul><li>corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li><li>maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li><li>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</li><li>unit：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TimeUnit.DAYS;               //天</span><br><span class="line">TimeUnit.HOURS;             //小时</span><br><span class="line">TimeUnit.MINUTES;           //分钟</span><br><span class="line">TimeUnit.SECONDS;           //秒</span><br><span class="line">TimeUnit.MILLISECONDS;      //毫秒</span><br><span class="line">TimeUnit.MICROSECONDS;      //微妙</span><br><span class="line">TimeUnit.NANOSECONDS;       //纳秒</span><br></pre></td></tr></table></figure><ul><li>workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayBlockingQueue;</span><br><span class="line">LinkedBlockingQueue;</span><br><span class="line">SynchronousQueue;</span><br></pre></td></tr></table></figure></li></ul><p>ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。</p><ul><li>threadFactory：线程工厂，主要用来创建线程；</li><li>handler：表示当拒绝处理任务时的策略，有以下四种取值：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 </span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span><br></pre></td></tr></table></figure></li></ul><p>从上面给出的ThreadPoolExecutor类的代码可以知道，ThreadPoolExecutor继承了AbstractExecutorService</p><h2 id="AbstractExecutorService的实现："><a href="#AbstractExecutorService的实现：" class="headerlink" title="AbstractExecutorService的实现："></a>AbstractExecutorService的实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractExecutorService implements ExecutorService &#123;</span><br><span class="line">   </span><br><span class="line">    protected &lt;T&gt; RunnableFuture&lt;T&gt; newTaskFor(Runnable runnable, T value) &#123; &#125;;</span><br><span class="line">    protected &lt;T&gt; RunnableFuture&lt;T&gt; newTaskFor(Callable&lt;T&gt; callable) &#123; &#125;;</span><br><span class="line">    public Future&lt;?&gt; submit(Runnable task) &#123;&#125;;</span><br><span class="line">    public &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result) &#123; &#125;;</span><br><span class="line">    public &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task) &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    private &lt;T&gt; T doInvokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, boolean timed, long nanos)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        throws InterruptedException, ExecutionException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        throws InterruptedException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    public &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractExecutorService是一个抽象类，它实现了ExecutorService接口。</p><h2 id="ExecutorService接口的实现："><a href="#ExecutorService接口的实现：" class="headerlink" title="ExecutorService接口的实现："></a>ExecutorService接口的实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public interface ExecutorService extends Executor &#123;</span><br><span class="line"> </span><br><span class="line">    void shutdown();</span><br><span class="line">    boolean isShutdown();</span><br><span class="line">    boolean isTerminated();</span><br><span class="line">    boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;</span><br><span class="line">    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span><br><span class="line">    &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</span><br><span class="line">    Future&lt;?&gt; submit(Runnable task);</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        throws InterruptedException;</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                  long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException;</span><br><span class="line"> </span><br><span class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        throws InterruptedException, ExecutionException;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而ExecutorService又是继承了Executor接口</p><h2 id="Executor接口的实现："><a href="#Executor接口的实现：" class="headerlink" title="Executor接口的实现："></a>Executor接口的实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Executor &#123;</span><br><span class="line">    void execute(Runnable command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ThreadPoolExecutor、AbstractExecutorService、ExecutorService和Executor之间的关系</strong></p><p>Executor是一个顶层接口，在它里面只声明到这里，大家应该明白了ThreadPoolExecutor、AbstractExecutorService、ExecutorService和Executor几个之间的关系了。</p><ol><li>Executor是一个顶层接口，在它里面只声明了一个方法execute(Runnable)，返回值为void，参数为Runnable类型，从字面意思可以理解，就是用来执行传进去的任务的；</li><li>然后ExecutorService接口继承了Executor接口，并声明了一些方法：submit、invokeAll、invokeAny以及shutDown等；</li><li>抽象类AbstractExecutorService实现了ExecutorService接口，基本实现了ExecutorService中声明的所有方法；</li><li>然后ThreadPoolExecutor继承了类AbstractExecutorService。</li></ol><p>在ThreadPoolExecutor类中有几个非常重要的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute()</span><br><span class="line">submit()</span><br><span class="line">shutdown()</span><br><span class="line">shutdownNow()</span><br></pre></td></tr></table></figure></p><p>execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。</p><p>submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果</p><p>shutdown()和shutdownNow()是用来关闭线程池的。</p><h2 id="线程池实现原理"><a href="#线程池实现原理" class="headerlink" title="线程池实现原理"></a>线程池实现原理</h2><p><strong>1. 线程池状态</strong></p><p>在ThreadPoolExecutor中定义了一个volatile变量，另外定义了几个static final变量表示线程池的各个状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">volatile int runState;</span><br><span class="line">static final int RUNNING    = 0;</span><br><span class="line">static final int SHUTDOWN   = 1;</span><br><span class="line">static final int STOP       = 2;</span><br><span class="line">static final int TERMINATED = 3;</span><br></pre></td></tr></table></figure></p><p>runState表示当前线程池的状态，它是一个volatile变量用来保证线程之间的可见性；</p><p>下面的几个static final变量表示runState可能的几个取值。</p><p>当创建线程池后，初始时，线程池处于RUNNING状态；</p><p>如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</p><p>如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</p><p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p><p><strong>2. 任务的执行</strong></p><p>ThreadPoolExecutor类中其他的一些比较重要成员变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private final BlockingQueue&lt;Runnable&gt; workQueue;              //任务缓存队列，用来存放等待执行的任务</span><br><span class="line">private final ReentrantLock mainLock = new ReentrantLock();   //线程池的主要状态锁，对线程池状态（比如线程池大小</span><br><span class="line">                                                              //、runState等）的改变都要使用这个锁</span><br><span class="line">private final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();  //用来存放工作集</span><br><span class="line"> </span><br><span class="line">private volatile long  keepAliveTime;    //线程存货时间   </span><br><span class="line">private volatile boolean allowCoreThreadTimeOut;   //是否允许为核心线程设置存活时间</span><br><span class="line">private volatile int   corePoolSize;     //核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span><br><span class="line">private volatile int   maximumPoolSize;   //线程池最大能容忍的线程数</span><br><span class="line"> </span><br><span class="line">private volatile int   poolSize;       //线程池中当前的线程数</span><br><span class="line"> </span><br><span class="line">private volatile RejectedExecutionHandler handler; //任务拒绝策略</span><br><span class="line"> </span><br><span class="line">private volatile ThreadFactory threadFactory;   //线程工厂，用来创建线程</span><br><span class="line"> </span><br><span class="line">private int largestPoolSize;   //用来记录线程池中曾经出现过的最大线程数</span><br><span class="line"> </span><br><span class="line">private long completedTaskCount;   //用来记录已经执行完毕的任务个数</span><br></pre></td></tr></table></figure></p><p>每个变量的作用都已经标明出来了，这里要重点解释一下<strong>corePoolSize、maximumPoolSize、largestPoolSize</strong>三个变量。</p><p>corePoolSize在很多地方被翻译成核心池大小，其实我的理解这个就是线程池的大小。举个简单的例子：</p><p>假如有一个工厂，工厂里面有10个工人，每个工人同时只能做一件任务。因此只要当10个工人中有工人是空闲的，来了任务就分配给空闲的工人做；</p><p>当10个工人都有任务在做时，如果还来了任务，就把任务进行排队等待；</p><p>如果说新任务数目增长的速度远远大于工人做任务的速度，那么此时工厂主管可能会想补救措施，比如重新招4个临时工人进来；</p><p>然后就将任务也分配给这4个临时工人做；</p><p>如果说着14个工人做任务的速度还是不够，此时工厂主管可能就要考虑不再接收新的任务或者抛弃前面的一些任务了。</p><p>当这14个工人当中有人空闲时，而新任务增长的速度又比较缓慢，工厂主管可能就考虑辞掉4个临时工了，只保持原来的10个工人，毕竟请额外的工人是要花钱的。</p><p>这个例子中的corePoolSize就是10，而maximumPoolSize就是14（10+4）。</p><p>也就是说corePoolSize就是线程池大小，maximumPoolSize在我看来是线程池的一种补救措施，即任务量突然过大时的一种补救措施。</p><p>不过为了方便理解，在本文后面还是将corePoolSize翻译成核心池大小。</p><p>largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系。</p><p>下面我们进入正题，看一下任务从提交到最终执行完毕经历了哪些过程。</p><p>在ThreadPoolExecutor类中，最核心的任务提交方法是execute()方法，虽然通过submit也可以提交任务，但是实际上submit方法里面最终调用的还是execute()方法，所以我们只需要研究execute()方法的实现原理即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void execute(Runnable command) &#123;</span><br><span class="line">    if (command == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    if (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command)) &#123;</span><br><span class="line">        if (runState == RUNNING &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            if (runState != RUNNING || poolSize == 0)</span><br><span class="line">                ensureQueuedTaskHandled(command);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (!addIfUnderMaximumPoolSize(command))</span><br><span class="line">            reject(command); // is shutdown or saturated</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码可能看起来不是那么容易理解，下面我们一句一句解释：</p><p>首先，判断提交的任务command是否为null，若是null，则抛出空指针异常；</p><p>接着是这句，这句要好好理解一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command))</span><br></pre></td></tr></table></figure></p><p>由于是或条件运算符，所以先计算前半部分的值，如果线程池中当前线程数不小于核心池大小，那么就会直接进入下面的if语句块了。</p><p>如果线程池中当前线程数小于核心池大小，则接着执行后半部分，也就是执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addIfUnderCorePoolSize(command)</span><br></pre></td></tr></table></figure></p><p>如果执行完addIfUnderCorePoolSize这个方法返回false，则继续执行下面的if语句块，否则整个方法就直接执行完毕了。</p><p>如果执行完addIfUnderCorePoolSize这个方法返回false，然后接着判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (runState == RUNNING &amp;&amp; workQueue.offer(command))</span><br></pre></td></tr></table></figure></p><p>如果当前线程池处于RUNNING状态，则将任务放入任务缓存队列；如果当前线程池不处于RUNNING状态或者任务放入缓存队列失败，则执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ddIfUnderMaximumPoolSize(command)</span><br></pre></td></tr></table></figure></p><p>如果执行addIfUnderMaximumPoolSize方法失败，则执行reject()方法进行任务拒绝处理。</p><p>回到前面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (runState == RUNNING &amp;&amp; workQueue.offer(command))</span><br></pre></td></tr></table></figure></p><p>这句的执行，如果说当前线程池处于RUNNING状态且将任务放入任务缓存队列成功，则继续进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (runState != RUNNING || poolSize == 0)</span><br></pre></td></tr></table></figure></p><p> 这句判断是为了防止在将此任务添加进任务缓存队列的同时其他线程突然调用shutdown或者shutdownNow方法关闭了线程池的一种应急措施。如果是这样就执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ensureQueuedTaskHandled(command)</span><br></pre></td></tr></table></figure></p><p>进行应急处理，从名字可以看出是保证 添加到任务缓存队列中的任务得到处理。</p><p>我们接着看2个关键方法的实现：addIfUnderCorePoolSize和addIfUnderMaximumPoolSize：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private boolean addIfUnderCorePoolSize(Runnable firstTask) &#123;</span><br><span class="line">    Thread t = null;</span><br><span class="line">    final ReentrantLock mainLock = this.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (poolSize &lt; corePoolSize &amp;&amp; runState == RUNNING)</span><br><span class="line">            t = addThread(firstTask);        //创建线程去执行firstTask任务   </span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    if (t == null)</span><br><span class="line">        return false;</span><br><span class="line">    t.start();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个是addIfUnderCorePoolSize方法的具体实现，从名字可以看出它的意图就是当低于核心线程池大小时执行的方法。下面看其具体实现，首先获取到锁，因为这地方涉及到线程池状态的变化，先通过if语句判断当前线程池中的线程数目是否小于核心池大小，有朋友也许会有疑问：前面在execute()方法中不是已经判断过了吗，只有线程池当前线程数目小于核心池大小才会执行addIfUnderCorePoolSize方法的，为何这地方还要继续判断？原因很简单，前面的判断过程中并没有加锁，因此可能在execute方法判断的时候poolSize小于corePoolSize，而判断完之后，在其他线程中又向线程池提交了任务，就可能导致poolSize不小于corePoolSize了，所以需要在这个地方继续判断。然后接着判断线程池的状态是否为RUNNING，原因也很简单，因为有可能在其他线程中调用了shutdown或者shutdownNow方法。然后就是执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = addThread(firstTask);</span><br></pre></td></tr></table></figure></p><p>这个方法也非常关键，传进去的参数为提交的任务，返回值为Thread类型。然后接着在下面判断t是否为空，为空则表明创建线程失败（即poolSize&gt;=corePoolSize或者runState不等于RUNNING），否则调用t.start()方法启动线程。</p><p>我们来看一下addThread方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Thread addThread(Runnable firstTask) &#123;</span><br><span class="line">    Worker w = new Worker(firstTask);</span><br><span class="line">    Thread t = threadFactory.newThread(w);  //创建一个线程，执行任务   </span><br><span class="line">    if (t != null) &#123;</span><br><span class="line">        w.thread = t;            //将创建的线程的引用赋值为w的成员变量       </span><br><span class="line">        workers.add(w);</span><br><span class="line">        int nt = ++poolSize;     //当前线程数加1       </span><br><span class="line">        if (nt &gt; largestPoolSize)</span><br><span class="line">            largestPoolSize = nt;</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在addThread方法中，首先用提交的任务创建了一个Worker对象，然后调用线程工厂threadFactory创建了一个新的线程t，然后将线程t的引用赋值给了Worker对象的成员变量thread，接着通过workers.add(w)将Worker对象添加到工作集当中。</p><p>下面我们看一下Worker类的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">private final class Worker implements Runnable &#123;</span><br><span class="line">    private final ReentrantLock runLock = new ReentrantLock();</span><br><span class="line">    private Runnable firstTask;</span><br><span class="line">    volatile long completedTasks;</span><br><span class="line">    Thread thread;</span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        this.firstTask = firstTask;</span><br><span class="line">    &#125;</span><br><span class="line">    boolean isActive() &#123;</span><br><span class="line">        return runLock.isLocked();</span><br><span class="line">    &#125;</span><br><span class="line">    void interruptIfIdle() &#123;</span><br><span class="line">        final ReentrantLock runLock = this.runLock;</span><br><span class="line">        if (runLock.tryLock()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">        if (thread != Thread.currentThread())</span><br><span class="line">        thread.interrupt();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                runLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    void interruptNow() &#123;</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private void runTask(Runnable task) &#123;</span><br><span class="line">        final ReentrantLock runLock = this.runLock;</span><br><span class="line">        runLock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (runState &lt; STOP &amp;&amp;</span><br><span class="line">                Thread.interrupted() &amp;&amp;</span><br><span class="line">                runState &gt;= STOP)</span><br><span class="line">            boolean ran = false;</span><br><span class="line">            beforeExecute(thread, task);   //beforeExecute方法是ThreadPoolExecutor类的一个方法，没有具体实现，用户可以根据</span><br><span class="line">            //自己需要重载这个方法和后面的afterExecute方法来进行一些统计信息，比如某个任务的执行时间等           </span><br><span class="line">            try &#123;</span><br><span class="line">                task.run();</span><br><span class="line">                ran = true;</span><br><span class="line">                afterExecute(task, null);</span><br><span class="line">                ++completedTasks;</span><br><span class="line">            &#125; catch (RuntimeException ex) &#123;</span><br><span class="line">                if (!ran)</span><br><span class="line">                    afterExecute(task, ex);</span><br><span class="line">                throw ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            runLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Runnable task = firstTask;</span><br><span class="line">            firstTask = null;</span><br><span class="line">            while (task != null || (task = getTask()) != null) &#123;</span><br><span class="line">                runTask(task);</span><br><span class="line">                task = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            workerDone(this);   //当任务队列中没有任务时，进行清理工作       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它实际上实现了Runnable接口，因此上面的Thread t = threadFactory.newThread(w);效果跟下面这句的效果基本一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread t = new Thread(w);</span><br></pre></td></tr></table></figure></p><p>相当于传进去了一个Runnable任务，在线程t中执行这个Runnable。</p><p>既然Worker实现了Runnable接口，那么自然最核心的方法便是run()方法了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Runnable task = firstTask;</span><br><span class="line">        firstTask = null;</span><br><span class="line">        while (task != null || (task = getTask()) != null) &#123;</span><br><span class="line">            runTask(task);</span><br><span class="line">            task = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        workerDone(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从run方法的实现可以看出，它首先执行的是通过构造器传进来的任务firstTask，在调用runTask()执行完firstTask之后，在while循环里面不断通过getTask()去取新的任务来执行，那么去哪里取呢？自然是从任务缓存队列里面去取，getTask是ThreadPoolExecutor类中的方法，并不是Worker类中的方法，下面是getTask方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Runnable getTask() &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            int state = runState;</span><br><span class="line">            if (state &gt; SHUTDOWN)</span><br><span class="line">                return null;</span><br><span class="line">            Runnable r;</span><br><span class="line">            if (state == SHUTDOWN)  // Help drain queue</span><br><span class="line">                r = workQueue.poll();</span><br><span class="line">            else if (poolSize &gt; corePoolSize || allowCoreThreadTimeOut) //如果线程数大于核心池大小或者允许为核心池线程设置空闲时间，</span><br><span class="line">                //则通过poll取任务，若等待一定的时间取不到任务，则返回null</span><br><span class="line">                r = workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS);</span><br><span class="line">            else</span><br><span class="line">                r = workQueue.take();</span><br><span class="line">            if (r != null)</span><br><span class="line">                return r;</span><br><span class="line">            if (workerCanExit()) &#123;    //如果没取到任务，即r为null，则判断当前的worker是否可以退出</span><br><span class="line">                if (runState &gt;= SHUTDOWN) // Wake up others</span><br><span class="line">                    interruptIdleWorkers();   //中断处于空闲状态的worker</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            // Else retry</span><br><span class="line">        &#125; catch (InterruptedException ie) &#123;</span><br><span class="line">            // On interruption, re-check runState</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在getTask中，先判断当前线程池状态，如果runState大于SHUTDOWN（即为STOP或者TERMINATED），则直接返回null。</p><p>　　如果runState为SHUTDOWN或者RUNNING，则从任务缓存队列取任务。</p><p>　　如果当前线程池的线程数大于核心池大小corePoolSize或者允许为核心池中的线程设置空闲存活时间，则调用poll(time,timeUnit)来取任务，这个方法会等待一定的时间，如果取不到任务就返回null。</p><p>　　然后判断取到的任务r是否为null，为null则通过调用workerCanExit()方法来判断当前worker是否可以退出，我们看一下workerCanExit()的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private boolean workerCanExit() &#123;</span><br><span class="line">    final ReentrantLock mainLock = this.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    boolean canExit;</span><br><span class="line">    //如果runState大于等于STOP，或者任务缓存队列为空了</span><br><span class="line">    //或者  允许为核心池线程设置空闲存活时间并且线程池中的线程数目大于1</span><br><span class="line">    try &#123;</span><br><span class="line">        canExit = runState &gt;= STOP ||</span><br><span class="line">            workQueue.isEmpty() ||</span><br><span class="line">            (allowCoreThreadTimeOut &amp;&amp;</span><br><span class="line">             poolSize &gt; Math.max(1, corePoolSize));</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    return canExit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也就是说如果线程池处于STOP状态、或者任务队列已为空或者允许为核心池线程设置空闲存活时间并且线程数大于1时，允许worker退出。如果允许worker退出，则调用interruptIdleWorkers()中断处于空闲状态的worker，我们看一下interruptIdleWorkers()的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void interruptIdleWorkers() &#123;</span><br><span class="line">    final ReentrantLock mainLock = this.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        for (Worker w : workers)  //实际上调用的是worker的interruptIfIdle()方法</span><br><span class="line">            w.interruptIfIdle();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从实现可以看出，它实际上调用的是worker的interruptIfIdle()方法，在worker的interruptIfIdle()方法中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void interruptIfIdle() &#123;</span><br><span class="line">    final ReentrantLock runLock = this.runLock;</span><br><span class="line">    if (runLock.tryLock()) &#123;    //注意这里，是调用tryLock()来获取锁的，因为如果当前worker正在执行任务，锁已经被获取了，是无法获取到锁的</span><br><span class="line">                                //如果成功获取了锁，说明当前worker处于空闲状态</span><br><span class="line">        try &#123;</span><br><span class="line">    if (thread != Thread.currentThread())  </span><br><span class="line">    thread.interrupt();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            runLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有一个非常巧妙的设计方式，假如我们来设计线程池，可能会有一个任务分派线程，当发现有线程空闲时，就从任务缓存队列中取一个任务交给空闲线程执行。但是在这里，并没有采用这样的方式，因为这样会要额外地对任务分派线程进行管理，无形地会增加难度和复杂度，这里直接让执行完任务的线程去任务缓存队列里面取任务来执行。</p><p> 　　我们再看addIfUnderMaximumPoolSize方法的实现，这个方法的实现思想和addIfUnderCorePoolSize方法的实现思想非常相似，唯一的区别在于addIfUnderMaximumPoolSize方法是在线程池中的线程数达到了核心池大小并且往任务队列中添加任务失败的情况下执行的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private boolean addIfUnderMaximumPoolSize(Runnable firstTask) &#123;</span><br><span class="line">    Thread t = null;</span><br><span class="line">    final ReentrantLock mainLock = this.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (poolSize &lt; maximumPoolSize &amp;&amp; runState == RUNNING)</span><br><span class="line">            t = addThread(firstTask);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    if (t == null)</span><br><span class="line">        return false;</span><br><span class="line">    t.start();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到没有，其实它和addIfUnderCorePoolSize方法的实现基本一模一样，只是if语句判断条件中的poolSize &lt; maximumPoolSize不同而已。</p><p>　　到这里，大部分朋友应该对任务提交给线程池之后到被执行的整个过程有了一个基本的了解，下面总结一下：</p><p>　　1）首先，要清楚corePoolSize和maximumPoolSize的含义；</p><p>　　2）其次，要知道Worker是用来起到什么作用的；</p><p>　　3）要知道任务提交给线程池之后的处理策略，这里总结一下主要有4点：</p><ul><li>如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；</li><li>如果当前线程池中的线程数目&gt;=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；</li><li>如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；</li><li>如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。</li></ul><p><strong>3. 线程池中的线程初始化</strong></p><p>默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。</p><p>在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：</p><ul><li>prestartCoreThread()：初始化一个核心线程；</li><li>prestartAllCoreThreads()：初始化所有核心线程</li></ul><p>下面是这2个方法的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean prestartCoreThread() &#123;</span><br><span class="line">    return addIfUnderCorePoolSize(null); //注意传进去的参数是null</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public int prestartAllCoreThreads() &#123;</span><br><span class="line">    int n = 0;</span><br><span class="line">    while (addIfUnderCorePoolSize(null))//注意传进去的参数是null</span><br><span class="line">        ++n;</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上面传进去的参数是null，根据第2小节的分析可知如果传进去的参数为null，则最后执行线程会阻塞在getTask方法中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = workQueue.take();</span><br></pre></td></tr></table></figure></p><p>即等待任务队列中有任务。</p><p><strong>4. 任务缓存队列及排队策略</strong></p><p>在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。</p><p>　　workQueue的类型为BlockingQueue<runnable>，通常可以取下面三种类型：</runnable></p><p>　　1）ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小；</p><p>　　2）LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</p><p>　　3）synchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</p><p><strong>5. 任务拒绝策略</strong></p><p>当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span><br></pre></td></tr></table></figure></p><p><strong>6. 线程池的关闭</strong></p><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()，其中：</p><ul><li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务</li><li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务</li></ul><p><strong>7. 线程池容量的动态调整</strong></p><p>ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()，</p><ul><li>setCorePoolSize：设置核心池大小</li><li>setMaximumPoolSize：设置线程池最大能创建的线程数目大小</li></ul><p>当上述参数从小变大时，ThreadPoolExecutor进行线程赋值，还可能立即创建新的线程来执行任务。</p><h2 id="如何合理配置线程池的大小"><a href="#如何合理配置线程池的大小" class="headerlink" title="如何合理配置线程池的大小"></a>如何合理配置线程池的大小</h2><p>一般需要根据任务的类型来配置线程池大小：</p><p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1</p><p>如果是IO密集型任务，参考值可以设置为2*NCPU</p><p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p><p><a href="http://www.cnblogs.com/dolphin0520/p/3932921.html" target="_blank" rel="noopener">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java中的ThreadPoolExecutor类&quot;&gt;&lt;a href=&quot;#Java中的ThreadPoolExecutor类&quot; class=&quot;headerlink&quot; title=&quot;Java中的ThreadPoolExecutor类&quot;&gt;&lt;/a&gt;Java中的Threa
      
    
    </summary>
    
      <category term="java" scheme="http://huleski.github.com/categories/java/"/>
    
    
      <category term="java" scheme="http://huleski.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java四个线程池的实现</title>
    <link href="http://huleski.github.com/2019/03/11/java%E5%9B%9B%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%B1%A0%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://huleski.github.com/2019/03/11/java四个线程池的实现/</id>
    <published>2019-03-11T12:13:02.000Z</published>
    <updated>2019-03-18T12:00:57.271Z</updated>
    
    <content type="html"><![CDATA[<p>太久没有关注线程池, 现在复习一下</p><p>Java通过Executors提供四种线程池，分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span><br><span class="line">newFixedThreadPool 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</span><br><span class="line">newScheduledThreadPool 创建一个定长线程池，支持定时及周期性任务执行。</span><br><span class="line">newSingleThreadExecutor 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</span><br></pre></td></tr></table></figure></p><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;  </span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public class ThreadPoolExecutorTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  </span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">            final int index = i;  </span><br><span class="line">            try &#123;  </span><br><span class="line">                Thread.sleep(index * 1000);  </span><br><span class="line">            &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            cachedThreadPool.execute(new Runnable() &#123;  </span><br><span class="line">                public void run() &#123;  </span><br><span class="line">                    System.out.println(index);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程。</p><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;  </span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public class ThreadPoolExecutorTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ExecutorService fixedThreadPool  = Executors.newFixedThreadPool(3);  </span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">            fixedThreadPool.execute(new Runnable() &#123;  </span><br><span class="line">                public void run() &#123;  </span><br><span class="line">                    try &#123;  </span><br><span class="line">                        System.out.println(index);  </span><br><span class="line">                        Thread.sleep(2000);  </span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。<br>定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()</p><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><p>创建一个定长线程池，支持定时及周期性任务执行。延迟执行示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Executors;  </span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;  </span><br><span class="line">import java.util.concurrent.TimeUnit;  </span><br><span class="line"></span><br><span class="line">public class ThreadPoolExecutorTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);  </span><br><span class="line">        scheduledThreadPool.schedule(new Runnable() &#123;  </span><br><span class="line">            public void run() &#123;  </span><br><span class="line">                System.out.println(&quot;delay 3 seconds&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, 3, TimeUnit.SECONDS);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示延迟3秒执行。</p><p>定期执行示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.Executors;  </span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;  </span><br><span class="line">import java.util.concurrent.TimeUnit;  </span><br><span class="line"></span><br><span class="line">public class ThreadPoolExecutorTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);  </span><br><span class="line">        scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123;  </span><br><span class="line">            public void run() &#123;  </span><br><span class="line">                System.out.println(&quot;delay 1 seconds, and excute every 3 seconds&quot;);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, 1, 3, TimeUnit.SECONDS);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表示延迟1秒后每3秒执行一次。</p><h2 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h2><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;  </span><br><span class="line">import java.util.concurrent.Executors;  </span><br><span class="line"></span><br><span class="line">public class ThreadPoolExecutorTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">            final int index = i;  </span><br><span class="line">            singleThreadExecutor.execute(new Runnable() &#123;  </span><br><span class="line">                public void run() &#123;  </span><br><span class="line">                    try &#123;  </span><br><span class="line">                        System.out.println(index);  </span><br><span class="line">                        Thread.sleep(2000);  </span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果依次输出，相当于顺序执行各个任务。</p><p>可以使用JDK自带的监控工具来监控我们创建的线程数量，运行一个不终止的线程，创建指定量的线程，来观察：</p><p>工具目录：C:\Program Files\Java\jdk1.8.0_171\bin\jconsole.exe</p><p>运行程序做稍微修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;  </span><br><span class="line">import java.util.concurrent.Executors;  </span><br><span class="line"></span><br><span class="line">public class ThreadPoolExecutorTest &#123;  </span><br><span class="line">    public static void main(String[] args) &#123;  </span><br><span class="line">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  </span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;  </span><br><span class="line">            final int index = i;  </span><br><span class="line">            cachedThreadPool.execute(new Runnable() &#123;  </span><br><span class="line">                public void run() &#123;  </span><br><span class="line">                    try &#123;  </span><br><span class="line">                        while(true) &#123;  </span><br><span class="line">                            System.out.println(index);  </span><br><span class="line">                            Thread.sleep(10 * 1000);  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                        e.printStackTrace();  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;);  </span><br><span class="line">            try &#123;  </span><br><span class="line">                Thread.sleep(500);  </span><br><span class="line">            &#125; catch (InterruptedException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以查看线程数的变化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;太久没有关注线程池, 现在复习一下&lt;/p&gt;
&lt;p&gt;Java通过Executors提供四种线程池，分别为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="java" scheme="http://huleski.github.com/categories/java/"/>
    
    
      <category term="java" scheme="http://huleski.github.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>如何向开源项目提交无法解答的问题</title>
    <link href="http://huleski.github.com/2019/03/06/%E5%A6%82%E4%BD%95%E5%90%91%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E6%97%A0%E6%B3%95%E8%A7%A3%E7%AD%94%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://huleski.github.com/2019/03/06/如何向开源项目提交无法解答的问题/</id>
    <published>2019-03-06T11:01:24.000Z</published>
    <updated>2019-03-06T12:49:25.175Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名互联网开发者，总会使用和参与过一些开源项目。开源社区里，有些你来我往，有些则石沉大海。人们提问的方式有许多迷人和实用的共通之处。<br>有人专门把它们提炼出来，希望能帮助到那些像他们一样充满了好奇心、且愿意付诸行动去惹恼开源项目维护者的人们。</p><p>以下是『如何提出无法解答的问题』的十三个小技巧：</p><h2 id="1-惜字如金"><a href="#1-惜字如金" class="headerlink" title="1.惜字如金"></a>1.惜字如金</h2><p><strong><em>『言多必失，不如闷声发大财』</em></strong></p><p>压缩问题的字节数，不要让对方觉得你啰嗦。用最简单的字词描述你的问题，提炼关键字，简化掉冗长的过程和繁琐的细节。</p><ul><li>正确示范:</li></ul><blockquote><p>样式编译报错</p></blockquote><ul><li>错误示范：</li></ul><blockquote><p>在我的项目里引入了 xxx.css，编译时出错了，报错信息如下：<br>Module build failed: SyntaxError: Unexpected token<br>我是这么引用的：<br>import ‘xxx.css’;<br>balalalala …..</p></blockquote><h2 id="2-缓兵之计"><a href="#2-缓兵之计" class="headerlink" title="2.缓兵之计"></a>2.缓兵之计</h2><p><strong><em>『和他成为长期笔友』</em></strong></p><p>如果维护者答复你了，通常他们会索要进一步的信息。记住不要着急回复，那样显得你像个工作狂（时时刻刻泡在电脑边，可怜巴巴的等待回复）。你还有其他生活，喝杯咖啡，聊个微信，隔上十天半个月再回复。相信我，他们很快会失去耐心而关掉这个问题，或者因为一时关不了而心情郁闷。</p><ul><li><p>正确示范：</p><blockquote><p>你：使用 Button 时发现控制台报错，提示如下。<br>维护者（两天内）：我没有重现出你的例子，可以提供一份可重现的示例么？<br>维护者（三天后）：@你<br>维护者（一周后）：ping~<br>你（两周后）：哎呀抱歉，没有及时回复，我的代码在这里。</p></blockquote></li><li><p>错误示范：</p><blockquote><p>你：使用 Button 时发现控制台报错，提示如下。<br>维护者（两天内）：我没有重现出你的例子，可以提供一份可重现的示例么？<br>你（两天内）：可能我的情况有些不同，这里是重现代码。</p></blockquote></li></ul><h2 id="3-夹带私货"><a href="#3-夹带私货" class="headerlink" title="3.夹带私货"></a>3.夹带私货</h2><p><strong><em>『我哪有时间排查，这绝对是你的锅』</em></strong></p><p>在一个中型或者大型项目中引入开源模块容易遇到奇怪的问题。几十个文件上百个业务模块，项目工期又紧张，一一排查太辛苦了，还是另请高明吧，赶紧打个包发给对方。</p><ul><li><p>正确示范：</p><blockquote><p>我的数据库项目出现了一个前端组件问题，这里是我的代码，有人能帮我看看么。<br>附件：db-service-app.rar (434MB)</p></blockquote></li><li><p>错误示范：</p><blockquote><p>我的项目里出现了一个前端组件问题，我简化了一下代码，<br>发现是 xxx 组件和 yyy 组件同时使用时出现的，这里有个简单的重现例子。<br>附件：component-xxx-yyy-bug.zip (12KB)</p></blockquote></li></ul><h2 id="4-卖个关子"><a href="#4-卖个关子" class="headerlink" title="4.卖个关子"></a>4.卖个关子</h2><p><strong><em>『欲知后事如何，且听下回分解』</em></strong></p><p>总是留个后手，不要一次性把话说完，让你的问题充满神秘感，充分调动起读者的好奇心。</p><ul><li><p>正确示范：</p><blockquote><p>你：我的代码出错了，不知道该怎么办？<br>你：我这里有一个问题，有人能帮我解决么？<br>你：在吗？</p></blockquote></li><li><p>错误示范：</p><blockquote><p>你：我使用了刚刚发布的 xxx 最新版本，控制台出现如下错误…<br>我是这么调用的…<br>我的代码仓库在这里…</p></blockquote></li></ul><h2 id="5-弄乱格式"><a href="#5-弄乱格式" class="headerlink" title="5.弄乱格式"></a>5.弄乱格式</h2><p><strong><em>『怕他轻易看懂我的问题，我必须要做点什么』</em></strong></p><p>从来，永远不要格式化问题。你又不是美工，美化格式不是你的特长。你的精力要用在项目开发中，也没有时间去学习什么格式化语法。至于对方能不能看明白，你才不需要关心。</p><ul><li>正确示范：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> renderBatchButton() &#123;</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;Dropdown overlay=&#123;this.renderExportMenu(&quot;2&quot;)&#125;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">导出出库单</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">renderExportMenu(category) &#123;</span><br><span class="line"></span><br><span class="line">let exportFile=(&#123;key&#125;)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">console.log(key)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let items=[];</span><br><span class="line"></span><br><span class="line">if(this.props.global.template_list)&#123;</span><br><span class="line"></span><br><span class="line">items=this.props.global.template_list.map((item)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">if(category===item.category)&#123;</span><br><span class="line"></span><br><span class="line">return (&lt;Menu.Item key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/Menu.Item&gt;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>错误示范：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &#123; Menu, Icon &#125; from &apos;antd&apos;;</span><br><span class="line"></span><br><span class="line">class Demo extends React.Component &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    collapsed: false,</span><br><span class="line">  &#125;;</span><br><span class="line">  toggle = () =&gt; &#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      collapsed: !this.state.collapsed,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;Menu&gt;...&lt;/Menu&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-遗漏关键信息"><a href="#6-遗漏关键信息" class="headerlink" title="6.遗漏关键信息"></a>6.遗漏关键信息</h2><p><strong><em>『诶？我忘了说我没插电源了么？』</em></strong></p><p>项目代码一开始总是跑的好好的，你做了某个操作、或改动了某些代码、或者在一个特殊的环境下，问题出现了。 这个区别往往是问题的关键，把它留在心里就好，不要轻易说出来。</p><ul><li><p>正确示范：</p><blockquote><p>你：我的代码出错了。<br>维护者：我尝试了各种方式都没有重现出来，麻烦提供下重现？<br>你（很久以后）：哦！我是在 chrome 35 中出现的这个问题。</p></blockquote></li><li><p>错误示范：</p><blockquote><p>你：我的代码在 chrome 35 出错了。<br>维护者：好的，我也重现了，我看看怎么修复。</p></blockquote></li></ul><h2 id="7-提供错误的信息"><a href="#7-提供错误的信息" class="headerlink" title="7.提供错误的信息"></a>7.提供错误的信息</h2><p><strong><em>『在错误的信息上解决问题才能体现你牛逼嘛！哈哈哈』</em></strong></p><p>有时候需要做一些误导，有意或者无意，总之制造困难是你的强项。</p><ul><li><p>正确示范：</p><blockquote><p>你：我的代码出错了。<br>维护者：你使用了什么版本？<br>你：0.8.4（实际上本地是 0.8.3）<br>维护者：你确定么，0.8.4 应该已经修复过这个问题。我再看看…</p></blockquote></li><li><p>错误示范：</p><blockquote><p>你：我的代码在 0.8.3 版本里出错了。<br>维护者：0.8.4 应该已经修复过这个问题，升级到新版即可解决。</p></blockquote></li></ul><h2 id="8-尽情宣泄情绪"><a href="#8-尽情宣泄情绪" class="headerlink" title="8.尽情宣泄情绪"></a>8.尽情宣泄情绪</h2><p><strong><em>『你们把我项目搞挂了，狗屎！』</em></strong></p><p>开源项目导致了你的项目出现 BUG，导致了你周六晚上还要加班，导致了男/女友抱怨你不理他/她，这必须要有人负责。你的工作和生活被他们毁了，也别让他们好过。</p><ul><li><p>正确示范：</p><blockquote><p>这个项目烂透了，用起来全是坑，文档也太简略了，这样做开源真是呵呵了</p></blockquote></li><li><p>错误示范：</p><blockquote><p>这个项目有很多细节问题，文档也不完善，请问有改进的计划么？<br>我收集了以下具体问题，希望持续完善。</p></blockquote></li></ul><h2 id="9-构思宏伟蓝图"><a href="#9-构思宏伟蓝图" class="headerlink" title="9.构思宏伟蓝图"></a>9.构思宏伟蓝图</h2><p><strong><em>『我要造一台汽车，该怎么做？』</em></strong></p><p>尝试问一个具有宏大目标的问题，只有那些祖母般慈祥的维护者才会尝试回答你（这简直不可能发生）。而且由于你表现出了在所有技术细节上的毫无准备以及极端无知，对方的回答也没办法让你满意。</p><ul><li><p>正确示范：</p><blockquote><p>请问怎么打包发布？ </p></blockquote></li><li><p>错误示范：</p><blockquote><p>我要开发一个前端单页项目，后端是 php，架构是前后端完全分离的方式。<br>我尝试使用 xxx 进行打包构建时遇到一个问题…（省略五十字）请问这时我应该做什么？ </p></blockquote></li></ul><h2 id="10-自由发挥"><a href="#10-自由发挥" class="headerlink" title="10.自由发挥"></a>10.自由发挥</h2><p><strong><em>『八股文的时代早就过去了！』</em></strong></p><p>很多开源项目的维护者都是傲慢、迂腐、喜欢设定各种规矩的怪胎。例如他们常常会提供奇怪的问题模板，让你在一个又臭又长的表单里填空。一旦你不按他们说的来，他们就会视你为捣乱分子，把你批判一番。你哪里受得了这些拘束，想怎么写就怎么写，让他们和他们的模板都见鬼去吧！</p><ul><li><p>正确示范：</p><blockquote><p>浮层没有关闭，代码如下，求解决</p></blockquote></li><li><p>错误示范：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">xxx 组件浮层没有关闭</span><br><span class="line">- 使用版本：1.0.0</span><br><span class="line">- 浏览器：Chrome 56.0987</span><br><span class="line">- 操作系统：Windows 10</span><br><span class="line"></span><br><span class="line">## 你做了什么？</span><br><span class="line">我引入了组件 xxx，代码如下，我点击组件后打开浮层，做了如下操作。</span><br><span class="line"></span><br><span class="line">## 你期待的是什么？</span><br><span class="line">浮层应该关闭。</span><br><span class="line"></span><br><span class="line">## 实际上的情况是？</span><br><span class="line">浮层短暂关闭后又再次弹出。</span><br><span class="line">[GIF截图]</span><br><span class="line"></span><br><span class="line">## 可重现的在线演示</span><br><span class="line">http://demo.com/demo.html</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-重复提问"><a href="#11-重复提问" class="headerlink" title="11.重复提问"></a>11.重复提问</h2><p><strong><em>『重要的事要说三遍』</em></strong></p><p>在不同的地方重复你提过的问题，加深对方的印象，颠覆对方的想象！</p><ul><li><p>正确示范：</p><blockquote><p>问题一：发请求时报错：<code>405 Method not allowd</code>。<br>问题二：您好，我这里出现了 <code>405 Method not allowd</code> 的问题。<br>问题三：请求 405 错误，请问我该怎么办？<br>问题 n：…</p></blockquote></li><li><p>错误示范：</p><blockquote><p>问题一：发请求时报错：<code>405 Method not allowd</code><br>你：+1 我也出现了这个问题。</p></blockquote></li></ul><h2 id="12-出其不意"><a href="#12-出其不意" class="headerlink" title="12.出其不意"></a>12.出其不意</h2><p><strong><em>『到全世界提问，到他们想不到的地方提问』</em></strong></p><p>即使你知道有官方渠道，也推荐用其他方式向维护者提问：微博、Twitter、知乎私信、知乎评论区、Email、微信、个人博客、蚂蚁森林、朋友圈、他对 TFboys 微博的转发，今日头条娱乐版的评论区……到一切你能找到他的地方去提问。</p><ul><li><p>正确示范：</p><blockquote><p>未关注人私信：你好，我们项目用的是你们的框架，我想问下可以让 xxx 组件获取到焦点吗？<br>因为要做键盘切换</p></blockquote></li><li><p>错误示范：</p><blockquote><p>官方渠道：你好，我们项目用的是你们的框架，我想问下可以让 xxx 组件获取到焦点吗？<br>因为要做键盘切换</p></blockquote></li></ul><h2 id="13-上纲上线"><a href="#13-上纲上线" class="headerlink" title="13.上纲上线"></a>13.上纲上线</h2><p><strong><em>『接连便是难懂的话，什么”KPI”，”绩效”，”弃坑”之类，引得众人都哄笑起来』</em></strong></p><p>把你的问题拔高一个层次，站在道德高地进行指责，一旦讨论涉及到政治，他们便百口莫辩。</p><ul><li><p>正确示范：</p><blockquote><p>原来大公司团队也就这样啊，都不好好测试的么？就这玩意还好意思拿出来，<br>就是个 KPI 产物，晋升完就不管了。</p></blockquote></li><li><p>错误示范：</p><blockquote><p>这个项目虽然是大公司的产品，在以下方面比起竞品还有劣势，个人不建议使用。</p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，开源项目的维护者在尝试解答和解决问题时，总是希望能亲眼看到问题发生，不要让他们得逞。另外，他们大多对未关闭的问题有强迫症，尽量多制造一些这样的问题。</p><p><a href="https://zhuanlan.zhihu.com/p/25795393" target="_blank" rel="noopener">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名互联网开发者，总会使用和参与过一些开源项目。开源社区里，有些你来我往，有些则石沉大海。人们提问的方式有许多迷人和实用的共通之处。&lt;br&gt;有人专门把它们提炼出来，希望能帮助到那些像他们一样充满了好奇心、且愿意付诸行动去惹恼开源项目维护者的人们。&lt;/p&gt;
&lt;p&gt;以下是『
      
    
    </summary>
    
      <category term="开源" scheme="http://huleski.github.com/categories/%E5%BC%80%E6%BA%90/"/>
    
    
      <category term="提问" scheme="http://huleski.github.com/tags/%E6%8F%90%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>win10-你需要提供管理员权限才能删除此文件</title>
    <link href="http://huleski.github.com/2019/03/02/win10-%E4%BD%A0%E9%9C%80%E8%A6%81%E6%8F%90%E4%BE%9B%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E6%89%8D%E8%83%BD%E5%88%A0%E9%99%A4%E6%AD%A4%E6%96%87%E4%BB%B6/"/>
    <id>http://huleski.github.com/2019/03/02/win10-你需要提供管理员权限才能删除此文件/</id>
    <published>2019-03-02T13:11:33.000Z</published>
    <updated>2019-03-04T06:34:22.090Z</updated>
    
    <content type="html"><![CDATA[<p>新买的电脑配置环境, 在系统盘新建/修改/删除文件的时候会弹框提示: <code>你需要提供管理员权限才能新建/修改/删除此文件</code></p><p>去网上搜索解决方法, 清一色的复制粘贴: 去修改文件夹权限!</p><p>这个智障答案是最多的, 难道我每操作一个文件就去修改一次文件夹权限?甚至还有用命令行操作、添加脚本的, 我的妈啊, 就一个权限问题还得把操作系统学一遍不成?</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li>按<code>WIN+R</code>，打开运行对话框</li><li>输入<code>gpedit.msc</code>，打开组策略</li><li>一步步地选择: <code>计算机配置-&gt;Windows 设置-&gt;安全设置-&gt;本地策略-&gt;安全选项</code></li><li>找到右侧的<code>用户账户控制：以管理员批准模式运行所有管理员</code>这个项，默认设置是启用的，把它设成禁用。</li><li>重启电脑</li></ol><p>完成! 试试新建/修改/删除文件看是否还会出现权限提示</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新买的电脑配置环境, 在系统盘新建/修改/删除文件的时候会弹框提示: &lt;code&gt;你需要提供管理员权限才能新建/修改/删除此文件&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;去网上搜索解决方法, 清一色的复制粘贴: 去修改文件夹权限!&lt;/p&gt;
&lt;p&gt;这个智障答案是最多的, 难道我每操作一个
      
    
    </summary>
    
      <category term="win10" scheme="http://huleski.github.com/categories/win10/"/>
    
    
      <category term="win10" scheme="http://huleski.github.com/tags/win10/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令</title>
    <link href="http://huleski.github.com/2019/02/27/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://huleski.github.com/2019/02/27/linux常用命令/</id>
    <published>2019-02-27T07:44:18.000Z</published>
    <updated>2019-03-18T12:00:48.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h2><table><thead><tr><th>日志文件</th><th>说明</th></tr></thead><tbody><tr><td>/var/log/message</td><td>系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一</td></tr><tr><td>/var/log/secure</td><td>与安全相关的日志信息</td></tr><tr><td>/var/log/maillog</td><td>与邮件相关的日志信息</td></tr><tr><td>/var/log/cron</td><td>与定时任务相关的日志信息</td></tr><tr><td>/var/log/spooler</td><td>与UUCP和news设备相关的日志信息</td></tr><tr><td>/var/log/boot.log</td><td>守护进程启动和停止相关的日志消息</td></tr></tbody></table><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>uname -a</td><td>查看内核/操作系统/CPU信息</td></tr><tr><td>cat /etc/issue</td><td>登陆信息显示数据</td></tr><tr><td>cat /etc/redhat-release</td><td>查看操作系统版本</td></tr><tr><td>cat /proc/cpuinfo</td><td>查看CPU信息</td></tr><tr><td>hostname</td><td>查看计算机名</td></tr><tr><td>lspci -tv</td><td>列出所有PCI设备</td></tr><tr><td>lsusb -tv</td><td>列出所有USB设备</td></tr><tr><td>lsmod</td><td>列出加载的内核模块</td></tr><tr><td>env</td><td>查看环境变量</td></tr></tbody></table><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>free -m</td><td>查看内存使用量和交换区使用量</td></tr><tr><td>df -h</td><td>查看各分区使用情况</td></tr><tr><td>du -sh &lt;目录名&gt;</td><td>查看指定目录的大小</td></tr><tr><td>grep MemTotal /proc/meminfo</td><td>查看内存总量</td></tr><tr><td>grep MemFree /proc/meminfo</td><td>查看空闲内存量</td></tr><tr><td>uptime</td><td>查看系统运行时间、用户数、负载</td></tr><tr><td>cat /proc/loadavg</td><td>查看系统负载</td></tr></tbody></table><h2 id="磁盘和分区"><a href="#磁盘和分区" class="headerlink" title="磁盘和分区"></a>磁盘和分区</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>fdisk -l</td><td># 查看所有分区     </td></tr><tr><td>swapon -s</td><td># 查看所有交换分区     </td></tr><tr><td>fdisk /dev/vdb</td><td># 对磁盘/dev/edb进行分区</td></tr><tr><td>mount /dev/vdb1 /data</td><td># 将磁盘分区/dev/vdb1挂载到/data下</td></tr><tr><td>echo /dev/vdb1 /data ext4 defaults 0 0 &gt;&gt; /etc/fstab</td><td>启动时自动挂载分区</td></tr></tbody></table><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ifconfig</td><td>查看所有网络接口的属性</td></tr><tr><td>iptables -L</td><td>查看防火墙设置</td></tr><tr><td>route -n</td><td>查看路由表</td></tr><tr><td>netstat -lntp</td><td>查看所有监听端口</td></tr><tr><td>netstat -antp</td><td>查看所有已经建立的连接</td></tr><tr><td>netstat -s</td><td>查看网络统计信息</td></tr></tbody></table><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ps -ef</td><td>查看所有进程</td></tr><tr><td>top</td><td>实时显示进程状态</td></tr></tbody></table><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>查看活动用户</td></tr><tr><td>id &lt;用户名&gt;</td><td>查看指定用户信息</td></tr><tr><td>last</td><td>查看用户登录日志</td></tr><tr><td>cut -d: -f1 /etc/passwd</td><td>查看系统所有用户</td></tr><tr><td>cut -d: -f1 /etc/group</td><td>查看系统所有组</td></tr><tr><td>crontab -l</td><td>查看当前用户的计划任务</td></tr><tr><td>useradd -s /sbin/nologin -M nginx</td><td>添加用户</td></tr></tbody></table><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>chkconfig –list</td><td>列出所有系统服务</td></tr></tbody></table><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>rpm -qa</td><td>查看所有安装的软件包</td></tr><tr><td>yum install &lt;程序名&gt;</td><td>yum安装</td></tr><tr><td>yum search &lt;程序名&gt;</td><td>yum搜索安装包</td></tr><tr><td>yum list</td><td>搜索yum已安装程序</td></tr><tr><td>tar -xcvf &lt;包名&gt; &lt;文件&gt;</td><td>打包压缩文件</td></tr><tr><td>tar -xzvf &lt;包名&gt;</td><td>解压缩</td></tr><tr><td>find / -name nginx.conf</td><td>在根目录下查找文件nginx.conf</td></tr><tr><td>grep ‘test’ d*　　</td><td>显示所有以d开头的文件中包含<code>test</code>的行</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日志文件&quot;&gt;&lt;a href=&quot;#日志文件&quot; class=&quot;headerlink&quot; title=&quot;日志文件&quot;&gt;&lt;/a&gt;日志文件&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;日志文件&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tb
      
    
    </summary>
    
      <category term="linux" scheme="http://huleski.github.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://huleski.github.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装maven</title>
    <link href="http://huleski.github.com/2019/02/26/CentOS7%E5%AE%89%E8%A3%85maven/"/>
    <id>http://huleski.github.com/2019/02/26/CentOS7安装maven/</id>
    <published>2019-02-26T07:03:32.000Z</published>
    <updated>2019-02-26T08:00:45.831Z</updated>
    
    <content type="html"><![CDATA[<p>下载maven-3.5.4, 可以在<a href="http://mirror.bit.edu.cn/apache/maven/maven-3/" target="_blank" rel="noopener">官网</a>中选择不同版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure></p><p>配置环境变量, 编辑文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>加入以下内容 ( 根据自己maven实际解压路径配置 )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAVEN_HOME=/home/software/maven-3.5.4</span><br><span class="line">PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">export MAVEN_HOME</span><br></pre></td></tr></table></figure></p><p>使配置生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>测试是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载maven-3.5.4, 可以在&lt;a href=&quot;http://mirror.bit.edu.cn/apache/maven/maven-3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;中选择不同版本&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="maven" scheme="http://huleski.github.com/categories/maven/"/>
    
    
      <category term="CentOS7" scheme="http://huleski.github.com/tags/CentOS7/"/>
    
      <category term="maven" scheme="http://huleski.github.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>使用GitLab-Runner搭建GitLab持续集成/部署环境</title>
    <link href="http://huleski.github.com/2019/02/26/%E4%BD%BF%E7%94%A8GitLab-Runner%E6%90%AD%E5%BB%BAGitLab%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90-%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83/"/>
    <id>http://huleski.github.com/2019/02/26/使用GitLab-Runner搭建GitLab持续集成-部署环境/</id>
    <published>2019-02-26T03:22:47.000Z</published>
    <updated>2019-02-26T07:54:34.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><ol><li><p>GitLab</p><blockquote><p>是一套基于Ruby开发的开源Git项目管理应用，其提供的功能和Github类似，不同的是GitLab提供一个GitLab CE社区版本，用户可以将其部署在自己的服务器上，这样就可以用于团队内部的项目代码托管仓库。</p></blockquote></li><li><p>GitLab CI</p><blockquote><p>是GitLab 提供的持续集成服务(从8.0版本之后，GitLab CI已经集成在GitLab中了)，只要在你的仓库根目录下创建一个.gitlab-ci.yml 文件， 并为该项目指派一个Runner，当有合并请求或者Push操作时，你写在.gitlab-ci.yml中的构建脚本就会开始执行。</p></blockquote></li><li><p>GitLab Runner</p><blockquote><p>是配合GitLab CI进行构建任务的应用程序，GitLab CI负责yml文件中各种阶段流程的执行，而GitLab Runner就是具体的负责执行每个阶段的脚本执行，一般来说GitLab Runner需要安装在单独的机器上通过其提供的注册操作跟GitLab CI进行绑定，当然，你也可以让其和GitLab安装在一起，只是有的情况下，你代码的构建过程对资源消耗十分严重的时候，会拖累GitLab给其他用户提供政策的Git服务。</p></blockquote></li><li><p>持续集成/部署环境</p><blockquote><p>持续集成是程序开发人员在频繁的提交代码之后，能有相应的环境能对其提交的代码自动执行构建(Build)、测试(Test),然后根据测试结果判断新提交的代码能否合并加入主分支当中,而持续部署也就是在持续集成之后自动将代码部署(Deploy)到生成环境上</p></blockquote></li></ol><p>开启GitLab可持续集成功能, 你需要通过如下两步启用GitLab CI功能</p><ol><li>为你的项目配置一个GitLab Runner</li><li>新建一个.gitlab-ci.yml文件在你项目的根目录</li></ol><h2 id="创建GitLab-Runner以及配置"><a href="#创建GitLab-Runner以及配置" class="headerlink" title="创建GitLab Runner以及配置"></a>创建GitLab Runner以及配置</h2><p>拉取官方镜像, alpine版镜像体积比较小, 也可以使用latest版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-runner:alpine</span><br></pre></td></tr></table></figure></p><p>启动gitlab-runner容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  gitlab/gitlab-runner:alpine</span><br></pre></td></tr></table></figure></p><p>执行下面命令注册一个runner :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab-runner gitlab-ci-multi-runner register</span><br></pre></td></tr></table></figure></p><p>接下来出现以下内容, 根据提示输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Please enter the gitlab-ci coordinator URL:</span><br><span class="line"># 示例：http://10.12.2.22</span><br><span class="line">Please enter the gitlab-ci token for this runner:</span><br><span class="line"># xxxxxx</span><br><span class="line">Please enter the gitlab-ci description for this runner:</span><br><span class="line"># 示例：test</span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line"># 示例：test</span><br><span class="line">Please enter the executor: docker, parallels, shell, kubernetes, docker-ssh, ssh, virtualbox, docker+machine, docker-ssh+machine:</span><br><span class="line"># ssh</span><br><span class="line">Please enter the SSH server address (e.g. my.server.com):</span><br><span class="line"># 10.12.2.22</span><br><span class="line">Please enter the SSH server port (e.g. 22):</span><br><span class="line"># 22  </span><br><span class="line">Please enter the SSH user (e.g. root):</span><br><span class="line"># root</span><br><span class="line">Please enter the SSH password (e.g. docker.io):</span><br><span class="line"># 123456</span><br><span class="line">Please enter path to SSH identity file (e.g. /home/user/.ssh/id_rsa):</span><br><span class="line"></span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure></p><p>说明： </p><ol><li>gitlab ci 的地址以及token，从你要配置该runner到哪个项目，就去gitlab下该项目首页右侧设置—》CI/CD Pipelines—》Specific Runners下可以找到。 </li><li>gitlab-ci tags这个很重要，在项目构建流程yaml文件里面指定tag，就是匹配使用哪个tag的runner，这里我定义了test，回头再配置文件里面就指定这个tag。 </li><li>executor：执行者可以有很多种，这里我们使用ssh, 登录进入后再构建。 </li></ol><p>如果想修改注册信息, 可以编辑文件 <code>vim /srv/gitlab-runner/config/config.toml</code>, 内容如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">concurrent = 1</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[session_server]</span><br><span class="line">  session_timeout = 1800</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = &quot;wta-admin&quot;</span><br><span class="line">  url = &quot;http://10.12.2.22/&quot;</span><br><span class="line">  token = &quot;JKLASJDFIAOSKJ&quot;</span><br><span class="line">  executor = &quot;ssh&quot;</span><br><span class="line">  [runners.ssh]</span><br><span class="line">    user = &quot;root&quot;</span><br><span class="line">    password = &quot;123456&quot;</span><br><span class="line">    host = &quot;10.12.2.22&quot;</span><br><span class="line">    port = &quot;22&quot;</span><br><span class="line">  [runners.cache]</span><br><span class="line">    [runners.cache.s3]</span><br><span class="line">    [runners.cache.gcs]</span><br></pre></td></tr></table></figure></p><p>修改完记得重启docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart gitlab-runner</span><br></pre></td></tr></table></figure></p><p>gitlab-runner已经配置完成。</p><h2 id="在gitlab项目的根目录新建-gitlab-ci-yml文件"><a href="#在gitlab项目的根目录新建-gitlab-ci-yml文件" class="headerlink" title="在gitlab项目的根目录新建.gitlab-ci.yml文件"></a>在gitlab项目的根目录新建.gitlab-ci.yml文件</h2><p>gitlab-ci.yml文件是用来配置GitLab CI进行构建流程的配置文件，其采用YAML语法,所以你需要额外注意要用空格来代替缩进，而不是Tabs。<br>.gitlab-ci.yml文件如下。查看<a href="https://segmentfault.com/a/1190000011890710" target="_blank" rel="noopener">详细配置</a>或<a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">官方配置</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 利用caches字段来指定下面将要进行的job任务中需要共享的文件目录,如果没有，</span><br><span class="line"># 每个Job开始的时候，GitLab Runner都会删掉.gitignore里面的文件</span><br><span class="line">cache:</span><br><span class="line">  key: $&#123;CI_BUILD_REF_NAME&#125;</span><br><span class="line">  paths:</span><br><span class="line">    - target</span><br><span class="line"></span><br><span class="line"># 利用stages关键字来定义持续构建过程中的三个阶段: package、build_docker、deploy_docker</span><br><span class="line"># 1. 所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始</span><br><span class="line"># 2. 只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</span><br><span class="line"># 3. 如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</span><br><span class="line">stages:</span><br><span class="line">  - package</span><br><span class="line">  - build_docker</span><br><span class="line">  - deploy_docker</span><br><span class="line"></span><br><span class="line">############################### maven打包 ###############################</span><br><span class="line"># 定义一个叫package的Job任务, package为job名, 可随意命名。下同</span><br><span class="line"># stage字段声明属于package阶段，这个job会第一个执行，执行一些环境的初始化工作。</span><br><span class="line"># script字段指定该任务执行的内容, 由于是CentOS, 此处执行shell语句。下同</span><br><span class="line">package:</span><br><span class="line">  stage: package</span><br><span class="line">  tags:                       #这里的tags一定要属于注册时填的tags中，下面同理</span><br><span class="line">    - test</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;begining to execute package project&quot;</span><br><span class="line">    - docker stop test &amp;&amp; docker rm test &amp;&amp; docker rmi test:1.0</span><br><span class="line">    - mvn clean install -Dmaven.test.skip=true</span><br><span class="line">    - cp -f target/*.jar /data/</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - target/*.jar    # 将maven构建成功的jar包作为构建产出导出，可在下一个stage的任务中使用 目前没卵用</span><br><span class="line"></span><br><span class="line">############################### 构建镜像 ############################### </span><br><span class="line">build_docker:</span><br><span class="line">  stage: build_docker</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;begining to execute build project&quot;</span><br><span class="line">    - docker build -t test:1.0 /data/</span><br><span class="line">  tags:</span><br><span class="line">    - test</span><br><span class="line"></span><br><span class="line">############################### 部署运行 ############################### </span><br><span class="line"># only字段指定需要执行的所在分支或者标签</span><br><span class="line">deploy_docker:</span><br><span class="line">  stage: deploy_docker</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;begining to execute deploy project&quot;</span><br><span class="line">    - docker run -d -p 80:80 --restart always --name=test test:1.0</span><br><span class="line">    - echo &quot;dev部署成功, 嘻嘻嘻......&quot;</span><br><span class="line">  only:</span><br><span class="line">    - dev</span><br><span class="line">  tags:</span><br><span class="line">    - test</span><br><span class="line"></span><br><span class="line">deploy_docker:</span><br><span class="line">  stage: deploy_docker</span><br><span class="line">  script:</span><br><span class="line">    - echo &quot;begining to execute deploy project&quot;</span><br><span class="line">    - docker run -d -p 8080:80 --restart always --name=test test:1.0</span><br><span class="line">    - echo &quot;master部署成功, 嘻嘻嘻......&quot;</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line">  tags:</span><br><span class="line">    - test</span><br></pre></td></tr></table></figure><p>创建完成后push到gitlab, 此时打开项目首页的Piplines标签页，会发现一个状态标识为pending的构建任务, gitlab-CI搭建完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;相关背景&quot;&gt;&lt;a href=&quot;#相关背景&quot; class=&quot;headerlink&quot; title=&quot;相关背景&quot;&gt;&lt;/a&gt;相关背景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;GitLab&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;是一套基于Ruby开发的开源Git项目管理应用，其提
      
    
    </summary>
    
      <category term="GitLab" scheme="http://huleski.github.com/categories/GitLab/"/>
    
    
      <category term="GitLab-CI" scheme="http://huleski.github.com/tags/GitLab-CI/"/>
    
      <category term="GitLab" scheme="http://huleski.github.com/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装Nginx及配置详解</title>
    <link href="http://huleski.github.com/2019/02/25/centos7%E5%AE%89%E8%A3%85Nginx%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://huleski.github.com/2019/02/25/centos7安装Nginx及配置详解/</id>
    <published>2019-02-25T06:41:56.000Z</published>
    <updated>2019-03-01T11:37:11.309Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一款轻量级的网页服务器、反向代理服务器。相较于Apache、lighttpd具有占有内存少，稳定性高等优势。<strong>它主要的用途是提供反向代理服务</strong>。</p><h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><ol><li>gcc 安装</li></ol><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure></p><ol start="2"><li>PCRE pcre-devel 安装</li></ol><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure></p><ol start="3"><li>zlib 安装</li></ol><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></p><ol start="4"><li>OpenSSL 安装</li></ol><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><ul><li>直接下载.tar.gz安装包，地址：<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a></li><li><p>使用wget命令下载（推荐）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c https://nginx.org/download/nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.14.2.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>执行以下命令配置安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.14.2         # 进入Nginx目录</span><br><span class="line">./configure             # 使用默认配置</span><br><span class="line">make &amp;&amp; make install    # 编辑安装</span><br></pre></td></tr></table></figure></li><li><p>Nginx默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class="line">nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">nginx modules path: &quot;/usr/local/nginx/modules&quot;</span><br><span class="line">nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class="line">nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class="line">nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class="line">nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class="line">nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class="line">nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class="line">nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class="line">nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure></li><li><p>查找安装路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure></li></ul><p>安装完成, 以下是Nginx常用命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx –t                          # 测试配置文件是否正常</span><br><span class="line">/usr/local/nginx/sbin/nginx                             # 启动Nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop                     # 停止Nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload                   # 重新加载配置文件</span><br></pre></td></tr></table></figure></p><ul><li>开机自启动</li></ul><p>编辑文件 rc.local<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure></p><p>在最下面增加一行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p><p>设置执行权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /etc/rc.local</span><br></pre></td></tr></table></figure></p><p>Nginx安装完毕, 打开浏览器访问 <code>http://localhost</code>查看是否安装成功</p><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>Nginx配置文件nginx.conf大致分为以下几块:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">events   &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line">http        &#123;</span><br><span class="line">  ....</span><br><span class="line">  upstream myproject &#123;</span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line">  server  &#123;</span><br><span class="line">    ....</span><br><span class="line">    location &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  server  &#123;</span><br><span class="line">    ....</span><br><span class="line">    location &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>nginx配置文件主要分为六个区域：<br><code>main(全局设置)、events(nginx工作模式)、http(http设置)、</code></p><p><code>sever(主机设置)、location(URL匹配)、upstream(负载均衡服务器设置)。</code></p><ul><li><p>main模块</p><p>main模块是一个全局的设置：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user nobody nobody;</span><br><span class="line">worker_processes 2;</span><br><span class="line">error_log  /usr/local/var/log/nginx/error.log  notice;</span><br><span class="line">pid        /usr/local/var/run/nginx/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 1024;</span><br></pre></td></tr></table></figure><p><code>user</code> 指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p><p><code>worker_processes</code> 指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。根据经验，一般指定1个进程就足够了，如果是多核CPU，建议指定和CPU的数量一样的进程数即可。我这里写2，那么就会开启2个子进程，总共3个进程。</p><p><code>error_log</code> 用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</p><p><code>pid</code> 用来指定进程id的存储文件位置。</p><p><code>worker_rlimit_nofile</code> 用于指定一个nginx进程可以打开的最多文件描述符数目，这里是65535，需要使用命令“ulimit -n 65535”来设置。</p><ul><li>events 模块</li></ul><p>events模块来用指定nginx的工作模式和连接数上限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    use epoll; #linux平台</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>use</code> 用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在Mac中。</p><p><code>worker_connections</code> 用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由<code>worker_processes</code>和<code>worker_connections</code>决定，即<code>Max_clients=worker_processes*worker_connections</code>，在作为反向代理时，Max_clients变为：<code>Max_clients = worker_processes * worker_connections/4 (注: 可能有出入)</code> 。<br>进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令“ulimit -n 65536”后worker_connections的设置才能生效。</p><ul><li>http 模块<br>http模块是最核心的模块了，它负责HTTP服务器相关属性的配置，它里面的server和upstream子模块至关重要，等到反向代理和负载均衡以及虚拟目录等会仔细说。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    include mime.types;     #文件扩展名与文件类型映射表</span><br><span class="line"></span><br><span class="line">    default_type application/octet-stream;      #默认文件类型</span><br><span class="line"></span><br><span class="line">    charset utf-8;         #默认编码</span><br><span class="line"></span><br><span class="line">    #设置日志的格式</span><br><span class="line">    log_format  main    &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                        &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #第一个参数：$binary_remote_addr 表示通过remote_addr这个标识来做限制，“binary_”的目的是缩写内存占用量，是限制同一客户端ip地址</span><br><span class="line">    #第二个参数：zone=one:10m表示生成一个大小为10M，名字为one的内存区域，用来存储访问的频次信息</span><br><span class="line">    #第三个参数：rate=1r/s表示允许相同标识的客户端的访问频次，这里限制的是每秒1次，还可以有比如30r/m的</span><br><span class="line">    limit_zone crawler $binary_remote_addr 10m;](limit_req_zone binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class="line"></span><br><span class="line">    # 第一个参数：zone=one 设置使用哪个配置区域来做限制，与上面limit_req_zone 里的name对应</span><br><span class="line">    # 第二个参数：burst=5，这个配置的意思是设置一个大小为5的缓冲区当有大量请求过来时，超过了访问频次限制的请求可以先放到这个缓冲区内</span><br><span class="line">    # 第三个参数：nodelay，如果设置，超过访问频次而且缓冲区也满了的时候就会直接返回503，如果没有设置，则所有请求会等待排队</span><br><span class="line">    server &#123;</span><br><span class="line">        location /search/ &#123;</span><br><span class="line">            limit_req zone=one burst=5 nodelay;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>include</code> 用来设定文件的mime类型, 类型在配置文件目录下的mime.type文件定义，来告诉nginx识别文件类型。</p><p><code>default_type</code> 设定了默认的类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置asp 的locate 环境时，Nginx是不予解析的，此时，用浏览器访问asp文件就会出现下载了。</p><p><code>log_format</code> 用于设置日志的格式，和记录哪些参数，这里设置为main，刚好用于access_log来记录这种类型。</p><p>main的类型日志如下：也可以增删部分参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 - - [21/Apr/2015:18:09:54 +0800] &quot;GET /index.php HTTP/1.1&quot; 200 87151 &quot;-&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.76 Safari/537.36&quot;</span><br></pre></td></tr></table></figure></p><p><code>access_log</code> 用来纪录每次的访问日志的文件地址，后面的main是日志的格式样式，对应于log_format的main。</p><p><code>sendfile</code> 参数用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个指令设置为on用于防止网络阻塞。</p><p><code>keepalive_timeout</code> 设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</p><p>其他参数后面介绍</p><ul><li>server 模块</li></ul><p>sever 模块是http的子模块，它用来定一个虚拟主机，基本的配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听端口</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    #域名可以有多个，用空格隔开</span><br><span class="line">    server_name www.w3cschool.cn w3cschool.cn;</span><br><span class="line">    index index.html index.htm index.php;</span><br><span class="line">    root /data/www/w3cschool;</span><br><span class="line"></span><br><span class="line">    #对******进行负载均衡</span><br><span class="line">    location ~ .*.(php|php5)?$ &#123;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi.conf;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    #图片缓存时间设置</span><br><span class="line">    location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">        expires 10d;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    #JS和CSS缓存时间设置</span><br><span class="line">    location ~ .*.(js|css)?$ &#123;</span><br><span class="line">        expires 1h;</span><br><span class="line">    &#125;</span><br><span class="line">    #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>server</code> 标志定义虚拟主机开始。 </p><p><code>listen</code> 用于指定虚拟主机的服务端口。 </p><p><code>server_name</code> 用来指定IP地址或者域名，多个域名之间用空格分开。 </p><p><code>root</code> 表示在这整个server虚拟主机内，全部的root web根目录。注意要和locate {}下面定义的区分开来。 </p><p><code>index</code> 全局定义访问的默认首页地址。注意要和locate {}下面定义的区分开来。 </p><p><code>access_log</code> 用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p><ul><li>location 模块</li></ul><p>location 用来定位/解析URL，所以，它也提供了强大的正则匹配功能，也支持条件判断匹配，用户可以通过location指令实现Nginx对动、静态网页进行过滤处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#对 &quot;/&quot; 启用反向代理</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:88;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        </span><br><span class="line">    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        </span><br><span class="line">    #以下是一些反向代理的配置，可选。</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">    #允许客户端请求的最大单文件字节数</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">    #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">    #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">    #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">    client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">    #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">    proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">    #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">    #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">    proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">    #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">    #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">    proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">    #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">    #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">    proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">    #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">    #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">    proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">    #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">    proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">    #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">    proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">    #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">    proxy_temp_file_write_size 64k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#本地动静分离反向代理配置</span><br><span class="line">#所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">#所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">pdf|xls|mp3|wma)$ &#123;</span><br><span class="line">    expires 15d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>location ~</code> 开启正则匹配。</p><p>后面详细介绍location的匹配规则</p><ul><li>upstream 模块</li></ul><p>upstream 模块用来作负载均衡<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upstream backend&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 192.168.12.1:80;</span><br><span class="line">    server 192.168.12.2:80 down;</span><br><span class="line">    server 192.168.12.3:8080  max_fails=3  fail_timeout=20s;</span><br><span class="line">    server 192.168.12.4:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>upstream</code> 指令指定了一个负载均衡器的名称backend。这个名称可以任意指定，在后面需要的地方直接调用即可。</p><p><code>ip_hash</code> 是其中的一种负载均衡调度算法。紧接着就是各种服务器了。用server关键字表识，后面接ip。</p><p><strong>Nginx的负载均衡模块目前支持以下几种调度算法</strong>:</p><ol><li><code>weight</code> 轮询（默认）。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响。weight。指定轮询权值，weight值越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。</li><li><code>ip_hash</code>。每个请求按访问IP的hash结果分配，这样来自同一个IP的访客固定访问一个后端服务器，有效解决了动态网页存在的session共享问题。</li><li><code>fair</code>。依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx本身是不支持fair的，如果需要使用这种调度算法，必须下载Nginx的upstream_fair模块。</li><li><code>url_hash</code>。按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx本身是不支持url_hash的，如果需要使用这种调度算法，必须安装Nginx 的hash软件包。</li><li><code>least_conn</code> 下一个请求将被分派到活动连接数量最少的服务器</li></ol><p>在HTTP Upstream模块中，可以通过server指令指定后端服务器的IP地址和端口，同时还可以设定每个后端服务器在负载均衡调度中的状态。常用的状态有：</p><p><code>down</code>，表示当前的server暂时不参与负载均衡。</p><p><code>backup</code>，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</p><p><code>max_fails</code>，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p><p><code>fail_timeout</code>，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</p><p><strong>注意</strong> 当负载调度算法为ip_hash时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p><h2 id="location匹配规则"><a href="#location匹配规则" class="headerlink" title="location匹配规则"></a>location匹配规则</h2><p>语法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location [=|~|~*|^~] /uri/ &#123;...&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>表示精确匹配</td></tr><tr><td>^~</td><td>表示 URI 以某个常规字符串开头。Nginx 不对 URL 做编码，因此请求为 /static/20%/aa，可以被 ^~ /static/ /aa 匹配到</td></tr><tr><td>~</td><td>表示区分大小写的正则匹配</td></tr><tr><td>~*</td><td>表示不区分大小写的正则匹配</td></tr><tr><td>/</td><td>通用匹配，任何请求都会匹配</td></tr></tbody></table><p>多个 location 配置的情况下匹配顺序为：</p><ul><li>首先匹配 =</li><li>其次匹配 ^~</li><li>其次是按文件中顺序的正则匹配</li><li>最后是交给 /</li><li>当有匹配成功时候，停止匹配，按当前匹配规则处理请求</li></ul><p>若规则如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    #规则A</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /login &#123;</span><br><span class="line">    #规则B</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">    #规则C</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line">    #规则D</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.png$ &#123;</span><br><span class="line">    #规则E</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    #规则F</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>访问根目录 /， 比如 <a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a> 将匹配规则 A</li><li>访问 <a href="http://localhost/login" target="_blank" rel="noopener">http://localhost/login</a> 将匹配规则 B，<a href="http://localhost/register" target="_blank" rel="noopener">http://localhost/register</a> 则匹配规则 F</li><li>访问 <a href="http://localhost/static/a.html" target="_blank" rel="noopener">http://localhost/static/a.html</a> 将匹配规则 C</li><li>访问 <a href="http://localhost/a.png" target="_blank" rel="noopener">http://localhost/a.png</a> 符合规则 D 和规则 E，但是只匹配较前的D，</li><li>访问 <a href="http://localhost/static/c.png" target="_blank" rel="noopener">http://localhost/static/c.png</a> 则优先匹配到规则 C</li><li>访问 <a href="http://localhost/a.PNG" target="_blank" rel="noopener">http://localhost/a.PNG</a> 则匹配规则 E，而不会匹配规则 D，因为规则 E 不区分大小写。</li><li>访问 <a href="http://localhost/category/id/1111" target="_blank" rel="noopener">http://localhost/category/id/1111</a> 则最终匹配到规则 F，这个时候 nginx 可以作为反向代理服务器。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Nginx是一款轻量级的网页服务器、反向代理服务器。相较于Apache、lighttpd具有占有内存少，稳定性高等优势。&lt;strong&gt;它主要的用途是提供反向代理服务&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;安装所需环境&quot;&gt;&lt;a href=&quot;#安装所需环境&quot; class
      
    
    </summary>
    
      <category term="Nginx" scheme="http://huleski.github.com/categories/Nginx/"/>
    
    
      <category term="centos7" scheme="http://huleski.github.com/tags/centos7/"/>
    
      <category term="Nginx" scheme="http://huleski.github.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装redis及开机自启动</title>
    <link href="http://huleski.github.com/2019/02/25/centos7%E5%AE%89%E8%A3%85redis%E5%8F%8A%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"/>
    <id>http://huleski.github.com/2019/02/25/centos7安装redis及开机自启动/</id>
    <published>2019-02-25T02:29:06.000Z</published>
    <updated>2019-03-04T08:22:46.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先确认是否具有root权限，因为vim、设定redis开机启动需要root权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure></p><p>新建软件安装目录和配置文件存放目录(已有可以不用新建)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/software         # 存放redis</span><br><span class="line">mkdir -p /usr/local/redis       # 存放配置文件</span><br></pre></td></tr></table></figure></p><p>下载redis, 可以在<a href="http://download.redis.io/releases" target="_blank" rel="noopener">官网</a>获取指定版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/software   # 进入安装目录</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz   #下载</span><br></pre></td></tr></table></figure></p><p>依次执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-5.0.3.tar.gz      # 解压缩</span><br><span class="line">cd redis-5.0.3                  # 进入解压后的文件目录</span><br><span class="line">make                            # 编译安装</span><br></pre></td></tr></table></figure></p><p>目前已经安装完毕</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>复制配置文件( 相当于备份 )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /home/software/redis-5.0.3/src/redis-server /usr/local/redis/</span><br><span class="line">cp /home/software/redis-5.0.3/src/redis-cli /usr/local/redis/</span><br><span class="line">cp /home/software/redis-5.0.3/redis.conf /usr/local/redis/</span><br></pre></td></tr></table></figure></p><p>编辑配置文件 redis.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/redis/redis.conf</span><br></pre></td></tr></table></figure></p><p>daemonize 改为yes 后台运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># By default Redis does not run as a daemon. Use &apos;yes&apos; if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></p><p>把 <code>bind 127.0.0.1</code>注释掉, 放开ip限制 ( 可选 )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># bind 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>把<code># requirepass foobared</code>注释放开并修改密码为123456( 可选 )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456</span><br></pre></td></tr></table></figure></p><p>添加开机自启动服务文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure></p><p>加入以下内容, 在vim中一定要检查是否一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The redis-server Process Manager</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PIDFile=/var/run/redis_6379.pid</span><br><span class="line">ExecStart=/usr/local/redis/redis-server /usr/local/redis/redis.conf         </span><br><span class="line">ExecReload=/bin/kill -USR2 $MAINPID</span><br><span class="line">ExecStop=/bin/kill -SIGINT $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>设置开机自启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl start redis.service </span><br><span class="line">systemctl enable redis.service</span><br></pre></td></tr></table></figure></p><p>测试redis, 启动redis客户端, 依次执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/redis/redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name Holeski</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;holeski&quot;</span><br></pre></td></tr></table></figure></p><p>redis安装配置成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;首先确认是否具有root权限，因为vim、设定redis开机启动需要root权限&lt;br&gt;&lt;figure class=&quot;highlight p
      
    
    </summary>
    
      <category term="redis" scheme="http://huleski.github.com/categories/redis/"/>
    
    
      <category term="centos7" scheme="http://huleski.github.com/tags/centos7/"/>
    
      <category term="redis" scheme="http://huleski.github.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装mariaDB最新版</title>
    <link href="http://huleski.github.com/2019/02/24/CentOS7%E5%AE%89%E8%A3%85mariaDB%E6%9C%80%E6%96%B0%E7%89%88/"/>
    <id>http://huleski.github.com/2019/02/24/CentOS7安装mariaDB最新版/</id>
    <published>2019-02-24T08:26:41.000Z</published>
    <updated>2019-02-25T07:52:57.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Maria-DB"><a href="#安装Maria-DB" class="headerlink" title="安装Maria DB"></a>安装Maria DB</h2><p>来自<a href="https://downloads.mariadb.org/mariadb/repositories/" target="_blank" rel="noopener">官网的包源</a></p><p>编辑新增文件:  vim /etc/yum.repos.d/MariaDB.repo 保存以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.3/centos7-amd64/</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure><p>移除已安装的mariaDB/MySQL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum remove $(rpm -qa | grep -i mysql)</span><br><span class="line">yum remove $(rpm -qa | grep -i mari)</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y MariaDB-server MariaDB-client</span><br></pre></td></tr></table></figure></p><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb         # 启动mariaDB</span><br><span class="line">systemctl enable mariadb        # 设置开机自启动</span><br><span class="line">mysql_secure_installation       # 开始初始化数据库</span><br></pre></td></tr></table></figure></p><p>首先是设置密码，会提示先输入密码，后面是一些其他配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Enter current password for root (enter for none): &lt;–初次运行直接回车</span><br><span class="line"></span><br><span class="line">Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车</span><br><span class="line"></span><br><span class="line">New password: &lt;– 设置root用户的密码</span><br><span class="line"></span><br><span class="line">Re-enter new password: &lt;– 再输入一次你设置的密码</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车,</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车</span><br></pre></td></tr></table></figure></p><p>初始化MariaDB完成，接下来测试登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; mysql -uroot -ppassword</span><br></pre></td></tr></table></figure></p><p>登录成功，查看数据库版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br></pre></td></tr></table></figure></p><p>配置MariaDB的字符集</p><p>编辑文件：vi /etc/my.cnf ，在[mysqld]标签下添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init_connect=&apos;SET collation_connection = utf8_unicode_ci&apos; </span><br><span class="line">init_connect=&apos;SET NAMES utf8&apos; </span><br><span class="line">character-set-server=utf8 </span><br><span class="line">collation-server=utf8_unicode_ci </span><br><span class="line">skip-character-set-client-handshake</span><br></pre></td></tr></table></figure></p><p>编辑文件：vi /etc/my.cnf.d/client.cnf ，在[client]下添加 ( 如果没有可以不加 )<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p><p>编辑文件： vi /etc/my.cnf.d/mysql-clients.cnf ，在[mysql]下添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></p><p> 全部配置完成，重启mariadb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure></p><p>之后进入MariaDB查看字符集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;;</span><br></pre></td></tr></table></figure></p><p>显示为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | utf8                       |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| Variable_name        | Value           |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">| collation_connection | utf8_unicode_ci |</span><br><span class="line">| collation_database   | utf8_unicode_ci |</span><br><span class="line">| collation_server     | utf8_unicode_ci |</span><br><span class="line">+----------------------+-----------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>字符集配置完成。</p><p>添加用户，设置权限</p><ol><li>创建用户命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user username@&apos;localhost&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure><ol start="2"><li>授予外网登陆权限 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to username@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure><ol start="3"><li>授予权限并且可以授权</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to username@&apos;hostname&apos; identified by &apos;password&apos; with grant option;</span><br></pre></td></tr></table></figure><ol start="4"><li>刷新权限</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Maria-DB&quot;&gt;&lt;a href=&quot;#安装Maria-DB&quot; class=&quot;headerlink&quot; title=&quot;安装Maria DB&quot;&gt;&lt;/a&gt;安装Maria DB&lt;/h2&gt;&lt;p&gt;来自&lt;a href=&quot;https://downloads.mariadb.o
      
    
    </summary>
    
      <category term="mariaDB" scheme="http://huleski.github.com/categories/mariaDB/"/>
    
    
      <category term="mariaDB" scheme="http://huleski.github.com/tags/mariaDB/"/>
    
      <category term="CentOS7" scheme="http://huleski.github.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="http://huleski.github.com/2019/01/31/springboot/"/>
    <id>http://huleski.github.com/2019/01/31/springboot/</id>
    <published>2019-01-31T08:45:42.000Z</published>
    <updated>2019-03-18T12:00:53.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建微服务：Spring-boot-入门篇"><a href="#构建微服务：Spring-boot-入门篇" class="headerlink" title="构建微服务：Spring boot 入门篇"></a>构建微服务：Spring boot 入门篇</h1><h2 id="什么是spring-boot"><a href="#什么是spring-boot" class="headerlink" title="什么是spring boot"></a>什么是spring boot</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是spring boot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架（有点夸张）。</p><h2 id="使用spring-boot有什么好处"><a href="#使用spring-boot有什么好处" class="headerlink" title="使用spring boot有什么好处"></a>使用spring boot有什么好处</h2><p>其实就是简单、快速、方便！平时如果我们需要搭建一个spring web项目的时候需要怎么做呢？</p><ol><li>配置web.xml，加载spring和spring mvc</li><li>配置数据库连接、配置spring事务</li><li>配置加载配置文件的读取，开启注解</li><li>配置日志文件</li></ol><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>说了那么多，手痒痒的很，马上来一发试试!</p><h2 id="maven构建项目"><a href="#maven构建项目" class="headerlink" title="maven构建项目"></a>maven构建项目</h2><ol><li>访问<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a></li><li>选择构建工具Maven Project、Spring Boot版本1.3.6以及一些工程基本信息，点击“Switch to the full version.”java版本选择1.7。</li><li>点击Generate Project下载项目压缩包</li><li>解压后，使用IDEA Import</li></ol><h2 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h2><p>Spring Boot的基础结构共三个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l src/main/java  程序开发以及主程序入口</span><br><span class="line">l src/main/resources 配置文件</span><br><span class="line">l src/test/java  测试程序</span><br></pre></td></tr></table></figure><p>另外，spingboot建议的目录结果如下：<br>root package结构：com.example.myproject</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line">  +- example</span><br><span class="line">    +- myproject</span><br><span class="line">      +- Application.java</span><br><span class="line">      |</span><br><span class="line">      +- domain</span><br><span class="line">      |  +- Customer.java</span><br><span class="line">      |  +- CustomerRepository.java</span><br><span class="line">      |</span><br><span class="line">      +- service</span><br><span class="line">      |  +- CustomerService.java</span><br><span class="line">      |</span><br><span class="line">      +- controller</span><br><span class="line">      |  +- CustomerController.java</span><br><span class="line">      |</span><br></pre></td></tr></table></figure><ol><li>Application.java 建议放到跟目录下面,主要用于做一些框架配置</li><li>domain目录主要用于实体（Entity）与数据访问层（Repository）</li><li>service 层主要是业务类代码</li><li>controller 负责页面访问控制</li></ol><p>采用默认配置可以省去很多配置，当然也可以根据自己的喜欢来进行更改。最后，启动Application main方法，至此一个java项目搭建好了！</p><p>引入web模块</p><ol><li>pom.xml中添加支持web的模块：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>pom.xml文件中默认有两个模块：</p><p>spring-boot-starter：核心模块，包括自动配置支持、日志和YAML；<br>spring-boot-starter-test：测试模块，包括JUnit、Hamcrest、Mockito。</p><ol start="2"><li>编写controller内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloWorldController &#123;</span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String index() &#123;</span><br><span class="line">        return &quot;Hello World&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>@RestController的意思就是controller里面的方法都以json格式输出，不用再写什么jackjson配置的了！</p><ol start="3"><li>启动主程序，打开浏览器访问<a href="http://localhost:8080/hello，就可以看到效果了，有木有很简单！" target="_blank" rel="noopener">http://localhost:8080/hello，就可以看到效果了，有木有很简单！</a></li></ol><h2 id="如何做单元测试"><a href="#如何做单元测试" class="headerlink" title="如何做单元测试"></a>如何做单元测试</h2><p>打开的src/test/下的测试入口，编写简单的http请求来测试；使用mockmvc进行，利用MockMvcResultHandlers.print()打印出执行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@SpringApplicationConfiguration(classes = MockServletContext.class)</span><br><span class="line">@WebAppConfiguration</span><br><span class="line">public class HelloWorldControlerTests &#123;</span><br><span class="line">    private MockMvc mvc;</span><br><span class="line">    @Before</span><br><span class="line">    public void setUp() throws Exception &#123;</span><br><span class="line">        mvc = MockMvcBuilders.standaloneSetup(new HelloWorldController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void getHello() throws Exception &#123;</span><br><span class="line">    mvc.perform(MockMvcRequestBuilders.get(&quot;/hello&quot;).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="开发环境的调试"><a href="#开发环境的调试" class="headerlink" title="开发环境的调试"></a>开发环境的调试</h2><p>热启动在正常开发项目中已经很常见了吧，虽然平时开发web项目过程中，改动项目启重启总是报错；修改之后可以实时生效，需要添加以下的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">   &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构建微服务：Spring-boot-入门篇&quot;&gt;&lt;a href=&quot;#构建微服务：Spring-boot-入门篇&quot; class=&quot;headerlink&quot; title=&quot;构建微服务：Spring boot 入门篇&quot;&gt;&lt;/a&gt;构建微服务：Spring boot 入门篇&lt;/
      
    
    </summary>
    
      <category term="springboot" scheme="http://huleski.github.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://huleski.github.com/tags/springboot/"/>
    
      <category term="教程" scheme="http://huleski.github.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>gitlab</title>
    <link href="http://huleski.github.com/2019/01/31/gitlab/"/>
    <id>http://huleski.github.com/2019/01/31/gitlab/</id>
    <published>2019-01-31T08:44:57.000Z</published>
    <updated>2019-02-25T00:44:45.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gitlab安装配置"><a href="#gitlab安装配置" class="headerlink" title="gitlab安装配置"></a>gitlab安装配置</h1><h2 id="拉取gitlab镜像"><a href="#拉取gitlab镜像" class="headerlink" title="拉取gitlab镜像"></a>拉取gitlab镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. git pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gitlab安装配置&quot;&gt;&lt;a href=&quot;#gitlab安装配置&quot; class=&quot;headerlink&quot; title=&quot;gitlab安装配置&quot;&gt;&lt;/a&gt;gitlab安装配置&lt;/h1&gt;&lt;h2 id=&quot;拉取gitlab镜像&quot;&gt;&lt;a href=&quot;#拉取gitlab镜像&quot;
      
    
    </summary>
    
      <category term="gitlab" scheme="http://huleski.github.com/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="http://huleski.github.com/tags/gitlab/"/>
    
      <category term="版本控制" scheme="http://huleski.github.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
</feed>
