<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Holeski的博客</title>
  
  <subtitle>你为什么这么熟练啊！？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huleski.github.io/"/>
  <updated>2023-03-08T11:15:51.134Z</updated>
  <id>https://huleski.github.io/</id>
  
  <author>
    <name>Holeski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH无密码登录</title>
    <link href="https://huleski.github.io/2023/03/08/SSH%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>https://huleski.github.io/2023/03/08/SSH无密码登录/</id>
    <published>2023-03-08T10:46:17.000Z</published>
    <updated>2023-03-08T11:15:51.134Z</updated>
    
    <content type="html"><![CDATA[<p>环境: 本机Linux, 远程Linux</p><ul><li>首先我们在本机Linux系统上生成一对SSH Key：SSH密钥和SSH公钥．密钥保存在本机Linux系统上。</li><li>然后公钥上传到远程Linux服务器．之后我们就能在本机Linux无密码SSH登录远程Linux了．SSH密钥就好比是你的身份证明．</li></ul><h3 id="本机Linux生成秘钥"><a href="#本机Linux生成秘钥" class="headerlink" title="本机Linux生成秘钥"></a>本机Linux生成秘钥</h3><p>在本机Linux命令行使用 <code>ssh-keygen</code> 生成密钥和公钥, 也可以添加参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -b 4096 -t rsa</span><br></pre></td></tr></table></figure><ul><li>-b是指定生成秘钥长度为4096, 默认是2048</li><li>-t表示加密类型, 默认是RSA加密</li></ul><p>生成SSH Key的过程中会要求你指定一个文件来保存密钥，按Enter键使用默认的文件就行了．然后需要输入一个密码来加密你的SSH Key．密码至少要5位长度．</p><p>生成过程如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/.ssh/id_rsa): 　按Enter键</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): 　　输入一个密码</span><br><span class="line">Enter same passphrase again: 　　再次输入密码</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> ~/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> ~/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">e1:dc:ab:ae:b6:19:b0:19:74:d5:fe:57:3f:32:b4:d0 matrix@vivid</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">| .. |</span></span><br><span class="line"><span class="string">| . . |</span></span><br><span class="line"><span class="string">| . . .. . |</span></span><br><span class="line"><span class="string">| . . o o.. E .|</span></span><br><span class="line"><span class="string">| o S ..o ...|</span></span><br><span class="line"><span class="string">| = ..+...|</span></span><br><span class="line"><span class="string">| o . . .o .|</span></span><br><span class="line"><span class="string">| .o . |</span></span><br><span class="line"><span class="string">| .++o |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure><p>SSH密钥会默认保存在 <code>~/.ssh/id_rsa</code>文件中．SSH公钥保存在 <code>~/.ssh/id_rsa.pub</code> 文件中．</p><h3 id="远程连接Linux"><a href="#远程连接Linux" class="headerlink" title="远程连接Linux"></a>远程连接Linux</h3><p>使用<code>ssh-copy-id</code>命令将SSH公钥上传到远程Linux服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id username@remote-server</span><br></pre></td></tr></table></figure><p>输入远程用户密码后, SSH公钥就会自动上传了．SSH公钥保存在远程Linux服务器的 <code>~/.ssh/authorized_keys</code> 文件中．</p><p>上传完成后，SSH登录就不需要再次输入密码了．但是首次使用SSH Key登录时需要输入一次SSH密钥的加密密码．（只需要输入一次，将来会自动登录，不再需要输入密钥的密码）</p><p>测试一下远程ssh查看系统版本:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 22 username@remote-server <span class="string">"cat /etc/redhat-release"</span></span><br></pre></td></tr></table></figure></p><p>OK! 以后使用scp命令来传送文件时也不需要输入密码了．</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境: 本机Linux, 远程Linux&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先我们在本机Linux系统上生成一对SSH Key：SSH密钥和SSH公钥．密钥保存在本机Linux系统上。&lt;/li&gt;
&lt;li&gt;然后公钥上传到远程Linux服务器．之后我们就能在本机Linux无密码SSH
      
    
    </summary>
    
      <category term="SSH" scheme="https://huleski.github.io/categories/SSH/"/>
    
    
      <category term="SSH" scheme="https://huleski.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>docker部署shadowsocksR</title>
    <link href="https://huleski.github.io/2023/02/17/docker%E9%83%A8%E7%BD%B2shadowsocksR/"/>
    <id>https://huleski.github.io/2023/02/17/docker部署shadowsocksR/</id>
    <published>2023-02-17T07:08:55.000Z</published>
    <updated>2023-02-20T14:40:51.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前期准备</p><p>系统: CentOS7</p><p>环境：docker 17.0</p><p>一台在 境外/国外 的云服务器</p></blockquote><p>一键部署:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name ssr \</span><br><span class="line">  -p 38989:8989 -p 38989:8989/udp malaohu/ssr-with-net-speeder \</span><br><span class="line">  -s 0.0.0.0 -p 8989 \</span><br><span class="line">  -k 123456 \</span><br><span class="line">  -m rc4-md5 \</span><br><span class="line">  -o http_simple \</span><br><span class="line">  -O auth_sha1_v4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解释一下</span><br><span class="line">服务器端口：38989</span><br><span class="line">密码：123456</span><br><span class="line">加密：rc4-md5</span><br><span class="line">协议：auth_sha1_v4  这里需要注意，auth_sha1这个协议已经被此软件弃用了，注意有_v4</span><br><span class="line">混淆：http_simple</span><br></pre></td></tr></table></figure><p>最后, 需要放开云服务器的38989端口访问权限(tcp和udp), 可以访问了</p><h1 id="血泪总结-写于搭建SSR后的第3天"><a href="#血泪总结-写于搭建SSR后的第3天" class="headerlink" title="血泪总结(写于搭建SSR后的第3天)"></a>血泪总结(写于搭建SSR后的第3天)</h1><p>阿里云香港服务器公网ip被墙了，服务器已作废，***，退钱！ </p><p>####不要用阿里云！</p><h3 id="不要用阿里云！"><a href="#不要用阿里云！" class="headerlink" title="不要用阿里云！"></a>不要用阿里云！</h3><h2 id="不要用阿里云！-1"><a href="#不要用阿里云！-1" class="headerlink" title="不要用阿里云！"></a>不要用阿里云！</h2><p>#这里不是家！！！ T_T</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前期准备&lt;/p&gt;
&lt;p&gt;系统: CentOS7&lt;/p&gt;
&lt;p&gt;环境：docker 17.0&lt;/p&gt;
&lt;p&gt;一台在 境外/国外 的云服务器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一键部署:&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
      <category term="docker" scheme="https://huleski.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
      <category term="shadowsocksR" scheme="https://huleski.github.io/tags/shadowsocksR/"/>
    
  </entry>
  
  <entry>
    <title>Springboot集成ELK</title>
    <link href="https://huleski.github.io/2021/12/16/Springboot%E9%9B%86%E6%88%90ELK/"/>
    <id>https://huleski.github.io/2021/12/16/Springboot集成ELK/</id>
    <published>2021-12-16T07:10:40.000Z</published>
    <updated>2021-12-16T09:11:54.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ELK简介"><a href="#ELK简介" class="headerlink" title="ELK简介"></a>ELK简介</h2><p>ELK是由 Elasticsearch、Logstash和Kibana 三部分组件组成。</p><p>Elasticsearch 是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p>Logstash 是一个完全开源的工具，它可以对你的日志进行收集、分析，并将其存储供以后使用。<br>一般工作方式为c/s架构，client端安装在需要收集日志的主机上（本例中为集成在Springboot项目中），server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch上去。</p><p>kibana 是一个开源和免费的工具，它可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</p><p>在本示例中, 工作流畅是: Springboot集成Logstash收集日志, 再把日志发送到ElasticSearch中, 最后用户通过kibana连接ElasticSearch查看日志数据</p><h2 id="ELK安装"><a href="#ELK安装" class="headerlink" title="ELK安装"></a>ELK安装</h2><p>直接使用docker-compose安装简单粗暴, 不整那些花里胡哨的操作,</p><p>先新建目录: <code>mkdir -p /data/elk/{elasticsearch/data,kibana,logstash,}</code></p><p>保存配置文件: docker-compose.yml (软件版本要统一, 当前最新版为 7.16.1) :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  elasticsearch:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">elasticsearch:7.16.1</span>  <span class="comment">#镜像</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">elk_elasticsearch</span>  <span class="comment">#定义容器名称</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span>  <span class="comment">#开机启动，失败也会一直重启</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"cluster.name=elasticsearch"</span> <span class="comment">#设置集群名称为elasticsearch</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"discovery.type=single-node"</span> <span class="comment">#以单一节点模式启动</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx1024m"</span> <span class="comment">#设置使用jvm内存大小</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span> <span class="comment">#插件文件挂载</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/elk/elasticsearch/data:/usr/share/elasticsearch/data</span> <span class="comment">#数据文件挂载</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line"><span class="attr">  kibana:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">kibana:7.16.1</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">elk_kibana</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elasticsearch</span> <span class="comment">#kibana在elasticsearch启动之后再启动</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ELASTICSEARCH_URL=http://elasticsearch:9200</span> <span class="comment">#设置访问elasticsearch的地址</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/elk/kibana/config:/opt/kibana/config</span> <span class="comment">#配置文件挂载</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line"><span class="attr">  logstash:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">logstash:7.16.1</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">elk_logstash</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/elk/logstash/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf</span> <span class="comment">#挂载logstash的配置文件</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">elasticsearch</span> <span class="comment">#kibana在elasticsearch启动之后再启动</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="attr">      - elasticsearch:</span><span class="string">es</span> <span class="comment">#可以用es这个域名访问elasticsearch服务</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">4560</span><span class="string">:4560</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 授权目录</span></span><br><span class="line">cd /data/elk</span><br><span class="line">chmod 777 elasticsearch/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建logstash/logstash-springboot.conf文件，新增以下内容</span></span><br><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; "server"</span><br><span class="line">    host =&gt; "0.0.0.0"</span><br><span class="line">    port =&gt; 4560</span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; "es:9200"</span><br><span class="line">    index =&gt; "springboot-logstash-%&#123;+YYYY.MM.dd&#125;"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装，运行ELK</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器运行状态</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>等一会容器都启动成功了就打开浏览器访问Kibana: <code>http://localhost:5601</code>, 正常情况就会出现欢迎界面</p><h3 id="汉化kibana"><a href="#汉化kibana" class="headerlink" title="汉化kibana"></a>汉化kibana</h3><p>编辑配置文件 <code>/data/elk/kibana/config/kibana.yml</code>, 新增: <code>i18n.locale: zh-CN</code></p><p>改完配置后重启kibana: <code>docker restart elk_kibana</code></p><h2 id="Springboot整合Logstash"><a href="#Springboot整合Logstash" class="headerlink" title="Springboot整合Logstash"></a>Springboot整合Logstash</h2><p>在<code>pom.xml</code>新增依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改Springboot项目中日志配置文件<code>logback.xml</code>, 在相应位置增加配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">"false"</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"1 seconds"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>localhost:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Springboot项目后再查看kibana就可以看到日志了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ELK简介&quot;&gt;&lt;a href=&quot;#ELK简介&quot; class=&quot;headerlink&quot; title=&quot;ELK简介&quot;&gt;&lt;/a&gt;ELK简介&lt;/h2&gt;&lt;p&gt;ELK是由 Elasticsearch、Logstash和Kibana 三部分组件组成。&lt;/p&gt;
&lt;p&gt;Elasti
      
    
    </summary>
    
      <category term="Springboot" scheme="https://huleski.github.io/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://huleski.github.io/tags/Springboot/"/>
    
      <category term="ELK" scheme="https://huleski.github.io/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置目录浏览及美化主题</title>
    <link href="https://huleski.github.io/2021/11/30/nginx%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95%E6%B5%8F%E8%A7%88%E5%8F%8A%E7%BE%8E%E5%8C%96%E4%B8%BB%E9%A2%98/"/>
    <id>https://huleski.github.io/2021/11/30/nginx配置目录浏览及美化主题/</id>
    <published>2021-11-30T11:21:52.000Z</published>
    <updated>2021-11-30T12:07:30.449Z</updated>
    
    <content type="html"><![CDATA[<p>nginx可以配置浏览目录服务, 这样用户可以直接在浏览器中查看文件目录, 并且可以下载文件, 非常方便</p><h2 id="ngx-http-autoindex-module-模块"><a href="#ngx-http-autoindex-module-模块" class="headerlink" title="ngx_http_autoindex_module 模块"></a>ngx_http_autoindex_module 模块</h2><p>目录浏览服务由ngx_http_autoindex_module模块提供</p><table><thead><tr><th>命令</th><th>默认值</th><th>值域</th><th>作用域</th><th>例子</th></tr></thead><tbody><tr><td>autoindex</td><td>off</td><td>on：开启目录浏览；<br>off：关闭目录浏览</td><td>http, server, location</td><td>autoindex on; 打开目录浏览功能</td></tr><tr><td>autoindex_format</td><td>html</td><td>html、xml、json、jsonp 分别用这几个风格展示目录</td><td>http, server, location</td><td>autoindex_format html; 以网页的风格展示目录内容。该属性在1.7.9及以上适用</td></tr><tr><td>autoindex_exact_size</td><td>on</td><td>on：展示文件字节数；<br>off：以可读的方式显示文件大小</td><td>http, server, location</td><td>autoindex_exact_size off; 以可读的方式显示文件大小，单位为 KB、MB 或者 GB，autoindex_format为html时有效</td></tr><tr><td>autoindex_localtime</td><td>off</td><td>on、off：是否以服务器的文件时间作为显示的时间</td><td>http, server, location</td><td>autoindex_localtime on; 以服务器的文件时间作为显示的时间,autoindex_format为html时有效</td></tr></tbody></table><p>修改nginx配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       10000;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /home;</span><br><span class="line">        <span class="comment"># 开启目录浏览 </span></span><br><span class="line">        autoindex on; </span><br><span class="line">        <span class="comment"># 以可读的方式显示文件大小</span></span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        <span class="comment"># 以服务器的文件时间作为显示的时间</span></span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        <span class="comment"># 展示中文文件名</span></span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令 <code>nginx -s reload</code> 重载配置, 打开浏览器访问 <code>http://localhost:10000</code> 就可以在浏览器中访问 <code>/home</code> 目录中的文件了, 但是nginx原始的目录很简陋, 不是正常人看的, 可以美化一下</p><h2 id="安装Nginx-FancyIndex模块"><a href="#安装Nginx-FancyIndex模块" class="headerlink" title="安装Nginx FancyIndex模块"></a>安装Nginx FancyIndex模块</h2><p>先安装所需模块 <code>FancyIndex</code>, 在nginx的源码文件夹下下载插件: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/aperezdc/ngx-fancyindex.git ngx-fancyindex</span><br></pre></td></tr></table></figure><p>查看已安装的nginx完整编译参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><p>控制台会打印出参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.16.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC) </span><br><span class="line">built with OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-stream_ssl_preread_module --with-http_addition_module --with-http_xslt_module=dynamic</span><br><span class="line">...(略)</span><br></pre></td></tr></table></figure><p><code>configure arguments:</code>后面一大串的都是编译参数, 复制下来, 执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-stream_ssl_preread_module --with-http_addition_module --with-http_xslt_module=dynamic</span><br><span class="line">...(略)   --add-module=ngx-fancyindex-0.4.2</span><br></pre></td></tr></table></figure><p>也就是 <code>./configure</code> 跟着上面复制的一大串再加上 <code>--add-module=ngx-fancyindex-0.4.2</code> 执行就可以了, 如果执行过程中有报错缺少什么依赖组件就网上搜一下, 少什么安装什么, 转好了再执行直到成功</p><p>再执行编译:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><p>再执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2&gt;&amp;1 ./nginx -V | tr <span class="string">' '</span> <span class="string">'\n'</span>|grep fan</span><br></pre></td></tr></table></figure><p>如果看到输出 <code>ngx-fancyindex</code> 就说明编译好了</p><p>先备份原来的nginx文件(如果有问题可以还原) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/sbin/nginx 是原执行文件</span></span><br><span class="line">mv /usr/sbin/nginx /usr/sbin/nginx.bak</span><br></pre></td></tr></table></figure><p>把编译目录中<code>objs</code>文件中的nginx移过去就安装完成了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv objs/nginx /usr/sbin/</span><br></pre></td></tr></table></figure><h2 id="选择Fancy-Index主题"><a href="#选择Fancy-Index主题" class="headerlink" title="选择Fancy Index主题"></a>选择Fancy Index主题</h2><p>在 <code>/home</code> 目录中下载Fancy Index主题:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/lanffy/Nginx-Fancyindex-Theme.git</span><br></pre></td></tr></table></figure><p>修改nginx配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       10000;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /home;</span><br><span class="line">        <span class="comment"># 开启目录浏览 </span></span><br><span class="line">        autoindex on; </span><br><span class="line">        <span class="comment"># 以可读的方式显示文件大小</span></span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        <span class="comment"># 以服务器的文件时间作为显示的时间</span></span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        <span class="comment"># 展示中文文件名</span></span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line">        <span class="comment"># 新增目录美化配置</span></span><br><span class="line">        include /home/Nginx-Fancyindex-Theme/fancyindex.conf;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启Nginx即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx可以配置浏览目录服务, 这样用户可以直接在浏览器中查看文件目录, 并且可以下载文件, 非常方便&lt;/p&gt;
&lt;h2 id=&quot;ngx-http-autoindex-module-模块&quot;&gt;&lt;a href=&quot;#ngx-http-autoindex-module-模块&quot; cl
      
    
    </summary>
    
      <category term="nginx" scheme="https://huleski.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://huleski.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7调整根目录和home目录的空间大小</title>
    <link href="https://huleski.github.io/2021/07/09/CentOS7%E8%B0%83%E6%95%B4%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%92%8Chome%E7%9B%AE%E5%BD%95%E7%9A%84%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F/"/>
    <id>https://huleski.github.io/2021/07/09/CentOS7调整根目录和home目录的空间大小/</id>
    <published>2021-07-09T06:22:34.000Z</published>
    <updated>2021-07-09T06:47:33.655Z</updated>
    
    <content type="html"><![CDATA[<p>当安装完 CentOS7 操作系统，发现磁盘分区大小错误，或者后期使用过程发现 <code>/home</code> 还剩余很多空间，<code>/</code> 下空间不足，需要将 <code>/home</code> 下空间重新分配给 <code>/</code> 目录。</p><h3 id="查看分区空间和格式"><a href="#查看分区空间和格式" class="headerlink" title="查看分区空间和格式"></a>查看分区空间和格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost portainer]$ df -hT</span><br><span class="line">文件系统                    类型    容量    已用  可用  已用% 挂载点</span><br><span class="line">devtmpfs                 devtmpfs  3.8G     0   3.8G    0%     /dev</span><br><span class="line">tmpfs                     tmpfs    3.8G     0   3.8G    0%     /dev/shm</span><br><span class="line">tmpfs                     tmpfs    3.8G   51M   3.8G    2%     /run</span><br><span class="line">tmpfs                     tmpfs    3.8G     0   3.8G    0%     /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root    xfs     50G    27G    23G    56%    /</span><br><span class="line">/dev/sda1                  xfs    1014M  193M   822M    19%    /boot</span><br><span class="line">/dev/mapper/centos-home    xfs     873G   33M   873G    1%     /home</span><br></pre></td></tr></table></figure><p>这里 <code>/dev/mapper/centos-root</code> 就是根目录, 只有50G太小了, 而 <code>/dev/mapper/centos-home</code> 有800多G, 因此可以分一部分 <code>/home</code> 给 <code>/</code>目录</p><p>可以看到 /home 分区是 xfs 格式，这里特别注意：</p><ol><li>ext2/ext3/ext4文件系统的调整命令是resize2fs（增大和减小都支持）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lvextend -L 120G /dev/mapper/centos-home //增大至120G</span><br><span class="line">lvextend -L +20G /dev/mapper/centos-home //增加20G</span><br><span class="line">lvreduce -L 50G /dev/mapper/centos-home //减小至50G</span><br><span class="line">lvreduce -L -8G /dev/mapper/centos-home //减小8G</span><br><span class="line">resize2fs /dev/mapper/centos-home //执行调整</span><br></pre></td></tr></table></figure><ol start="2"><li>xfs文件系统的调整命令是xfs_growfs（只支持增大）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lvextend -L 120G /dev/mapper/centos-home //增大至120G</span><br><span class="line">lvextend -L +20G /dev/mapper/centos-home //增加20G</span><br><span class="line">xfs_growfs /dev/mapper/centos-home //执行调整</span><br></pre></td></tr></table></figure><p>就是说：<strong>xfs文件系统只支持增大分区空间的情况，不支持减小的情况</strong></p><p>硬要减小的话，只能在减小后将逻辑分区重新通过 <code>mkfs.xfs</code> 命令重新格式化才能挂载上，这样的话这个逻辑分区上原来的数据就丢失了。如果有重要文件就先复制备份到其他地方, 然后再进行下面的操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载 /home 分区 (注意: 不要在home目录下执行这个操作)</span></span><br><span class="line">umount /home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 /home 分区减小600G（根据自己实际情况设定大小）</span></span><br><span class="line">lvreduce -L -600G /dev/mapper/centos-home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化 /home 分区</span></span><br><span class="line">mkfs.xfs /dev/mapper/centos-home -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新挂载 /home 分区</span></span><br><span class="line">mount /dev/mapper/centos-home /home/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看剩余空间</span></span><br><span class="line">vgdisplay</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面空余的 600G 分到 / 分区下</span></span><br><span class="line">lvextend -L +600G /dev/mapper/centos-root</span><br></pre></td></tr></table></figure><p>再次查看分区, 分配成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost portainer]$ df -h</span><br><span class="line">文件系统                  容量   已用  可用   已用%   挂载点</span><br><span class="line">devtmpfs                 3.8G     0  3.8G    0%     /dev</span><br><span class="line">tmpfs                    3.8G     0  3.8G    0%     /dev/shm</span><br><span class="line">tmpfs                    3.8G   51M  3.8G    2%     /run</span><br><span class="line">tmpfs                    3.8G     0  3.8G    0%     /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root  650G   27G  624G    5%     /</span><br><span class="line">/dev/sda1               1014M  193M  822M   19%     /boot</span><br><span class="line">/dev/mapper/centos-home  273G   33M  273G    1%     /home</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当安装完 CentOS7 操作系统，发现磁盘分区大小错误，或者后期使用过程发现 &lt;code&gt;/home&lt;/code&gt; 还剩余很多空间，&lt;code&gt;/&lt;/code&gt; 下空间不足，需要将 &lt;code&gt;/home&lt;/code&gt; 下空间重新分配给 &lt;code&gt;/&lt;/code&gt; 目录
      
    
    </summary>
    
      <category term="CentOS7" scheme="https://huleski.github.io/categories/CentOS7/"/>
    
    
      <category term="CentOS7" scheme="https://huleski.github.io/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装docker</title>
    <link href="https://huleski.github.io/2021/07/08/CentOS7%E5%AE%89%E8%A3%85docker/"/>
    <id>https://huleski.github.io/2021/07/08/CentOS7安装docker/</id>
    <published>2021-07-08T12:11:49.000Z</published>
    <updated>2022-10-31T03:39:18.351Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 官方建议要 CentOS7.0 及以上系统版本，本文介绍 Docker CE 在CentOS7下的安装使用。</p><h2 id="Device-Mapper"><a href="#Device-Mapper" class="headerlink" title="Device Mapper"></a>Device Mapper</h2><p>Docker默认使用AUFS作为存储驱动，但是AUFS并没有被包括在Linux的主线内核中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y device-mapper</span><br><span class="line"><span class="comment"># 重新加载dm_mod内核模块</span></span><br><span class="line">modprobe dm_mod</span><br></pre></td></tr></table></figure><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本</span></span><br><span class="line">yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装编译环境</span></span><br><span class="line">yum -y install gcc gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置stable镜像仓库, 下面二选一</span></span><br><span class="line">1. yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">2. yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从高到低列出Docker-ce的版本</span></span><br><span class="line">yum list docker-ce.x86_64  --showduplicates | sort -r    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版</span></span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让docker开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h3 id="修改容器默认存储路径"><a href="#修改容器默认存储路径" class="headerlink" title="修改容器默认存储路径"></a>修改容器默认存储路径</h3><blockquote><p>docker安装之后默认的服务数据存放根路径为/var/lib/docker目录下，var目录默认使用的是根分区的磁盘空间；所以这是非常危险的事情；随着我们镜像、启动的容器实例开始增多的时候，磁盘所消耗的空间也会越来越大，所以我们必须要做数据迁移和修改docker服务的默认存储位置路径；有多种方式是可以修改docker默认存储目录路径的，但是最好是在docker安装完成后，第一时间便修改docker的默认存储位置路径为其他磁盘空间较大的目录(一般企业中为/data目录)，规避迁移数据过程中所造成的风险。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建docker容器存放的路径</span></span><br><span class="line">mkdir -p /home/data/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迁移数据到新目录</span></span><br><span class="line">rsync -avz /var/lib/docker/ /home/data/docker/</span><br></pre></td></tr></table></figure><p>编辑docker配置文件 <code>vim /etc/docker/daemon.json</code>, 指定存储路劲</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"graph":"/home/data/docker"</span><br></pre></td></tr></table></figure><h3 id="设置docker容器日志大小限制"><a href="#设置docker容器日志大小限制" class="headerlink" title="设置docker容器日志大小限制"></a>设置docker容器日志大小限制</h3><p>编辑docker配置文件 <code>vim /etc/docker/daemon.json</code>,添加log-dirver和log-opts参数。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"log-driver"</span>:<span class="string">"json-file"</span></span><br><span class="line">    <span class="string">"log-opts"</span>:&#123;<span class="attr">"max-size"</span>:<span class="string">"500m"</span>,<span class="attr">"max-file"</span>:<span class="string">"3"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>max-size=500m，意味着一个容器日志大小上限是500M，</p><p>max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json。</p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。</p><p>Docker国内镜像：</p><ul><li>网易加速器：<a href="http://hub-mirror.c.163.com" target="_blank" rel="noopener">http://hub-mirror.c.163.com</a></li><li>官方中国加速器：<a href="https://registry.docker-cn.com" target="_blank" rel="noopener">https://registry.docker-cn.com</a></li><li>ustc的镜像：<a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noopener">https://docker.mirrors.ustc.edu.cn</a></li></ul><p>编辑docker配置文件 <code>vim /etc/docker/daemon.json</code>, 加入以下配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"registry-mirrors": ["https://hub-mirror.c.163.com"]</span><br></pre></td></tr></table></figure><h3 id="开启docker-API-开启docker远程访问管理"><a href="#开启docker-API-开启docker远程访问管理" class="headerlink" title="开启docker API(开启docker远程访问管理)"></a>开启docker API(开启docker远程访问管理)</h3><p>在 <code>/etc/docker/daemon.json</code> 文件中添加 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 不限制ip</span><br><span class="line">"hosts":["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]</span><br></pre></td></tr></table></figure><p>配置好后docker却异常报错了, 这里需要修改启动文件 <code>/usr/lib/systemd/system/docker.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock 注释掉改为下面这样</span></span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br></pre></td></tr></table></figure><p>然后执行以下步骤即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl reset-failed docker.service</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取脚本</span></span><br><span class="line">curl -L <span class="string">"https://get.daocloud.io/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="单容器的日志限制配置"><a href="#单容器的日志限制配置" class="headerlink" title="单容器的日志限制配置"></a>单容器的日志限制配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nginx:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">nginx:1.12.1</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    logging:</span></span><br><span class="line"><span class="attr">        driver:</span> <span class="string">"json-file"</span></span><br><span class="line"><span class="attr">        options:</span></span><br><span class="line"><span class="attr">            max-size:</span> <span class="string">"5g"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker 官方建议要 CentOS7.0 及以上系统版本，本文介绍 Docker CE 在CentOS7下的安装使用。&lt;/p&gt;
&lt;h2 id=&quot;Device-Mapper&quot;&gt;&lt;a href=&quot;#Device-Mapper&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="docker" scheme="https://huleski.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>gitlab版本升级</title>
    <link href="https://huleski.github.io/2021/07/08/gitlab%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
    <id>https://huleski.github.io/2021/07/08/gitlab版本升级/</id>
    <published>2021-07-08T10:02:05.000Z</published>
    <updated>2023-03-16T01:52:00.826Z</updated>
    
    <content type="html"><![CDATA[<p>以前用的gitlab-ce是别人构建的中文版镜像, 版本太低, 作者现在也没有再维护更新, 而官方最新版现在已支持中文, 所以打算升级gitlab。</p><p>当前的gitlab版本：V10.7.5，准备更新到最新版V14.0.4</p><p><a href="https://docs.gitlab.com/ee/update/index.html" target="_blank" rel="noopener">Gitlab官方升级版本指南</a></p><h2 id="数据备份和恢复（可选）"><a href="#数据备份和恢复（可选）" class="headerlink" title="数据备份和恢复（可选）"></a>数据备份和恢复（可选）</h2><p>为了防止更新失败后能够复原，可以备份数据（实际上我没有备份上来就是干。。。）</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>进入docker容器输入命令备份数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>完成后会在 <code>/var/opt/gitlab/backups/</code> 文件夹下生成备份文件 <code>1572606813_gitlab_backup.tar</code>， 其中，<code>1572606813</code> 是备份版本号后面会用到，然后将文件从容器中复制出来留作备份。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>等gitlab的docker镜像启动后将备份文件复制进容器到gitlab的备份目录 <code>backup</code> 文件夹下, 在gitlab容器执行命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:restore BACKUP=备份版本号</span><br></pre></td></tr></table></figure><p>还原备份，这里实际执行：<code>gitlab-rake gitlab:backup:restore BACKUP=1572606813</code> </p><h2 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h2><p>由于不同版本之间的差异导致不能直接升级到指定版本, 必须经过中间版本过渡升级到指定版本, 下面是升级版本路线(<a href="https://docs.gitlab.com/ee/update/#upgrade-paths" target="_blank" rel="noopener">最新升级路线官方文档</a>):</p><blockquote><p>8.11.Z -&gt; 8.12.0 -&gt; 8.17.7 -&gt; 9.0.13 -&gt; 9.5.10 -&gt; 10.0.7 -&gt; 10.8.7 -&gt; 11.0.6 -&gt; 11.11.8 -&gt; 12.0.12 -&gt; 12.1.17 -&gt; 12.10.14 -&gt; 13.0.14 -&gt; 13.1.11 -&gt; 13.8.8 -&gt; 13.12.15 -&gt; 14.0.12 -&gt; 14.3.6 -&gt; 14.9.5 -&gt; 14.10.Z -&gt; 15.0.Z -&gt; 15.1.Z -&gt; 15.4.0 -&gt; latest 15.Y.Z</p></blockquote><p>升级过程就是启动不同的docker版本, 由低到高逐步升级成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前用的gitlab-ce是别人构建的中文版镜像, 版本太低, 作者现在也没有再维护更新, 而官方最新版现在已支持中文, 所以打算升级gitlab。&lt;/p&gt;
&lt;p&gt;当前的gitlab版本：V10.7.5，准备更新到最新版V14.0.4&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="gitlab" scheme="https://huleski.github.io/categories/gitlab/"/>
    
    
      <category term="gitlab" scheme="https://huleski.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>使用frp实现内网穿透</title>
    <link href="https://huleski.github.io/2021/05/24/%E4%BD%BF%E7%94%A8frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://huleski.github.io/2021/05/24/使用frp实现内网穿透/</id>
    <published>2021-05-24T09:23:16.000Z</published>
    <updated>2021-06-01T02:15:30.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FRP作用"><a href="#FRP作用" class="headerlink" title="FRP作用"></a>FRP作用</h2><blockquote><p>FRP是一个内网穿透工具<br>FRP让本地局域网的机器可以暴露到公网，简单的说就是在世界的任何地方，你可以访问家里开着的那台电脑!<br>FRP 支持 TCP、UDP、HTTP、HTTPS， 就是说不仅仅限于本地web服务器可以暴露，整台机器都可以暴露。</p><p>1.在办公室访问家里的电脑，反之亦然（可以使用NAS+FRP实现私有云盘）</p><p>2.自己电脑上的项目，方便发给客户朋友演示。比如我做了个小网站，发给朋友看看未上线版本，发个url给他就好了。</p><p>3.调试一些需要远程调用的程序，远程调用比如微信的API 回调接口。 因为我有了外网地址就不需要部署在公网服务器，直接进行本地调试。</p></blockquote><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">下载地址</a>获取压缩包 <code>https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz</code></p><p>在安装的时候注意一下, 我们需要在公网服务器上安装服务端, 然后在本地电脑安装客户端, 这个压缩包里面已经同时包含了服务端和客户端, 安装都是一样的(都是Linux环境), 解压即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.33.0_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.33.0_linux_amd64 /usr/<span class="built_in">local</span>/frp</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/frp</span><br></pre></td></tr></table></figure><h2 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">frpc                    # 客户端二进制文件</span><br><span class="line">frpc_full.ini           # 客户端配置文件完整示例</span><br><span class="line">frpc.ini                # 客户端配置文件</span><br><span class="line">frps                    # 服务端二进制文件</span><br><span class="line">frps_full.ini           # 服务端配置文件完整示例</span><br><span class="line">frps.in1                # 服务端配置文件</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>服务端需要在安装在有公网的服务器上(例如公网ip:233.233.233.233), 配置文件在安装目录下的<code>frps.ini</code>, 编辑为以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind_port = 7001</span><br><span class="line">vhost_http_port = 7002</span><br><span class="line">vhost_https_port = 7003</span><br></pre></td></tr></table></figure><p>启动服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure><p>或者将frps注册为系统服务, 编辑文件 <code>vim /usr/lib/systemd/system/frps.service</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frp server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frps -c /usr/<span class="built_in">local</span>/frp/frps.ini</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后就可以用系统命令管理服务了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> frps</span><br><span class="line">systemctl start  frps</span><br><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure><p>客户端需要安装在本地需要映射服务的电脑上, 配置文件在安装目录下的<code>frpc.ini</code>, 编辑为以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 233.233.233.233</span><br><span class="line">server_port = 7001</span><br><span class="line"></span><br><span class="line">[abc]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 2000</span><br><span class="line">remote_port = 2000</span><br></pre></td></tr></table></figure><p>启动客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>现在本地服务就能在外网通过<code>233.233.233.233:2000</code>访问到了。</p><p>如果有独立域名, 可以在服务端配置nginx反向代理转发域名到<code>localhost:2000</code>即可通过域名访问。</p><p>将frpc注册为系统服务, 编辑文件 <code>vim /usr/lib/systemd/system/frpc.service</code>, 内容: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Client Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=nobody</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5s</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frpc -c /usr/<span class="built_in">local</span>/frp/frpc.ini</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/frp/frpc reload -c /usr/<span class="built_in">local</span>/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FRP作用&quot;&gt;&lt;a href=&quot;#FRP作用&quot; class=&quot;headerlink&quot; title=&quot;FRP作用&quot;&gt;&lt;/a&gt;FRP作用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;FRP是一个内网穿透工具&lt;br&gt;FRP让本地局域网的机器可以暴露到公网，简单的说就是在世界
      
    
    </summary>
    
      <category term="frp" scheme="https://huleski.github.io/categories/frp/"/>
    
    
      <category term="frp" scheme="https://huleski.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose安装redis</title>
    <link href="https://huleski.github.io/2021/03/12/docker-compose%E5%AE%89%E8%A3%85redis/"/>
    <id>https://huleski.github.io/2021/03/12/docker-compose安装redis/</id>
    <published>2021-03-12T10:55:21.000Z</published>
    <updated>2021-03-12T11:02:15.720Z</updated>
    
    <content type="html"><![CDATA[<p>编写yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:latest</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis-server</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/redis/data:/data</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/redis/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"6379:6379"</span></span><br></pre></td></tr></table></figure><p>同级目录中创建配置文件 <code>reids.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">requirepass 123456</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><p>启动镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编写yml文件&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="docker-compose" scheme="https://huleski.github.io/categories/docker-compose/"/>
    
    
      <category term="docker-compose" scheme="https://huleski.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose安装MariaDB</title>
    <link href="https://huleski.github.io/2021/03/12/docker-compose%E5%AE%89%E8%A3%85MariaDB/"/>
    <id>https://huleski.github.io/2021/03/12/docker-compose安装MariaDB/</id>
    <published>2021-03-12T08:58:20.000Z</published>
    <updated>2022-06-16T08:13:57.102Z</updated>
    
    <content type="html"><![CDATA[<p>创建<code>docker-compose.yml</code>文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mariadb:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line">      <span class="comment"># root 密码</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_PASSWORD=root123</span></span><br><span class="line">      <span class="comment"># root 允许登录的host</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MYSQL_ROOT_HOST=%</span></span><br><span class="line">      <span class="comment"># 时区</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">TIME_ZONE=Asia/Shanghai</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line">      <span class="comment"># 容器与宿主机时间同步</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/etc/localtime:/etc/localtime</span></span><br><span class="line">      <span class="comment"># 数据库目录映射</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/mariadb/data/:/var/lib/mysql</span></span><br><span class="line">      <span class="comment"># 数据库配置文件</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/data/mariadb/config:/etc/mysql/conf.d</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>在宿主机的配置目录<code>/data/mariadb/config</code>中创建自定义配置文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><p>配置文件内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port            = 3306</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line"># Here is entries for some specific programs</span><br><span class="line"># The following values assume you have at least 32M ram</span><br><span class="line"></span><br><span class="line"># This was formally known as [safe_mysqld]. Both versions are currently parsed.</span><br><span class="line">[mysqld_safe]</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">nice            = 0</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">lower_case_table_names = 1</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">port            = 3306</span><br><span class="line">basedir         = /usr</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">tmpdir          = /tmp</span><br><span class="line">lc_messages_dir = /usr/share/mysql</span><br><span class="line">lc_messages     = en_US</span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">max_connections         = 1000</span><br><span class="line">connect_timeout         = 5</span><br><span class="line">wait_timeout            = 600</span><br><span class="line">max_allowed_packet      = 16M</span><br><span class="line">thread_cache_size       = 128</span><br><span class="line">sort_buffer_size        = 4M</span><br><span class="line">bulk_insert_buffer_size = 16M</span><br><span class="line">tmp_table_size          = 32M</span><br><span class="line">max_heap_table_size     = 32M</span><br><span class="line"></span><br><span class="line"># This replaces the startup script and checks MyISAM tables if needed</span><br><span class="line"># the first time they are touched. On error, make copy and try a repair.</span><br><span class="line">myisam_recover_options = BACKUP</span><br><span class="line">key_buffer_size         = 128M</span><br><span class="line">#open-files-limit       = 2000</span><br><span class="line">table_open_cache        = 400</span><br><span class="line">myisam_sort_buffer_size = 512M</span><br><span class="line">concurrent_insert       = 2</span><br><span class="line">read_buffer_size        = 2M</span><br><span class="line">read_rnd_buffer_size    = 1M</span><br><span class="line"></span><br><span class="line">query_cache_limit               = 128K</span><br><span class="line">query_cache_size                = 64M</span><br><span class="line"></span><br><span class="line">slow_query_log_file     = /var/log/mysql/mariadb-slow.log</span><br><span class="line">long_query_time = 10</span><br><span class="line">#log_slow_rate_limit    = 1000</span><br><span class="line">#log_slow_verbosity     = query_plan</span><br><span class="line"></span><br><span class="line">#sync_binlog            = 1</span><br><span class="line">expire_logs_days        = 10</span><br><span class="line">max_binlog_size         = 100M</span><br><span class="line"></span><br><span class="line"># InnoDB is enabled by default with a 10MB datafile in /var/lib/mysql/.</span><br><span class="line"># Read the manual for more InnoDB related options. There are many!</span><br><span class="line">default_storage_engine  = InnoDB</span><br><span class="line"># you can&apos;t just change log file size, requires special procedure</span><br><span class="line">#innodb_log_file_size   = 50M</span><br><span class="line">innodb_buffer_pool_size = 256M</span><br><span class="line">innodb_log_buffer_size  = 8M</span><br><span class="line">innodb_file_per_table   = 1</span><br><span class="line">innodb_open_files       = 400</span><br><span class="line">innodb_io_capacity      = 400</span><br><span class="line">innodb_flush_method     = O_DIRECT</span><br><span class="line"></span><br><span class="line">[galera]</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">quote-names</span><br><span class="line">max_allowed_packet      = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line"></span><br><span class="line">[isamchk]</span><br><span class="line">key_buffer              = 16M</span><br><span class="line"></span><br><span class="line">!include /etc/mysql/mariadb.cnf</span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure><p>保存后启动镜像: <code>docker-compose up -d</code></p><p>启动成功后可进入镜像查看myql运行情况<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入镜像</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mariadb /bin/bash</span><br><span class="line"><span class="comment"># 登录mariadb</span></span><br><span class="line">&gt; mysql -uroot -p123456</span><br><span class="line"><span class="comment"># 查看编码</span></span><br><span class="line">&gt; show variables like <span class="string">'%character%'</span></span><br></pre></td></tr></table></figure></p><p>创建数据库时指定编码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE  `user` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建&lt;code&gt;docker-compose.yml&lt;/code&gt;文件&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="docker-compose" scheme="https://huleski.github.io/categories/docker-compose/"/>
    
    
      <category term="docker-compose" scheme="https://huleski.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像的导入导出</title>
    <link href="https://huleski.github.io/2021/03/12/docker%E9%95%9C%E5%83%8F%E7%9A%84%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>https://huleski.github.io/2021/03/12/docker镜像的导入导出/</id>
    <published>2021-03-12T03:07:27.000Z</published>
    <updated>2021-03-12T11:12:40.488Z</updated>
    
    <content type="html"><![CDATA[<p>docker镜像导入导出的主要命令: export、import、save、load</p><h2 id="save命令"><a href="#save命令" class="headerlink" title="save命令"></a>save命令</h2><blockquote><p>docker save [options] images [images…]</p></blockquote><p>示例 docker save -o nginx.tar nginx:latest</p><p>或 docker save &gt; nginx.tar nginx:latest</p><p>其中-o和&gt;表示输出到文件，nginx.tar为目标文件，nginx:latest是源镜像名（name:tag）</p><h2 id="load命令"><a href="#load命令" class="headerlink" title="load命令"></a>load命令</h2><blockquote><p>docker load [options]</p></blockquote><p>示例 docker load -i nginx.tar</p><p>或 docker load &lt; nginx.tar</p><p>其中-i和&lt;表示从文件输入。会成功导入镜像及相关元数据，包括tag信息</p><h2 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h2><blockquote><p>docker export [options] container</p></blockquote><p>示例 docker export -o nginx-test.tar nginx-test</p><p>其中-o表示输出到文件，nginx-test.tar为目标文件，nginx-test是源容器名（name）</p><h2 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h2><blockquote><p>docker import [options] file|URL|- [REPOSITORY[:TAG]]</p></blockquote><p>示例 docker import nginx-test.tar nginx:imp</p><p>或 cat nginx-test.tar | docker import - nginx:imp</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别 "></a>区别 </h2><p>export命令导出的tar文件略小于save命令导出的</p><p>export命令是从容器（container）中导出tar文件，而save命令则是从镜像（images）中导出</p><p>基于第二点，export导出的文件再import回去时，无法保留镜像所有历史（即每一层layer信息，不熟悉的可以去看Dockerfile），不能进行回滚操作；而save是依据镜像来的，所以导入时可以完整保留下每一层layer信息。</p><blockquote><p>若是只想备份images，使用save、load即可</p><p>若是在启动容器后，容器内容有变化，需要备份，则使用export、import</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;docker镜像导入导出的主要命令: export、import、save、load&lt;/p&gt;
&lt;h2 id=&quot;save命令&quot;&gt;&lt;a href=&quot;#save命令&quot; class=&quot;headerlink&quot; title=&quot;save命令&quot;&gt;&lt;/a&gt;save命令&lt;/h2&gt;&lt;blockq
      
    
    </summary>
    
      <category term="docker" scheme="https://huleski.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基本命令</title>
    <link href="https://huleski.github.io/2021/03/12/Hexo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://huleski.github.io/2021/03/12/Hexo基本命令/</id>
    <published>2021-03-12T02:56:05.000Z</published>
    <updated>2021-12-16T03:46:20.603Z</updated>
    
    <content type="html"><![CDATA[<pre><code>由于不是经常使用hexo写笔记, 偶尔会有忘记的时候, 所以就记下来常用的基本命令</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新文件</span></span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"><span class="comment"># 生成文件并部署</span></span><br><span class="line">$ hexo g -d</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>预知详情如何, 请看 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官网文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;由于不是经常使用hexo写笔记, 偶尔会有忘记的时候, 所以就记下来常用的基本命令
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
      <category term="Hexo" scheme="https://huleski.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://huleski.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker安装rabbitmq</title>
    <link href="https://huleski.github.io/2020/10/12/docker%E5%AE%89%E8%A3%85rabbitmq/"/>
    <id>https://huleski.github.io/2020/10/12/docker安装rabbitmq/</id>
    <published>2020-10-12T08:00:07.000Z</published>
    <updated>2020-11-25T10:52:27.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>进入<a href="https://hub.docker.com/" target="_blank" rel="noopener">docker hub官方镜像仓库</a></p><p>搜索rabbitMq，进入官方的镜像，可以看到以下几种类型的镜像；我们选择带有“mangement”的版本（包含web管理页面）</p><p>编写docker-compose文件 docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">rabbitmq:management-alpine:3.8.9</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_USER=root</span> </span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span> </span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>启动容器(在<code>docker-compose.yml</code>文件同级目录执行)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>启动rabbitmq_management</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbit rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p>现在已经启动完成了, 浏览器打开web管理端：<a href="http://ip:15672" target="_blank" rel="noopener">http://ip:15672</a></p><p>输入前面docker-compose里面设置的用户名密码登录即可</p><p>官方安装的默认是不带延迟队列插件的, 需要自己安装</p><h2 id="docker构建延迟队列插件rabbitmq"><a href="#docker构建延迟队列插件rabbitmq" class="headerlink" title="docker构建延迟队列插件rabbitmq"></a>docker构建延迟队列插件rabbitmq</h2><p>前面已经下载好镜像了, 另外需要下载插件</p><p>官方插件下载地址：<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/" target="_blank" rel="noopener">github下载</a>, 选择对应版本, 这里我们同样选3.8.9版本下载, 放到服务器上</p><p>创建DockerFile文件(在插件同级目录, 插件名为<code>rabbitmq_delayed_message_exchange-3.8.9.ez</code>), 内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM rabbitmq:3-management</span><br><span class="line">COPY [<span class="string">"rabbitmq_delayed_message_exchange-3.8.9.ez"</span> , <span class="string">"/plugins/"</span>]</span><br><span class="line">RUN rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_delayed_message_exchange rabbitmq_management</span><br></pre></td></tr></table></figure><p>开始打包构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t holeski/rabbitmq-delay:3.8.9 .</span><br></pre></td></tr></table></figure><p>修改<code>docker-compose.yml</code>文件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">holeski/rabbitmq-delay:3.8.9</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_USER=root</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_PASS=123456</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/middleware/rabbitmq/data:/var/lib/rabbitmq</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>现在可以一个命令启动就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>镜像已上传到dockerhub, 可以直接拉取使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull holeski/rabbitmq-delay:3.8.9</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h2&gt;&lt;p&gt;进入&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="docker" scheme="https://huleski.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://huleski.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>java 8 本新特性</title>
    <link href="https://huleski.github.io/2019/11/12/java%208%20%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://huleski.github.io/2019/11/12/java 8 新特性/</id>
    <published>2019-11-12T12:17:25.000Z</published>
    <updated>2021-06-01T06:51:23.186Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="noopener">官网介绍</a></p><p>参考: <a href="https://www.jianshu.com/p/5b800057f2d8" target="_blank" rel="noopener">【译】Java 8的新特性—终极版</a></p><ul><li><h1 id="Lambda-表达式-和-函数式接口-−-Lambda-允许把函数作为一个方法的参数（函数作为参数传递到方法中）。"><a href="#Lambda-表达式-和-函数式接口-−-Lambda-允许把函数作为一个方法的参数（函数作为参数传递到方法中）。" class="headerlink" title="Lambda 表达式 和 函数式接口 − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。"></a>Lambda 表达式 和 函数式接口 − Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。</h1></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// Function&lt;T, R&gt; -T作为输入， 返回的R作为输出</span><br><span class="line">Function&lt;String,String&gt; fun = (x) -&gt; &#123;System.out.print(x+&quot;: &quot;);return &quot;Function&quot;;&#125;;</span><br><span class="line">System.out.println(function.apply(&quot;hello world&quot;));</span><br><span class="line"></span><br><span class="line">//Predicate&lt;T&gt; -T作为输入， 返回的boolean值作为输出</span><br><span class="line">Predicate&lt;String&gt; pre = (x) -&gt;&#123;System.out.print(x);return false;&#125;;</span><br><span class="line">System.out.println(&quot;: &quot;+pre.test(&quot;hello World&quot;));</span><br><span class="line"></span><br><span class="line">//Consumer&lt;T&gt; - T作为输入， 执行某种动作但没有返回值</span><br><span class="line">Consumer&lt;String&gt; con = (x) -&gt; &#123;System.out.println(x);&#125;;</span><br><span class="line">con.accept(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">//Supplier&lt;T&gt; - 没有任何输入， 返回T</span><br><span class="line">Supplier&lt;String&gt; supp = () -&gt; &#123;return &quot;Supplier&quot;;&#125;;</span><br><span class="line">System.out.println(supp.get());</span><br><span class="line"></span><br><span class="line">//BinaryOperator&lt;T&gt; -两个T作为输入， 返回一个T作为输出， 对于“reduce”操作很有用</span><br><span class="line">BinaryOperator&lt;String&gt; bina = (x,y) -&gt;&#123;System.out.print(x+&quot; &quot;+y);return &quot;Binary Operator&quot;;&#125;;</span><br><span class="line">System.out.println(&quot; &quot;+bina.apply(&quot;hello &quot;,&quot;world&quot;))</span><br></pre></td></tr></table></figure><ul><li><p>方法引用 − 方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。</p></li><li><p>默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。</p></li><li><p>应用范围扩大的注解, 可以重复注解, 更好的类型推断</p></li><li><p>新工具 − 新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。</p></li><li><p>Stream API −新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。</p></li></ul><p>流的特点</p><hr><ol><li><p>只能遍历一次</p><p>我们可以把流想象成一条流水线， 流水线的源头是我们的数据源(一个集合)， 数据源中的元素依次被输送到流水线上， 我们可以在流水线上对元素进行各种操作。</p></li></ol><p>一旦元素走到了流水线的另一头， 那么这些元素就被“消费掉了” ， 我们无法再对这个流进行操作。 当然，<br>我们可以从数据源那里再获得一个新的流重新遍历一遍。</p><ol start="2"><li>采用内部迭代方式</li></ol><p>若要对集合进行处理， 则需我们手写处理代码， 这就叫做外部迭代。</p><p>而要对流进行处理， 我们只需告诉流我们需要什么结果， 处理过程由流自行完成， 这就称为内部迭代。</p><p>流的操作种类</p><hr><p>流的操作分为两种， 分别为中间操作和终端操作。</p><ol><li>中间操作</li></ol><p>当数据源中的数据上了流水线后， 这个过程对数据进行的所有操作都称为“中间操作” 。<br>中间操作仍然会返回一个流对象， 因此多个中间操作可以串连起来形成一个流水线。</p><ol start="2"><li>终端操作</li></ol><p>当所有的中间操作完成后， 若要将数据从流水线上拿下来， 则需要执行终端操作。<br>终端操作将返回一个执行结果， 这就是你想要的数据</p><p>List 转 Stream</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 转stream</span><br><span class="line">list.stream()</span><br><span class="line">// 并发处理</span><br><span class="line">list.parallelStream()</span><br></pre></td></tr></table></figure><p>filter（ 过滤）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate);</span><br></pre></td></tr></table></figure><p>map（ 元素转换）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</span><br><span class="line">IntStream mapToInt(ToIntFunction&lt;? super T&gt; mapper);</span><br><span class="line">LongStream mapToLong(ToLongFunction&lt;? super T&gt; mapper);</span><br><span class="line">DoubleStream mapToDouble(ToDoubleFunction&lt;? super T&gt; mapper);</span><br></pre></td></tr></table></figure><p>flatMap（ 元素转换）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; Stream&lt;R&gt; flatMap(Function&lt;? super T, ? extends Stream&lt;? extends R&gt;&gt; mapper); IntStream flatMapToInt(Function&lt;? super T, ? extends IntStream&gt; mapper);</span><br><span class="line">LongStream flatMapToLong(Function&lt;? super T, ? extends LongStream&gt; mapper);</span><br><span class="line">DoubleStream flatMapToDouble(Function&lt;? super T, ? extends DoubleStream&gt; mapper);</span><br></pre></td></tr></table></figure><p>distinct（ 去除重复， 对象需要重写 equals、 hashCode）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; distinct();</span><br></pre></td></tr></table></figure><p>sorted（ 排序）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; sorted();</span><br><span class="line">Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator);</span><br></pre></td></tr></table></figure><p>peek（ 生成新的流： 流是单向的， 例如用于日志打印）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action);</span><br></pre></td></tr></table></figure><p>limit（ 取前面 n 个元素）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; limit(long maxSize);</span><br></pre></td></tr></table></figure><p>skip（ 跳过 n 个元素）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;T&gt; skip(long n);</span><br></pre></td></tr></table></figure><p>forEach（ 遍历）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void forEach(Consumer&lt;? super T&gt; action);</span><br><span class="line">void forEachOrdered(Consumer&lt;? super T&gt; action);</span><br></pre></td></tr></table></figure><p>toArray（ 转换成数组）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object[] toArray();</span><br><span class="line">&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator);</span><br></pre></td></tr></table></figure><p>reduce（ 结果归并）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T reduce(T identity, BinaryOperator&lt;T&gt; accumulator);</span><br><span class="line">Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator);</span><br><span class="line">&lt;U&gt; U reduce(U identity, </span><br><span class="line">            BiFunction&lt;U, ? super T, U&gt; accumulator,</span><br><span class="line">            BinaryOperator&lt;U&gt; combiner);</span><br></pre></td></tr></table></figure><p>collect（ 转换成集合）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; R collect(Supplier&lt;R&gt; supplier,</span><br><span class="line">                BiConsumer&lt;R, ? super T&gt; accumulator,</span><br><span class="line">                BiConsumer&lt;R, R&gt; combiner);</span><br><span class="line">&lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);</span><br></pre></td></tr></table></figure><p>转list</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 转list</span><br><span class="line">Collectors.toList();</span><br><span class="line">// 转set</span><br><span class="line">Collectors.toSet();</span><br><span class="line">// 转map</span><br><span class="line">List&lt;TestVo&gt; testList = new ArrayList&lt;&gt;(10);</span><br><span class="line">Map&lt;Long, TestVo&gt; data = releaseList.stream()</span><br><span class="line">            .collect(Collectors.toMap(TestVo::getId, x -&gt; x));</span><br></pre></td></tr></table></figure><p>count（ 计数）</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long count();</span><br></pre></td></tr></table></figure><p>查找</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">boolean anyMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class="line">boolean allMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class="line">boolean noneMatch(Predicate&lt;? super T&gt; predicate);</span><br><span class="line">Optional&lt;T&gt; findFirst();</span><br><span class="line">Optional&lt;T&gt; findAny();</span><br></pre></td></tr></table></figure><ul><li>Date Time API − 加强对日期与时间的处理。</li></ul><p>时区类 java.time.ZoneId</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZoneId shanghaiZoneId = ZoneId.of(&quot;Asia/Shanghai&quot;);</span><br><span class="line">ZoneId systemZoneId = ZoneId.systemDefault();</span><br></pre></td></tr></table></figure><p>Instant类在Java日期与时间功能中， 表示了时间线上一个确切的点， 定义为距离初始时间的时间差</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 一个Instant对象里有两个域： 距离初始时间的秒钟数、 在当前一秒内的第几纳秒</span><br><span class="line">Instant now = Instant.now();</span><br><span class="line">long seconds = systemZoneId.getEpochSecond();</span><br><span class="line">int nanos = systemZoneId.getNano();</span><br><span class="line"></span><br><span class="line">// 计算</span><br><span class="line">Instant later = now.plusSeconds(3);</span><br><span class="line">Instant earlier = now.minusSeconds(3);</span><br></pre></td></tr></table></figure><p>Clock类提供了访问当前日期和时间的方法， Clock是时区敏感的</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 可以用来取代System.currentTimeMillis() 来获取当前的微秒数。</span><br><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line">long millis = clock.millis();</span><br><span class="line">Instant instant = clock.instant();</span><br><span class="line">Date legacyDate = Date.from(instant);</span><br></pre></td></tr></table></figure><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类， 它的日期是无时区属性的。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.now();</span><br><span class="line">LocalDate localDate2 = LocalDate.of(2018, 3, 3);</span><br><span class="line"></span><br><span class="line">// 可以用如下方法访问LocalDate中的日期信息</span><br><span class="line">int year = localDate.getYear();</span><br><span class="line">Month month = localDate.getMonth();</span><br><span class="line">int dayOfMonth = localDate.getDayOfMonth();</span><br><span class="line">int dayOfYear = localDate.getDayOfYear();</span><br><span class="line">DayOfWeek dayOfWeek = localDate.getDayOfWeek();</span><br><span class="line"></span><br><span class="line">// 计算</span><br><span class="line">LocalDate d1 = localDate.plusYears(3);</span><br><span class="line">LocalDate d2 = localDate.minusYears(3);</span><br></pre></td></tr></table></figure><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类， 它的时间是无时区属性的</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LocalTime localTime = LocalTime.now();</span><br><span class="line">LocalTime localTime2 = LocalTime.of(21, 30, 59, 11001);</span><br><span class="line">// 通过这些方法访问其时、 分、 秒、 纳秒</span><br><span class="line">getHour()</span><br><span class="line">getMinute()</span><br><span class="line">getSecond()</span><br><span class="line">getNano()</span><br><span class="line">// 计算</span><br><span class="line">LocalTime localTimeLater = localTime.plusHours(3);</span><br><span class="line">LocalTime localTimeEarlier = localTime.minusHours(3);</span><br></pre></td></tr></table></figure><p>LocalDateTime类是Java8中无时区的日期时间, 相当于LocalDate与LocalTime两个类的结合，使用方法也类似</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>ZonedDateTime类是Java 8中日期时间功能里， 用于表示带时区的日期与时间信息的类</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ZonedDateTime dateTime = ZonedDateTime.now();</span><br><span class="line">ZoneId zoneId = ZoneId.of(&quot;UTC+1&quot;);</span><br><span class="line">ZonedDateTime dateTime2 = ZonedDateTime.of(2015, 11, 30, 23, 45, 59, 1234, zoneId);</span><br><span class="line"></span><br><span class="line">// 方法使用,计算同上</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>DateTimeFormatter类是Java 8中日期时间功能里， 用于解析和格式化日期时间的类</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 类中包含如下预定义的实例</span><br><span class="line">BASIC_ISO_DATE</span><br><span class="line">ISO_LOCAL_DATE</span><br><span class="line">ISO_LOCAL_TIME</span><br><span class="line">ISO_LOCAL_DATE_TIME</span><br><span class="line">······</span><br><span class="line"></span><br><span class="line">// 格式化为某种字符串</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.BASIC_ISO_DATE;</span><br><span class="line">String formattedDate = formatter.format(LocalDate.now());</span><br></pre></td></tr></table></figure><p>Duration对象表示两个Instant间的一段时间</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Instant first = Instant.now();</span><br><span class="line">// wait some time while something happens</span><br><span class="line">Instant second = Instant.now();</span><br><span class="line">Duration duration = Duration.between(first, second);</span><br><span class="line"></span><br><span class="line">// 一个Duration对象里有两个域： 纳秒值（ 小于一秒的部分） ， 秒钟值（ 一共有几秒） </span><br><span class="line">long seconds = getSeconds()</span><br><span class="line">int nanos = getNano()</span><br><span class="line"></span><br><span class="line">// 转换</span><br><span class="line">long days = duration.toDays(); // 这段时间的总天数</span><br><span class="line">long hours = duration.toHours(); // 这段时间的小时数</span><br><span class="line">long minutes = duration.toMinutes(); // 这段时间的分钟数</span><br><span class="line">long seconds = duration.getSeconds(); // 这段时间的秒数</span><br><span class="line"></span><br><span class="line">// 计算</span><br><span class="line">Duration start = ... //obtain a start duration</span><br><span class="line">Duration added = start.plusDays(3);</span><br><span class="line">Duration subtracted = start.minusDays(3)</span><br></pre></td></tr></table></figure><p>TemporalAdjuster类可以更方便的调整时间<br>————————————————————————————</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">// 返回下一个距离当前时间最近的星期六</span><br><span class="line">LocalDateTime dateTime1 = localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SATURDAY));</span><br><span class="line">//  返回本月最后一个星期五</span><br><span class="line">LocalDateTime dateTime2 = localDateTime.with(TemporalAdjusters.lastInMonth(DayOfWeek.FRIDAY));</span><br></pre></td></tr></table></figure><ul><li>Optional 类 − Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 参数不能是null</span><br><span class="line">Optional optional1 = Optional.of(1);</span><br><span class="line">// 参数可以是null</span><br><span class="line">Optional optional2 = Optional.ofNullable(null);</span><br><span class="line">// 参数可以是非null</span><br><span class="line">Optional optional3 = Optional.ofNullable(2);</span><br><span class="line"></span><br><span class="line">// isPresent判断值是否存在</span><br><span class="line">System.out.println(optional1.isPresent() == true);</span><br><span class="line">System.out.println(optional2.isPresent() == false);</span><br><span class="line"></span><br><span class="line">// orElse</span><br><span class="line">System.out.println(optional1.orElse(1000) == 1);// true</span><br><span class="line">System.out.println(optional2.orElse(1000) == 1000);// true</span><br></pre></td></tr></table></figure><ul><li><p>Nashorn, JavaScript 引擎 − Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p></li><li><p>JVM的新特性 - 使用Metaspace（JEP 122）代替持久代（PermGen space）。在JVM参数方面，使用-XX:MetaSpaceSize和-XX:MaxMetaspaceSize代替原来的-XX:PermSize和-XX:MaxPermSize。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考: &lt;a h
      
    
    </summary>
    
      <category term="java" scheme="https://huleski.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://huleski.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>nginx设置反向代理访问pixiv图片</title>
    <link href="https://huleski.github.io/2019/10/17/nginx%E8%AE%BE%E7%BD%AE%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEpixiv%E5%9B%BE%E7%89%87/"/>
    <id>https://huleski.github.io/2019/10/17/nginx设置反向代理访问pixiv图片/</id>
    <published>2019-10-17T11:53:19.000Z</published>
    <updated>2019-10-17T12:47:00.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>正常情况下, pixiv 的图片服务器域名为 <code>i.pximg.net</code>，因为有防盗链保护，只要 <code>Referer</code> 是空值或不是來自 pixiv 的域名就会返回<code>403</code>。</p><p>使用nginx反向代理只需要將 <code>www.pixiv.net</code> 设置到 <code>Referer</code>中就可以直接访问图片了</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>例如在自己的电脑上安装好nginx后, 修改配置文件, 加上以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path D:\logs levels=1:2 keys_zone=pximg:10m max_size=10g inactive=7d use_temp_path=off;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_cache pximg;</span><br><span class="line">        proxy_pass https://i.pximg.net;</span><br><span class="line">        proxy_cache_revalidate on;</span><br><span class="line">        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;</span><br><span class="line">        proxy_cache_lock on;</span><br><span class="line">        add_header X-Cache-Status $upstream_cache_status;</span><br><span class="line">        proxy_set_header Host i.pximg.net;</span><br><span class="line">        proxy_set_header Referer &quot;https://www.pixiv.net/&quot;;</span><br><span class="line">        proxy_set_header User-Agent &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36&quot;;</span><br><span class="line"></span><br><span class="line">        proxy_cache_valid 200 7d;</span><br><span class="line">        proxy_cache_valid 404 5m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完后重启nginx, 随便访问一张pixiv图片, 只需把<code>https</code>换成<code>http</code>, 并且把<code>i.pximg.net</code>域名换成<code>localhost</code>即可, 例如: </p><ul><li>pixiv网站上原始链接 (直接访问会返回403): <a href="https://i.pximg.net/img-original/img/2017/12/20/00/12/19/66360679_p0.png" target="_blank" rel="noopener">https://i.pximg.net/img-original/img/2017/12/20/00/12/19/66360679_p0.png</a></li><li>经过我们的nginx反向代理 (可以正常访问)：<a href="http://localhost/img-original/img/2017/12/20/00/12/19/66360679_p0.png" target="_blank" rel="noopener">http://localhost/img-original/img/2017/12/20/00/12/19/66360679_p0.png</a></li></ul><p>这样我们就能绕过pixiv的防盗链从而直接访问pixiv图片了, 其实网上有一个公开的pixiv反向代理域名<code>i.pixiv.cat</code>, 在访问pixiv图片时, 只需将<code>i.pximg.net</code> 更換成 <code>i.pixiv.cat</code> 就可以使用</p><style>table th:first-of-type {    width: 50%;}</style><table><thead><tr><th>直接访问图片</th><th>反向代理访问图片</th></tr></thead><tbody><tr><td><img src="https://i.pximg.net/img-original/img/2017/12/20/00/12/19/66360679_p0.png" alt="直接访问"></td><td><img src="https://i.pixiv.cat/img-original/img/2017/12/20/00/12/19/66360679_p0.png" alt="反向代理访问"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反向代理&quot;&gt;&lt;a href=&quot;#反向代理&quot; class=&quot;headerlink&quot; title=&quot;反向代理&quot;&gt;&lt;/a&gt;反向代理&lt;/h2&gt;&lt;p&gt;正常情况下, pixiv 的图片服务器域名为 &lt;code&gt;i.pximg.net&lt;/code&gt;，因为有防盗链保护，只要 &lt;c
      
    
    </summary>
    
      <category term="nginx" scheme="https://huleski.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://huleski.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux设置闹钟定时播放一首歌</title>
    <link href="https://huleski.github.io/2019/10/08/Linux%E8%AE%BE%E7%BD%AE%E9%97%B9%E9%92%9F%E5%AE%9A%E6%97%B6%E6%92%AD%E6%94%BE%E4%B8%80%E9%A6%96%E6%AD%8C/"/>
    <id>https://huleski.github.io/2019/10/08/Linux设置闹钟定时播放一首歌/</id>
    <published>2019-10-08T03:03:47.000Z</published>
    <updated>2019-10-11T12:32:27.022Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行播放音乐"><a href="#命令行播放音乐" class="headerlink" title="命令行播放音乐"></a>命令行播放音乐</h2><p>现在听歌都是播放mp3文件, 一些Linux系统没有提供对mp3的支持, 需要安装一些软件, 这里我选audacious, 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y audacious</span><br></pre></td></tr></table></figure><p>命令行输入: <code>audacious</code>就可以弹出一个音乐播放窗口, 然后在窗口中操作播放音乐</p><p>也可以命令行播放某个mp3文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">audacious -Hq /usr/<span class="built_in">local</span>/src/inspire.mp3</span><br></pre></td></tr></table></figure><p>将上面的播放命令写到<code>/usr/local/src/play.sh</code>脚本中, 后面会用到</p><h2 id="cron介绍"><a href="#cron介绍" class="headerlink" title="cron介绍"></a>cron介绍</h2><p>linux内置的cron进程能帮我们实现这些需求，cron搭配shell脚本，非常复杂的指令也没有问题。</p><p>我们经常使用的是crontab命令是cron table的简写，它是cron的配置文件，也可以叫它作业列表，我们可以在以下文件夹内找到相关配置文件。</p><ul><li>/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</li><li>/etc/crontab 这个文件负责调度各种管理和维护任务。</li><li>/etc/cron.d/ 这个目录用来存放任何要执行的crontab文件或脚本。</li><li>我们还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。</li></ul><p>crontab的常用的命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u username]　　　　//省略用户表表示操作当前用户的crontab</span><br><span class="line">    -e      (编辑工作表)</span><br><span class="line">    -l      (列出工作表里的命令)</span><br><span class="line">    -r      (删除工作作)</span><br></pre></td></tr></table></figure><p>我们用crontab -e进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令。</p><p>crontab的命令构成为 时间+动作，其时间有分、时、日、月、周五种，操作符有:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 取值范围内的所有数字</span><br><span class="line">/ 每过多少个数字</span><br><span class="line">- 从X到Z</span><br><span class="line">，散列数字</span><br></pre></td></tr></table></figure><p>加入一条命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个工作日中午12点执行一次播放音乐脚本</span></span><br><span class="line">0 12 * * 1,2,3,4,5 /usr/<span class="built_in">local</span>/src/play.sh</span><br></pre></td></tr></table></figure><p>闹钟就设定好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令行播放音乐&quot;&gt;&lt;a href=&quot;#命令行播放音乐&quot; class=&quot;headerlink&quot; title=&quot;命令行播放音乐&quot;&gt;&lt;/a&gt;命令行播放音乐&lt;/h2&gt;&lt;p&gt;现在听歌都是播放mp3文件, 一些Linux系统没有提供对mp3的支持, 需要安装一些软件, 这里我
      
    
    </summary>
    
      <category term="Linux" scheme="https://huleski.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://huleski.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装最新版git</title>
    <link href="https://huleski.github.io/2019/09/19/CentOS7%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88git/"/>
    <id>https://huleski.github.io/2019/09/19/CentOS7安装最新版git/</id>
    <published>2019-09-19T09:48:14.000Z</published>
    <updated>2019-09-19T10:03:54.189Z</updated>
    
    <content type="html"><![CDATA[<p>一般新装的linux会自带低版本的git, 如果需要安装新版git, 需要下载源码安装</p><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>可以从<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">github</a> 或者 <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">镜像站</a>下载源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/git/git/archive/v2.22.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载旧版本git</span></span><br><span class="line">yum remove -y git</span><br><span class="line"><span class="comment"># 依赖库安装</span></span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class="line"><span class="comment"># 解压gz源码压缩包</span></span><br><span class="line">tar -xzf git-2.22.0.tar.gz</span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> git-2.22.0</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git all</span><br><span class="line">make prefix=/usr/<span class="built_in">local</span>/git install</span><br><span class="line"><span class="comment"># 添加到环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin"</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><p>安装完成!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般新装的linux会自带低版本的git, 如果需要安装新版git, 需要下载源码安装&lt;/p&gt;
&lt;h2 id=&quot;下载源码&quot;&gt;&lt;a href=&quot;#下载源码&quot; class=&quot;headerlink&quot; title=&quot;下载源码&quot;&gt;&lt;/a&gt;下载源码&lt;/h2&gt;&lt;p&gt;可以从&lt;a href=
      
    
    </summary>
    
      <category term="categories" scheme="https://huleski.github.io/categories/categories/"/>
    
    
      <category term="tag" scheme="https://huleski.github.io/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>Springboot解决跨域</title>
    <link href="https://huleski.github.io/2019/09/07/Springboot%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F/"/>
    <id>https://huleski.github.io/2019/09/07/Springboot解决跨域/</id>
    <published>2019-09-07T06:28:47.000Z</published>
    <updated>2019-09-07T07:33:08.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域访问概念"><a href="#跨域访问概念" class="headerlink" title="跨域访问概念"></a>跨域访问概念</h2><blockquote><p>CORS（Cross Origin Resource Sharing）跨域资源共享：表示 JavaScript 代码所在的机器和后端 api 所在的机器不是同一台的情况下实现资源访问。</p></blockquote><p>广义的跨域</p><blockquote><p>资源跳转： A链接、重定向、表单提交</p><p>资源嵌入： <code>&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;</code>等dom标签</p><p>脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</p></blockquote><p>在前后端分离的项目中，前端一般是 SPA （Single Page Application）类型的应用，所有的 JavaScript 代码都会“下载”到用户机器的浏览器中，后端 api 在服务器端以单个机器或者集群的形式存在。</p><p>同源策略</p><blockquote><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p></blockquote><h2 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h2><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://www.domain.com/b.js" target="_blank" rel="noopener">http://www.domain.com/b.js</a><br><a href="http://www.domain.com/lab/c.js" target="_blank" rel="noopener">http://www.domain.com/lab/c.js</a></td><td>同一域名，不同文件或路径</td><td>允许</td></tr><tr><td><a href="http://www.domain.com:8000/a.js" target="_blank" rel="noopener">http://www.domain.com:8000/a.js</a><br><a href="http://www.domain.com/b.js" target="_blank" rel="noopener">http://www.domain.com/b.js</a></td><td>同一域名，不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="https://www.domain.com/b.js" target="_blank" rel="noopener">https://www.domain.com/b.js</a></td><td>同一域名，不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://192.168.4.12/b.js" target="_blank" rel="noopener">http://192.168.4.12/b.js</a></td><td>域名和域名对应相同ip</td><td>不允许</td></tr><tr><td><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://x.domain.com/b.js" target="_blank" rel="noopener">http://x.domain.com/b.js</a><br><a href="http://domain.com/c.js" target="_blank" rel="noopener">http://domain.com/c.js</a></td><td>主域相同，子域不同</td><td>不允许</td></tr><tr><td><a href="http://www.domain1.com/a.js" target="_blank" rel="noopener">http://www.domain1.com/a.js</a><br><a href="http://www.domain2.com/b.js" target="_blank" rel="noopener">http://www.domain2.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、 通过jsonp跨域</span><br><span class="line">2、 document.domain + iframe跨域</span><br><span class="line">3、 location.hash + iframe</span><br><span class="line">4、 window.name + iframe跨域</span><br><span class="line">5、 postMessage跨域</span><br><span class="line">6、 跨域资源共享（CORS）</span><br><span class="line">7、 nginx代理跨域</span><br><span class="line">8、 nodejs中间件代理跨域</span><br><span class="line">9、 WebSocket协议跨域</span><br></pre></td></tr></table></figure><ol><li>通过jsonp跨域</li></ol><p>jquery ajax:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://www.domain2.com:8080/login'</span>,</span><br><span class="line">    type: <span class="string">'get'</span>,</span><br><span class="line">    dataType: <span class="string">'jsonp'</span>,  <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">    jsonpCallback: <span class="string">"handleCallback"</span>,    <span class="comment">// 自定义回调函数名</span></span><br><span class="line">    data: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>vue.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(<span class="string">'http://www.domain2.com:8080/login'</span>, &#123;</span><br><span class="line">    params: &#123;&#125;,</span><br><span class="line">    jsonp: <span class="string">'handleCallback'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>jsonp缺点：只能实现get一种请求。</p><ol start="2"><li>跨域资源共享（CORS）</li></ol><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p><p>原生ajax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端设置</span></span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>jquery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    ...</span><br><span class="line">   xhrFields: &#123;</span><br><span class="line">       withCredentials: <span class="literal">true</span>    <span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">   &#125;,</span><br><span class="line">   crossDomain: <span class="literal">true</span>,   <span class="comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span></span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>axios</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.withCredentials = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>java后台设置 (springboot)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持跨域请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Holeski</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/8/28 9:48</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx反向代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#proxy服务器</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  www.domain1.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   http://www.domain2.com:8080;  <span class="comment">#反向代理</span></span><br><span class="line">        proxy_cookie_domain www.domain2.com www.domain1.com; <span class="comment">#修改cookie里域名</span></span><br><span class="line">        index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#当前端只跨域不带cookie时，可以为 *</span></span><br><span class="line">        add_header Access-Control-Allow-Origin http://www.domain1.com;  </span><br><span class="line">        add_header Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到一个非常奇怪的bug是, 在本地按照springboot的方式设置好了, 调试也没问题, 打好jar包放到服务器上就跨域失败, 后来捣鼓了一天找到一个方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.dispatch-options-request=true</span><br></pre></td></tr></table></figure><p>设置完就好了, 可是查看源码发现他的默认值就是<code>true</code>。。。。。。后面有时间再仔细看看这个问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;跨域访问概念&quot;&gt;&lt;a href=&quot;#跨域访问概念&quot; class=&quot;headerlink&quot; title=&quot;跨域访问概念&quot;&gt;&lt;/a&gt;跨域访问概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CORS（Cross Origin Resource Sharing）跨域资源共享
      
    
    </summary>
    
      <category term="Springboot" scheme="https://huleski.github.io/categories/Springboot/"/>
    
    
      <category term="Springboot" scheme="https://huleski.github.io/tags/Springboot/"/>
    
      <category term="跨域" scheme="https://huleski.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7搭建api文档管理工具--YApi</title>
    <link href="https://huleski.github.io/2019/07/29/CentOS7%E6%90%AD%E5%BB%BAapi%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-YApi/"/>
    <id>https://huleski.github.io/2019/07/29/CentOS7搭建api文档管理工具-YApi/</id>
    <published>2019-07-29T12:35:59.000Z</published>
    <updated>2019-09-30T02:50:51.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="YApi简介"><a href="#YApi简介" class="headerlink" title="YApi简介"></a><a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener">YApi</a>简介</h2><blockquote><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。</p></blockquote><p>国内几大互联网公司都在用的本地api文档管理工具</p><p>环境要求:</p><ul><li>nodejs（7.6+)</li><li>mongodb（2.6+）</li><li>git</li></ul><h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>下载nodejs并解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.gz</span><br><span class="line">tar -zxf node-v10.16.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### nodejs environment</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/data/cordova/node-v10.16.0-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检查node版本命令: <code>node -v</code></p><p>检查npm 版本命令: <code>npm -v</code></p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><p>新建一个文件 <code>/etc/yum.repos.d/mongodb-org-4.0.repo</code> 并加入以下内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-4.0]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/<span class="variable">$releasever</span>/mongodb-org/4.0/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 开始安装</span></span><br><span class="line">sudo yum install -y mongodb-org</span><br><span class="line"><span class="comment">## 启动mongo</span></span><br><span class="line">systemctl start mongod</span><br><span class="line"><span class="comment">## 查看版本</span></span><br><span class="line">mongo --version</span><br></pre></td></tr></table></figure><p>修改mongo的配置文件能够远程访问:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="comment"># 将下面127.0.0.1换成 0.0.0.0就可以远程访问mongodb了</span></span><br><span class="line"><span class="attr">  bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h2 id="全局安装yapi-cli并启动安装程序"><a href="#全局安装yapi-cli并启动安装程序" class="headerlink" title="全局安装yapi-cli并启动安装程序"></a>全局安装yapi-cli并启动安装程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 启动api安装程序</span></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure><p>浏览器访问: <a href="http://ip:9090" target="_blank" rel="noopener">http://ip:9090</a>, 选择好配置, 点击部署</p><p>如果中途报错: <code>generated/aesprim-browser.js: Permission denied</code>则执行以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> user 0 </span><br><span class="line">npm config <span class="built_in">set</span> unsafe-perm <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>安装成功会提示: <code>切换到部署目录输入：node vendors/server/app.js</code>, 按照提示去部署目录启动, 再去浏览器访问部署地址就完成了。可是一关闭shell终端yapi会停止运行</p><p>所以我们需要使用pm2来保证进程永远都活着</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pm2</span></span><br><span class="line">npm install pm2 -g</span><br><span class="line"><span class="comment"># pm2启动项目</span></span><br><span class="line">pm2 start vendors/server/app.js --name YApi</span><br><span class="line"><span class="comment"># 显示所有进程状态</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment"># 停止指定的进程</span></span><br><span class="line">pm2 stop 0</span><br><span class="line"><span class="comment"># 杀死指定的进程</span></span><br><span class="line">pm2 delete 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># pm2开机自启动项目 (在此之前先启动项目)</span></span><br><span class="line">pm2 save   <span class="comment"># 保存当前状态</span></span><br><span class="line">pm2 startup   <span class="comment"># 开启自启动</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用开机自启动</span></span><br><span class="line">pm2 unstartup</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;YApi简介&quot;&gt;&lt;a href=&quot;#YApi简介&quot; class=&quot;headerlink&quot; title=&quot;YApi简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/YMFE/yapi&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="YApi" scheme="https://huleski.github.io/categories/YApi/"/>
    
    
      <category term="YApi" scheme="https://huleski.github.io/tags/YApi/"/>
    
  </entry>
  
  <entry>
    <title>cordova入门教程</title>
    <link href="https://huleski.github.io/2019/07/29/cordova%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://huleski.github.io/2019/07/29/cordova入门教程/</id>
    <published>2019-07-29T01:33:23.000Z</published>
    <updated>2020-05-11T07:08:37.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介-Cordova官网-Cordova中文网"><a href="#简介-Cordova官网-Cordova中文网" class="headerlink" title="简介 ( Cordova官网/Cordova中文网)"></a>简介 ( <a href="https://cordova.apache.org/" target="_blank" rel="noopener">Cordova官网</a>/<a href="https://cordova.axuer.com/" target="_blank" rel="noopener">Cordova中文网</a>)</h2><blockquote><p>Apache Cordova是一个开源的移动开发框架。允许你用标准的web技术-HTML5,CSS3和JavaScript做跨平台开发。 应用在每个平台的具体执行被封装了起来，并依靠符合标准的API绑定去访问每个设备的功能，比如说：传感器、数据、网络状态等。</p></blockquote><p>简单来说 Cordova 就是一个能将<code>html/js/css</code>打包成各个平台应用功能的框架, 原理是他内置了一个浏览器, 然后把H5显示出来, 并能够打包成不同平台的App, 目前支持的平台有:</p><ul><li>Android</li><li>Blackberry 10</li><li>iOS</li><li>OS X</li><li>Ubuntu</li><li>Windows</li><li>WP8</li></ul><h2 id="安装环境-data-cordova目录下操作"><a href="#安装环境-data-cordova目录下操作" class="headerlink" title="安装环境 ( /data/cordova目录下操作 )"></a>安装环境 ( /data/cordova目录下操作 )</h2><h3 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1. 安装JDK"></a>1. 安装JDK</h3><p>下载<code>jdk-8u162-linux-x64.tar.gz</code> 并解压到当前目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf jdk-8u162-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 在最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####  Java environment  #####</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/data/cordova/jdk1.8.0_162</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span>  PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="2-安装Android-SDK"><a href="#2-安装Android-SDK" class="headerlink" title="2. 安装Android SDK"></a>2. 安装Android SDK</h3><p>下载 Android SDK并解压 (可以在<a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">这里</a>下载)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz</span><br><span class="line">tar -xzf android-sdk_r24.4.1-linux.tgz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 并在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#####  Android environment  #####</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/data/cordova/android-sdk-linux</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>其他可能用到的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 查看可用的组件:</span></span><br><span class="line">android list sdk --all</span><br><span class="line"><span class="comment">### 安装安卓依赖工具包</span></span><br><span class="line">android update sdk -u --all --filter 1,2,3,5,11,12,22,23,24,25,26,27,28,29,45,88,89</span><br></pre></td></tr></table></figure><h3 id="3-安装gradle"><a href="#3-安装gradle" class="headerlink" title="3. 安装gradle"></a>3. 安装gradle</h3><p>在 <code>https://gradle.org/releases/</code> 中复制对应版本gradle下载地址,在/data/cordova中下载并解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://services.gradle.org/distributions/gradle-3.3-bin...(替换为你复制的那个下载地址)</span><br><span class="line">unzip  gradle-3.3-linux.zip</span><br></pre></td></tr></table></figure><p>编辑配置: <code>vim /etc/profile</code> 在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### gradle environment</span></span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/data/cordova/gradle-3.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="4-安装node-js"><a href="#4-安装node-js" class="headerlink" title="4. 安装node.js"></a>4. 安装node.js</h3><p>下载nodejs并解压:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.gz</span><br><span class="line">tar -zxf node-v10.16.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><p>编辑配置文件 <code>vim /etc/profile</code> 在文件最后添加:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### nodejs environment</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/data/cordova/node-v10.16.0-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>使配置立即生效: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>检查node版本命令: <code>node -v</code><br>检查npm 版本命令: <code>npm -v</code></p><p>最后<code>/etc/profile</code>文件添加的配置为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Java environment</span></span><br><span class="line">JAVA_HOME=/data/gradle/jdk1.8.0_152</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment">### Nodejs environment</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/data/cordova/node-v8.9.4-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Android environment</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/data/cordova/android-sdk-linux</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/tools/bin"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### gradle environment</span></span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/data/cordova/gradle-3.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GRADLE_HOME</span>/bin</span><br></pre></td></tr></table></figure><h3 id="5-安装Cordova"><a href="#5-安装Cordova" class="headerlink" title="5. 安装Cordova"></a>5. 安装Cordova</h3><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="创建Cordova项目"><a href="#创建Cordova项目" class="headerlink" title="创建Cordova项目"></a>创建Cordova项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 可以指定应用ID和应用名: cordova create project_name app_id app_name</span></span><br><span class="line">cordova create hello</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进入项目路径</span></span><br><span class="line"><span class="built_in">cd</span> hello</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加Android平台</span></span><br><span class="line">cordova platform add android --save</span><br></pre></td></tr></table></figure><p>修改安卓平台构建文件的maven地址为阿里云镜像: <code>vim  platforms/android/build.gradle</code> (可以跳过, 如果构建失败再来配置)</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将buildscript和allprojects中repositories 的内容都替换成:</span></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">    google()</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">"http://maven.aliyun.com/nexus/content/groups/public/"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把写好的H5文件放入www文件夹下</p><p>自定义app logo和启动画面需要添加插件 (<a href="https://blog.csdn.net/lc_style/article/details/78401105" target="_blank" rel="noopener">参考文章</a>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-splashscreen</span><br></pre></td></tr></table></figure><p>打包安装App</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>若打包过程中下载依赖时timeout, 则需要番蔷</p><p>打包成功会出现 <code>BUILD SUCCESSFUL</code> , 打包后的文件为: <code>platforms/android/app/build/outputs/apk/debug/app-debug.apk</code></p><p>Cordova打包release版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 打包未签名的apk包</span></span><br><span class="line">cordova build android --release</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 生成秘钥</span></span><br><span class="line">keytool -genkey -v -keystore ~/myKey.keystore -<span class="built_in">alias</span> myKey -keyalg RSA -validity 20000</span><br></pre></td></tr></table></figure><blockquote><p>keytool 秘钥工具</p><p>-keystore D:/myKey.keystore 表示生成的证书及其存放路径，如果直接写文件名则默认生成在用户当前目录下；</p><p>-alias myKey 表示证书的别名是 <code>myKey</code>,不写这一项的话证书名字默认是mykey；</p><p>-keyalg RSA 表示采用的RSA算法；</p><p>-validity 20000表示证书的有效期是20000天。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 签名</span></span><br><span class="line">jarsigner -verbose -keystore myKey.keystore -signedjar name.apk app-release-unsigned.apk myKey</span><br></pre></td></tr></table></figure><blockquote><p>jarsigner 签名工具</p><p>name.apk 需要生成的apk名字</p><p>app-release-unsigned.apk 待签名的apk</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介-Cordova官网-Cordova中文网&quot;&gt;&lt;a href=&quot;#简介-Cordova官网-Cordova中文网&quot; class=&quot;headerlink&quot; title=&quot;简介 ( Cordova官网/Cordova中文网)&quot;&gt;&lt;/a&gt;简介 ( &lt;a href=&quot;
      
    
    </summary>
    
      <category term="cordova" scheme="https://huleski.github.io/categories/cordova/"/>
    
    
      <category term="cordova" scheme="https://huleski.github.io/tags/cordova/"/>
    
  </entry>
  
</feed>
